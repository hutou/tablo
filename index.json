{"repository_name":"tablo","body":"[<img src=\"assets/images/logo.png\" alt=\"Logo\"/>](https://github.com/hutou/tablo/tree/development?tab=readme-ov-file)\n\n## Table of contents\n\n- [Getting started](#getting-started)\n- [Borders](#borders)\n- [Row types](#row-types)\n  - [Header and Body](#header-and-body)\n  - [Group](#group)\n  - [Headings](#headings)\n- [Rules](#rules)\n- [Display frequency and repeated title](#display-frequency-and-repeated-title)\n- [Extracting - Formatting - Styling](#extracting---formatting---styling)\n  - [Extracting](#extracting)\n  - [Formatting](#formatting)\n  - [Styling](#styling)\n- [Packing](#packing)\n- [Summary](#summary)\n- [Transpose](#transpose)\n\n## Getting started\n\nIn this tutorial, we'll start with a very simple example, which we'll build on\nas we go along to gradually discover all the possibilities offered by the\nTablo library.\n\nHere's a first look at how to use Tablo to lay out a simple table from an array\nof integers.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\nend\n\nputs table\n```\n\nor\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3])\ntable.add_column(\"itself\", &.itself)\ntable.add_column(2, header: \"Double\") {|n| n * 2}\ntable.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n\nputs table\n```\n\noutput:\n\n```\n+--------------+--------------+--------------+\n|       itself |       Double | String       |\n+--------------+--------------+--------------+\n|            1 |            2 | A            |\n|            2 |            4 | BB           |\n|            3 |            6 | CCC          |\n+--------------+--------------+--------------+\n```\n\nA great deal of information can already be extracted from this simple example:\n\n- The only parameter required to create the table is the data source (the\n  array of integers), but to produce a result, you obviously need to add\n  columns.\n- Any number of columns can be defined, each requiring an identifier and\n  a proc for extracting data from the source and, if necessary, modifying\n  its type and value.\n- The column identifier can be of type `String`, `Integer` or `Symbol`. By default,\n  the column header takes the value of the identifier, unless the optional\n  `header` parameter is used.\n- Columns are the same width.\n- We can see two types of row: header and body.\n- Columns of numbers are aligned to the right, and columns of text to the left, for\n  both headers and body.\n- Default borders use the classic `Ascii` type.\n\n## Borders\n\nThe Border structure lets you create frames around rows and columns, using\nascii and/or graphic characters.\n\nA set of predefined borders is available, including `Ascii`,\n`ReducedAscii` and `Fancy`, but you can also define your own border\ntypes (see API for details).\n\nDefault border type is `Ascii`, but to change a table's border type,\nsimply assign the desired definition to the `border` parameter when\ninitializing the table. So, for example, to set the `ReducedAscii`\nborder type, you can do:\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(Tablo::BorderName::ReducedAscii) do |t|\n```\n\nor even:\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(:reduced_ascii)) do |t|\n```\n\n```text\n-------------- -------------- --------------\n       itself         Double   String\n-------------- -------------- --------------\n            1              2   A\n            2              4   BB\n            3              6   CCC\n-------------- -------------- --------------\n```\n\n## Row types\n\n### Header and Body\n\nThe Header and Body data row types form the basis of table formatting. Other\ntypes can be optionally added to establish the final layout: the Group row\ntype and Heading row types (Title, SubTitle and Footer).\n\n### Group\n\nAdjacent columns can share a common header, above the column headers\nthemselves. This common header constitutes a Group row type.\n\nTo create a Group row, simply define a common header after each set of\nadjacent columns to be grouped.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") {|n| n * 2}\n  t.add_group(\"Numbers\")\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n  t.add_group(\"Text\")\nend\n\nputs table\n```\n\nOutput:\n\n```\n+-----------------------------+--------------+\n|           Numbers           |     Text     |\n+--------------+--------------+--------------+\n|       itself |       Double | String       |\n+--------------+--------------+--------------+\n|            1 |            2 | A            |\n|            2 |            4 | BB           |\n|            3 |            6 | CCC          |\n+--------------+--------------+--------------+\n```\n\nBy default, Group headers are centered, but their alignment can be modified\nglobally at table initialization time with the `group_alignment` parameter,\nor locally for a given group with the `alignment` parameter.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        group_alignment: Tablo::Justify::Left) do |t|\n```\n\nOutput:\n\n```\n| Numbers                     | Text         |\n```\n\nor\n\n```crystal\nt.add_group(\"Text\", alignment: Tablo::Justify::Left)\n```\n\nOutput:\n\n```\n|           Numbers           | Text         |\n```\n\nNote that the group header can be empty, and that an empty group header is\nautomatically created if the last column group is not specified.\n\nGroup and header are intimately linked and only separated by a horizontal\nline. For custom rendering, this line can be omitted by setting the Table\n`omit_group_header_rule` parameter to `true`.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3],\n        omit_group_header_rule: true) do |t|\n    t.add_column(\"itself\", &.itself)\n    t.add_column(2, header: \"Double\") {|n| n * 2}\n    t.add_group(\"Numbers\")\n    t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n    t.add_column(:column_4, header: \"Boolean\") {|n| n.even?}\n    t.add_group(\"Other data types\")\nend\n\nputs table\n```\n\nOutput:\n\n```\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\n### Headings\n\nA formatted table can optionally include a title, subtitle and footer. Each of\nthese elements is of type Title, SubTitle or Footer, inherited from the\nabstract class Heading (see API).\n\nBy default, when the table is initialized, their value is `nil`, so nothing is\ndisplayed.\n\nTo display a title (or subtitle or footer), simply specify its value when\ninitializing the table.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        title: Tablo::Heading::Title.new(\"Data types alignment\")) do |t|\n```\n\nOutput:\n\n```\n                     Data types alignment\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\nThese elements can also be framed, possibly with line breaks before and after\n(defined in the `Heading::Frame` struct initializer as `line_breaks_before` and\n`line_breaks_after` with a value of 0).\n\nThe number of line breaks between adjacent elements is equal to the highest\nvalue between the current element's `line_breaks_after` and the next element's\n`line_breaks_before`.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading::Title.new(\"Data types alignment\",\n    frame: Tablo::Heading::Frame.new(line_breaks_before: 0, line_breaks_after: 2))) do |t|\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\nIn summary, we have 6 types of data rows :\n\n| Type     | Description                                                                                |\n| :------- | :----------------------------------------------------------------------------------------- |\n| Header   | Always displayed, unless `header_frequency:` is `nil` </br> or `masked_headers:` is `true` |\n| Body     | Always displayed                                                                           |\n| Group    | Optional                                                                                   |\n| Title    | Optional                                                                                   |\n| Subtitle | Optional                                                                                   |\n| Footer   | Optional                                                                                   |\n\n## Rules\n\nBetween the different types of rows, there are also different types of\nseparator lines, whose format varies according to the types of rows they\nseparate.\n\nIn the case of framed rows, for example, there may be a single dividing line,\nmaking the rows linked, or on the contrary, there may first be a closing line\nfor the top row, possibly followed by line breaks before the opening line of\nthe bottom row.\n\nThese horizontal rules are formatted by the `horizontal_rule` method of class\nBorder.\n\n## Display frequency and repeated title\n\nAn important parameter in table initialization is `header_frequency:`\n\n- By default, it is set to 0, i.e. rows of data other than body are displayed\n  only once, at the beginning for titles and headers, at the end for the footer.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: 0,\n        title: Tablo::Heading::Title.new(\"Data types alignment\",\n          frame: Tablo::Heading::Frame.new(0, 2)),\n        subtitle: Tablo::Heading::SubTitle.new(\"Only Booleans are centered by default\"),\n        footer: Tablo::Heading::Footer.new(\"End of page\")) do |t|\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n                         End of page\n```\n\n- If set to `nil`, only body rows are displayed.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: nil,\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\n- If set to `n` (positive), group or column headers are repeated every `n`\n  rows, as are footers, but titles and subtitles are not repeated.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: 2,\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n+--------------+--------------+--------------+--------------+\n                         End of page\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            3 |            6 | CCC          |     false    |\n|              |              |              |              |\n+--------------+--------------+--------------+--------------+\n                         End of page\n```\n\nHowever, if the title `repeated` parameter is set to `true`, we obtain title and\nsubtitle repetition.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: 2,\n        title: Tablo::Heading::Title.new(\"Data types alignment\",\n          frame: Tablo::Heading::Frame.new(0, 2), repeated: true),\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n+--------------+--------------+--------------+--------------+\n                         End of page\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            3 |            6 | CCC          |     false    |\n|              |              |              |              |\n+--------------+--------------+--------------+--------------+\n                         End of page\n```\n\n## Extracting - Formatting - Styling\n\nAt the heart of Tablo's operation lies the Cell, a data structure containing\nall the elements required for display.\n\nA cell, whether fed by data extracted from the source or directly from the\ncode, can span several lines. Even if it initially occupies a single line,\nreducing the column width can result in a cell being displayed over several\nlines.\n\nYou can limit the number of lines displayed by using the `header_wrap` or\n`body_wrap` parameters when initializing the table (These 2 parameters are\nglobal to the table, and cannot be set on individual columns). If the whole\ncell content cannot be displayed due to this restriction, a special character\n(tilde by default) is inserted in the right-hand padding area of the last line\nof the cell (unless right padding is set to 0 for the column).\n\nNote here the use of the `row_divider_frequency` parameter to separate body\nrows\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([\"abc\", \"def\\nghi\\njkl\\nmno\\npqr\", \"xyz\"],\n  border: Tablo::Border.new(\"+++++++++|||---.\"),\n  header_wrap: 2,\n  body_wrap: 3,\n  row_divider_frequency: 1) do |t|\n  t.add_column(\"A\\nfour\\nlines\\ncell\", &.itself)\nend\n\nputs table\n```\n\nOutput:\n\n```\n+--------------+\n| A            |\n| four        ~|\n+--------------+\n| abc          |\n+..............+\n| def          |\n| ghi          |\n| jkl         ~|\n+..............+\n| xyz          |\n+--------------+\n```\n\nIn addition, to have greater control over the line break, we can use the\n`wrap_mode` parameter to choose between `Rune` (Roughly equivalent to\na character) and `Word` when cutting a line.\n\nTo use Tablo with non-Romanic languages, it is mandatory to use the\n`naqviz/uni_char_width` shard so that the width of each grapheme is correctly\nmanaged, without impacting alignment.\n\nTo do this, you need to:\n\n- Add the dependencies to your shard.yml:\n\n```yaml\ndependencies:\n  tablo:\n    github: hutou/tablo\n  uniwidth:\n    github: naqvis/uni_char_width\n```\n\n- Run `shards install`\n- And insert the lines\n\n```crystal\nrequire \"tablo\"\nrequire \"uniwidth\"\n```\n\nat the beginning of your app.\n\n### Extracting\n\nThe cell `value` attribute contains the raw data.\n\nIf directly given as argument to Headings or Group, the cell is a `TextCell`\nas it is not related to source data.\n\nIf extracted from the source (body rows), the cell is of type `DataCell`, and\nthe corresponding column header is also a `DataCell` (as it depends on the\ntype of body `value` for alignment).\n\nThe `coords` attribute, specific to the `DataCell` type, provides access to\nthe cell's coordinates (`row_index` and `column_index`), as well as the\n`body_value`. This information is used to activate conditional formatting and\nstyling.\n\n```crystal\nstruct Cell::Data::Coords\ngetter body_value, row_index, column_index\n    def initialize(@body_value : CellType, @row_index : Int32, @column_index : Int32)\n    end\nend\n```\n\nThe type of `value` is `Tablo::CellType`, which is simply defined as an empty\nmodule restriction type:\n\n```crystal\nmodule Tablo::CellType\nend\n```\n\nThis module is already included in all Crystal main scalar types. To\nuse a (non or less used) scalar type or a user defined class or struct, it is\nmandatory to include it by reopening the class or struct.\n\nFor example, to allow a cell value to contain an array, we could do :\n\n```crystal\nclass Array\n    include Tablo::CellType\nend\n```\n\nand:\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([[1, 2], [3, 4]]) do |t|\n  t.add_column(\"itself\") { |n| n }\nend\n\nputs table\n```\n\nwould output:\n\n```\n+--------------+\n| itself       |\n+--------------+\n| [1, 2]       |\n| [3, 4]       |\n+--------------+\n```\n\n### Formatting\n\nFormatting consists in applying a transformation to the raw data (the `value`)\nto obtain a character string ready to be displayed. The simplest\ntransformation (which is also the one applied by default) is simply a call to\nthe `to_s` method.\n\nUsing a proc `formatter` allows you to customize formatting in a variety of\nways, from using `sprintf` formatting strings for numeric values to various\n`String` methods for text and specific `Tablo::Util` methods for both.\n\nA formatter proc can take four forms : the first two apply equally to TextCell\nand DataCell and are applied unconditionally on `value`.\n\nThe first form expects one parameter (`value`) and the second two: `value` and\n`width` (column width).\n\nHere is an example of the first form:\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(3, header: \"Float\",\n    header_formatter: ->(value : Tablo::CellType) { value.as(String).upcase },\n    body_formatter: ->(value : Tablo::CellType) {\n      \"%.3f\" % value.as(Float)\n    }) { |n| n ** 0.5 }\nend\n\nputs table\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+\n|       itself |       Double |        FLOAT |   <1>\n+--------------+--------------+--------------+\n|            1 |            2 |        1.000 |\n|            2 |            4 |        1.414 |\n|            3 |            6 |        1.732 |\n+--------------+--------------+--------------+\n```\n\n<1> Note that the FLOAT column is aligned to the right, as its alignment is\ngoverned by the type of `value`, which is a float.\n\nIf the formatting were done directly at the data extraction level, `value`\nwould be of type `String` and column would be aligned to the left.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(3, header: \"Float\",\n    header_formatter: ->(value : Tablo::CellType) {\n    value.as(String).upcase }) { |n| \"%.3f\" % (n ** 0.5)\n  }\nend\nputs table\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+\n|       itself |       Double | FLOAT        |\n+--------------+--------------+--------------+\n|            1 |            2 | 1.000        |\n|            2 |            4 | 1.414        |\n|            3 |            6 | 1.732        |\n+--------------+--------------+--------------+\n```\n\nTo illustrate the 2nd form, we will use the `Tablo::Util.stretch` method,\nwhich can be useful on groups or headings.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_group(\"Numbers\",\n    formatter: ->(value : Tablo::CellType, width : Int32) {\n      Tablo::Util.stretch(value.as(String), width, ' ')\n    })\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n  t.add_column(:column_4, header: \"Boolean\") { |n| n.even? }\n  t.add_group(\"Other data types\")\nend\n\nputs table\n```\n\nOutput:\n\n```\n+-----------------------------+-----------------------------+\n|  N   u   m   b   e   r   s  |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\nForm 3 and form 4 apply only on DataCell cell types, as they use the\n`coords` parameter to conditionnally format the `value`.\n\nHere is an exemple of form 3 with another method from `Tablo::Util`, which use\nthe `column_index` as formatting condition.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([-30.00001, -3.14159, 0.0, 1.470001, 5.78707, 10.0],\n  body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n    case coords.column_index\n    when 1 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::Empty)\n    when 2 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::Blank)\n    when 3 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::Dot)\n    when 4 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::DotZero)\n    else        value.as(Float).to_s\n    end\n  }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"1 - Empty\", &.itself)\n  t.add_column(\"2 - Blank\", &.itself)\n  t.add_column(\"3 - Dot\", &.itself)\n  t.add_column(\"4 - DotZero\", &.itself)\nend\n\nputs table\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+--------------+--------------+\n|       itself |    1 - Empty |    2 - Blank |      3 - Dot |  4 - DotZero |\n+--------------+--------------+--------------+--------------+--------------+\n|    -30.00001 |     -30      |     -30      |     -30.     |     -30.0    |\n|     -3.14159 |      -3.1416 |      -3.1416 |      -3.1416 |      -3.1416 |\n|          0.0 |              |       0      |       0.     |       0.0    |\n|     1.470001 |       1.47   |       1.47   |       1.47   |       1.47   |\n|      5.78707 |       5.7871 |       5.7871 |       5.7871 |       5.7871 |\n|         10.0 |      10      |      10      |      10.     |      10.0    |\n+--------------+--------------+--------------+--------------+--------------+\n```\n\nIncidentally, this last example displays all the formatting possibilities of\nthe `Tablo::Util.dot_align` method.\n\nCompared to the third form, form 4 also allows the use of the width value. +\nIts usefulness seems less obvious, however.\n\nOverview of the 4 different forms of formatter procs:\n| Forms of formatter procs | Parameter and types, in order |\n| -- | -- |\n| 1st form | `value` : `Tablo::CellType` <br />used by: `TextCell` or `DataCell`|\n| 2nd form | `value` : `Tablo::CellType`, `width` : `Int32` <br />used by: `TextCell` or `DataCell` |\n| 3rd form | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords` <br />used by: `DataCell`|\n| 4th form | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords`, <br />`width` : `Int32` used by: `DataCell` |\n\n### Styling\n\nas they depend on the terminal's capabilities. There are therefore\n2 complementary ways of proceeding:\n\n- play with the mode (underlined, bold, italic...)\n- use color\n\nThis can be done using ANSI code sequences, or preferably, using the\n`colorize` module of the standard library.\n\nIn this section, we'll be using color, altered characters and graphic borders\nwith the Fancy border type. Output will therefore be presented as SVG images,\nso as to guarantee perfect rendering, whatever the medium used for display.\n\nFor styling, there are 5 forms of procs.\n\nThe first uses only the (formatted) content as a parameter, and therefore does not\nallow conditional styling.\n\nLet's look at a simple example, with yellow borders and blue headers.\n\n```crystal\nrequire \"tablo\"\nrequire \"colorize\"\n\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(:fancy, styler: ->(border_char : String) {\n    border_char.colorize(:yellow).to_s\n  }),\n  header_styler: ->(content : String) { content.colorize(:blue).to_s }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n  t.add_column(:column_4, header: \"Boolean\") { |n| n.even? }\nend\n\nputs table\n```\n\n<p> <img src=\"assets/images/styling_first_form.svg\" width=460> </p>\n\nCool! Let's do now some conditional styling, painting in bold green all values\ngreater than 2 in all numeric columns and underlining the `true` boolean value\nin fourth column: this is the third form of styling.\nJust add, at the table level before `header_styler`, the following lines :\n\n```crystal\nbody_styler: ->(value : Tablo::CellType, content : String) {\n  case value\n  when Int32\n    value > 2 ? content.colorize.fore(:green).mode(:bold).to_s : content\n  else\n    value == true ? content.colorize.mode(:underline).to_s : content\n  end\n},\n```\n\n<p> <img src=\"assets/images/styling_third_form.svg\" width=460> </p>\n\nLet's end with a final example, with a black-and-white look: how do you\ndisplay rows alternately in light gray (with a bit of italics) and dark gray\nto make them easier to read?\n\nThis would be the 4th form.\n\n```crystal\nrequire \"tablo\"\nrequire \"colorize\"\n\ntable = Tablo::Table.new([1, 2, 3, 4, 5],\n  title: Tablo::Heading::Title.new(\"My black and white fancy table\", frame: Tablo::Heading::Frame.new),\n  footer: Tablo::Heading::Footer.new(\"End of data\", frame: Tablo::Heading::Frame.new),\n  border: Tablo::Border.new(:fancy, ->(border_char : String) {\n    border_char.colorize(:light_gray).to_s\n  }),\n  body_styler: ->(_value : Tablo::CellType, coords : Tablo::Cell::Data::Coords, content : String) {\n    if coords.row_index.even?\n      \"\\e[3m\" + content.colorize(:light_gray).to_s + \"\\e[0m\"                      <1>\n    else\n      content.colorize.fore(:dark_gray).mode(:bold).to_s\n    end\n  },\n  header_styler: ->(content : String) { content.colorize.mode(:bold).to_s }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\nend\n\nputs table\n```\n\n`<1>` From version 1.10 onwards, Crystal does support italic mode, and the use\nof ANSI sequences is given here simply as an example.\n\n<p> <img src=\"assets/images/styling_fourth_form.svg\" width=460> </p>\n\nOverview of the 5 different forms of styler procs:\n\n| Forms of styler procs | Parameter and types, in order                                                                                                                                   |\n| --------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1st form              | `(formatted) content` : `String` <br />used by: `Border`, `TextCell` or `DataCell`                                                                              |\n| 2nd form              | `(formatted) content` : `String`, `line_index` : `Int32` <br /> used by: `TextCell`                                                                             |\n| 3rd form              | `value` : `Tablo::CellType`, `(formatted) content` : `String` <br /> used by: `DataCell`                                                                        |\n| 4th form              | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords`, <br /> `(formatted) content` : `String` used by: `DataCell`                                |\n| 5th form              | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords`, <br /> `(formatted) content` : `String`, `line_index` : `Int32` <br /> used by: `DataCell` |\n\n## Packing\n\nIn the previous examples, the notion of column width was used. For a better\nunderstanding, the diagram below highlights the structure of a column.\n\n<p> <img src=\"assets/images/column_layout.svg\" width=460> </p>\n\nAs we saw at the start of this tutorial, by default, all columns have the same\nwidth, i.e. 12 characters.\n\nOf course, this value can be modified globally when initializing the table, or\nindividually when defining columns. The same applies to left and right\npadding, as well as to the padding character (a space, by default).\n\nThe border width is 1 character maximum, but can be 0 (i.e. no border) if the\nletter E is used in the border definition string.\n\nThe `pack` method is a welcome aid to table formatting. It accepts\n3 parameters, all optional:\n\n- `width`: total width required for the formatted table. If no `width` is\n  given and if the value of parameter `Config.terminal_capped_width` is true,\n  the value of `width` is read from the size of the terminal, otherwise its\n  value is `nil` and in that case, only `packing_mode == AutoSized` has an\n  effect.\n\n- `packing_mode` : column widths taken as starting point for resizing,\n  possible values are :\n  - `Current` : resizing starts from columns current width\n  - `Initial` : current values are reset to their initial values, at column\n    definition time\n  - `AutoSized` : current values are set to their 'best fit'\n    values, _ie_ they are automatically adapted to their largest content\n- `except` or `only` : (array of) column label(s) to be excluded from\n  being resized (`except`), or, on the contrary, to be selected for\n  packing (`only`).\n\nThe following examples will illustrate the behaviour of the different\nparameters values, starting from the 'standard' one, with all column widths to\ntheir default value : 12 characters.\n\n```crystal\nrequire \"tablo\"\n\ndata = [\n  [1, \"Box\", \"Orange\", \"Elephant\", \"Mont St Michel\"],\n]\ntable = Tablo::Table.new(data) do |t|\n  t.add_column(\"Primes\") { |n| n[0].as(Int32) }\n  t.add_column(2, header: \"Things\") { |n| n[1].as(String) }\n  t.add_column(:fruits, header: \"Fruits\") { |n| n[2].as(String) }\n  t.add_column(3, header: \"Animals\") { |n| n[3].as(String) }\n  t.add_column(\"Famous\\nSites\") { |n| n[4].as(String) }\nend\n\nputs table\nputs \"table width = #{table.total_table_width}\"\n```\n\nTable standard output, using default width values, without any packing:\n\n```\n puts table\n +--------------+--------------+--------------+--------------+--------------+\n |       Primes | Things       | Fruits       | Animals      | Famous       |\n |              |              |              |              | Sites        |\n +--------------+--------------+--------------+--------------+--------------+\n |            1 | Box          | Orange       | Elephant     | Mont St      |\n |              |              |              |              | Michel       |\n +--------------+--------------+--------------+--------------+--------------+\n table width = 76\n```\n\nUsing default `pack` parameters (ie: none !), we get an optimal packing\n\n```\n puts table.pack\n +--------+--------+--------+----------+----------------+\n | Primes | Things | Fruits | Animals  | Famous         |\n |        |        |        |          | Sites          |\n +--------+--------+--------+----------+----------------+\n |      1 | Box    | Orange | Elephant | Mont St Michel |\n +--------+--------+--------+----------+----------------+\n table width = 56\n```\n\nBut using `pack` with same table width (56) on initial widths values gives\na significantly poorer result\n\n```\n puts table.pack(56, packing_mode: Tablo::PackingMode::InitialWidths)\n +----------+----------+----------+----------+----------+\n |   Primes | Things   | Fruits   | Animals  | Famous   |\n |          |          |          |          | Sites    |\n +----------+----------+----------+----------+----------+\n |        1 | Box      | Orange   | Elephant | Mont St  |\n |          |          |          |          | Michel   |\n +----------+----------+----------+----------+----------+\n table width = 56\n```\n\nThis is due to the way Tablo reduces or increases column size. See the\ndescription of the algorithm in the releated section for `Table.pack` in\nAPI.\n\nUsing the `width` parameter, any table width can be obtained, by reducing or\nincreasing the width of each column progressively to reach the desired table\nwidth\n\n```\n puts table.pack(30)\n +-----+-----+-----+-----+----+\n | Pri | Thi | Fru | Ani | Fa |\n | mes | ngs | its | mal | mo |\n |     |     |     | s   | us |\n |     |     |     |     | Si |\n |     |     |     |     | te |\n |     |     |     |     | s  |\n +-----+-----+-----+-----+----+\n |   1 | Box | Ora | Ele | Mo |\n |     |     | nge | pha | nt |\n |     |     |     | nt  | St |\n |     |     |     |     | Mi |\n |     |     |     |     | el |\n +-----+-----+-----+-----+----+\n table width = 30\n```\n\nor\n\n```\n puts table.pack(90)\n +----------------+-----------------+-----------------+-----------------+-----------------+\n |         Primes | Things          | Fruits          | Animals         | Famous          |\n |                |                 |                 |                 | Sites           |\n +----------------+-----------------+-----------------+-----------------+-----------------+\n |              1 | Box             | Orange          | Elephant        | Mont St Michel  |\n +----------------+-----------------+-----------------+-----------------+-----------------+\n table width = 90\n```\n\nThere is, however, a limit to the reduction: each column must be able to\naccommodate at least one character. Here, we're asking for a table width of\n15, but the minimum size to respect this rule is 21!\n\n```\n puts table.pack(15)\n +---+---+---+---+---+\n | P | T | F | A | F |\n | r | h | r | n | a |\n | i | i | u | i | m |\n | m | n | i | m | o |\n | e | g | t | a | u |\n | s | s | s | l | s |\n |   |   |   | s | S |\n |   |   |   |   | i |\n |   |   |   |   | t |\n |   |   |   |   | e |\n |   |   |   |   | s |\n +---+---+---+---+---+\n | 1 | B | O | E | M |\n |   | o | r | l | o |\n |   | x | a | e | n |\n |   |   | n | p | t |\n |   |   | g | h | S |\n |   |   | e | a | t |\n |   |   |   | n | M |\n |   |   |   | t | i |\n |   |   |   |   | c |\n |   |   |   |   | h |\n |   |   |   |   | e |\n |   |   |   |   | l |\n +---+---+---+---+---+\n```\n\nIf, with the parameter `packing_mode == Startingwidths::AutoSized` by\ndefault (set by `Config.packing_mode`), the `pack` method automatically\nadapts the width of columns to their largest content (body or header) before\nresizing, this requires you to go through the entire source dataset, which can\nbe costly in terms of performance in some cases.\n\nThis behavior can be avoided, but possibly with a loss of quality, by changing\nthe value of `packing_mode` to `Current` or `Initial`. In this case,\nhowever, a value for `width` must be supplied, either directly or by reading\nthe terminal size, otherwise `pack` will become a non-operation.\n\nFinally, using the `except` parameter, you can temporarily freeze the size of\none or more columns at their current value, so that they are excluded from\nresizing.\n\nstored in 2 different attributes: the current value and the initial value\n(never subsequently modified).\n\nThe `pack` method simply modifies the current column width value, and the\n`to_s` method then takes care of the layout, and we can save the table in its\noutput layout in a string with :\n\n```crystal\nformatted_table = table.to_s\n```\n\nIt is therefore equivalent to write :\n\n```crystal\ntable.pack\nputs table\n```\n\nor\n\n```crystal\nputs table.pack\n```\n\nTo sum up:\n\n| Type of call                                               | Results, with `PackingMode::AutoSized` as default and no columns excluded                                                                                                                                   |\n| :--------------------------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `table.pack`                                               | <ul><li>Automatically adapts columns to their largest content</li><li>Modifies current values of column width</li></ul>                                                                                     |\n| `table.pack(40)`                                           | <ul> <li>Automatically adapts columns to their largest content</li> <li>Modifies current values of column width</li> <li>Reduces or increases column widths to meet total table size requirements</li></ul> |\n| `table.pack(packing_mode: PackingMode::CurrentWidths`)     | <ul><li>No-op</li></ul>                                                                                                                                                                                     |\n| `table.pack(40, packing_mode: PackingMode::CurrentWidths`) | <ul><li>Reduces or increases column widths to meet total table size requirements</li></ul>                                                                                                                  |\n| `table.pack(packing_mode: PackingMode::InitialWidths`)     | <ul><li> Only resets current column values to their initial values, no packing is done</li></ul>                                                                                                            |\n| `table.pack(40, packing_mode: PackingMode::InitialWidths`) | <ul><li> Resets current column values to their initial values</li> <li>Reduces or increases column widths to meet total table size requirements</li></ul>                                                   |\n\n## Summary\n\nThe Tablo library offers a basic yet useful summary method.\n\nAt present, it can be used to perform calculations on individual columns of data\nand between columns.\n\nHere's an example of how it works now and what it can do for you:\n\n```crystal\nrequire \"tablo\"\nrequire \"colorize\"\n\nstruct InvoiceItem\n  include Tablo::CellType\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : Int32?)\n  end\nend\n\ninvoice = [\n  InvoiceItem.new(\"Laptop\", 3, 98000),\n  InvoiceItem.new(\"Printer\", 2, 15499),\n  InvoiceItem.new(\"Router\", 1, 9900),\n  InvoiceItem.new(\"Switch\", nil, 4500),\n  InvoiceItem.new(\"Accessories\", 5, 6450),\n]\n\ntable = Tablo::Table.new(invoice,\n  omit_last_rule: false,\n  border: Tablo::Border.new(Tablo::BorderName::Fancy),\n  title: Tablo::Heading::Title.new(\"Invoice\")) do |t|\n  t.add_column(\"Product\",\n    &.product)\n  t.add_column(\"Quantity\",\n    body_formatter: ->(value : Tablo::CellType) {\n      (value.nil? ? \"N/A\" : value.to_s)\n    }, &.quantity)\n  t.add_column(\"Price\",\n    body_formatter: ->(value : Tablo::CellType) {\n      \"%.2f\" % (value.as(Int32) / 100)\n    }, &.price)\n  t.add_column(:total, header: \"Total\",\n    body_formatter: ->(value : Tablo::CellType) {\n      value.nil? ? \"\" : \"%.2f\" % (value.as(Int32) / 100)\n    }) { |n| n.price.nil? || n.quantity.nil? ? nil : (\n    n.price.as(Int32) * n.quantity.as(Int32)\n  ) }\nend\n\ninvoice_summary_definition = [\n  Tablo::Aggregation.new(:total, Tablo::Aggregate::Sum),\n  Tablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Right,\n    formatter: ->(value : Tablo::CellType) {\n      value.is_a?(String) ? value : (\n        value.nil? ? \"\" : \"%.2f\" % (value.as(Int32) / 100)\n      )\n    },\n    styler: ->(_value : Tablo::CellType, cd : Tablo::Cell::Data::Coords, fc : String) {\n      case cd.row_index\n      when 0, 2, 5\n        fc.colorize.mode(:bold).to_s\n      when 1\n        fc.colorize.mode(:italic).to_s\n      else\n        fc\n      end\n    }),\n  Tablo::Summary::BodyRow.new(\"Price\", 1, \"SubTotal\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 2, \"Discount 5%\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 3, \"S/T discount\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 4, \"Tax (20%)\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 6, \"Balance due\"),\n  Tablo::Summary::BodyRow.new(:total, 1, ->{ Tablo::Summary.use(:total,\n    Tablo::Aggregate::Sum) }),\n  Tablo::Summary::BodyRow.new(:total, 2, ->{ Tablo::Summary.keep(:discount,\n    (Tablo::Summary.use(:total, Tablo::Aggregate::Sum).as(Int32) * 0.05)\n      .to_i).as(Tablo::CellType) }),\n  Tablo::Summary::BodyRow.new(:total, 3, ->{ (Tablo::Summary.keep(:total_after_discount,\n    Tablo::Summary.use(:total, Tablo::Aggregate::Sum).as(Int32) -\n    Tablo::Summary.use(:discount).as(Int32))).as(Tablo::CellType) }),\n  Tablo::Summary::BodyRow.new(:total, 4, ->{ (Tablo::Summary.keep(:tax,\n    (Tablo::Summary.use(:total_after_discount).as(Int32) * 0.2)\n      .to_i)).as(Tablo::CellType) }),\n  Tablo::Summary::BodyRow.new(:total, 5, \"========\".as(Tablo::CellType)),\n  Tablo::Summary::BodyRow.new(:total, 6, ->{ (Tablo::Summary.use(:tax).as(Int32) +\n                                     Tablo::Summary.use(:total_after_discount)\n                                       .as(Int32)).as(Tablo::CellType) }),\n]\n\ntable.summary(invoice_summary_definition,\n  {\n    masked_headers: true,\n    border:         Tablo::Border.new(\"EEESSSSSSSSSESSS\"),\n  })\n\nputs table\nputs table.summary.as(Tablo::SummaryTable)\n```\n\n<p> <img src=\"assets/images/summary.svg\" width=460> </p>\n\nLet's take a closer look at the source code.\n\nIn the last lines of code, you can see two calls to the summary method. The\nfirst accepts two parameters and is used to define the layout of the summary,\nwhile the second, without parameters, simply returns the SummaryTable instance\ncreated, ready for display.\n\nThe layout is defined on the basis of several data type instances, grouped together in an array (`summary_definition` in this example):\n\n1. The Aggregation type, defined as follows:\n\n```crystal\n   record Aggregation, column : LabelType | Array(LabelType),\n          aggregate : Aggregate | Array(Aggregate)\n```\n\n- column, of type LabelType, identifies the column on which to perform\n  calculations\n- aggregate is an enum with 4 possible elements: Sum, Count, Min\n  and Max. Several Aggregate instances can be defined, or, if required,\n  combined into a single instance by setting the parameters in an array.\n\nThe layout is defined on the basis of several data type instances, grouped together in an array:\n\n1. the Aggregation type is used to define the various aggregation calculations (Sum, Count, Minimum and Maximum) on the table's data columns.\n\nNil values are ignored, and only numerical values are used for Sum, Minimum and Maximum calculations. Source data is read only once, regardless of the number of columns and aggregates used.\n\nrecord Aggregation, column : LabelType | Array(LabelType), aggregate : Aggregate | Array(Aggregate)\n\n2. column, of type LabelType, identifies the column on which to perform calculations\n   Aggregate is an enum with 4 possible elements: Sum, Count, Min and Max.\n   Several Aggregate instances can be defined, or, if required, combined into a single instance by setting the parameters in an array.\n\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\n\nthe Summary::BodyRow type\nSummary::BodyColumn type\n\nThe first part - the creation of the main table - calls for no particular\ncomment (except perhaps the use of a more realistic data source than the\nprevious arrays of integers!)\n\nCalling the `summary` method, with its 2 parameters, creates a new `Table`\ninstance, and calling the same method without arguments returns this same\ninstance, ready to be displayed.\n\nThe first parameter (`summary_def`) defines all the calculations to be performed\non the data, as well as their layout.\n\nThe type of `summary_def` is : `Hash(LabelType, NamedTuple(...))`. The hash key is\ntherefore a column identifier (`LabelType` is an alias of `String | Symbol\n| Int32`).\n\nThe `NamedTuple` may have up to 8 entries, all optional except `proc`\n\n| Hash key           | Type of hash value   |\n| :----------------- | :------------------- |\n| `header`           | `String`             |\n| `header_alignment` | `Justify`            |\n| `header_formatter` | `DataCellFormatter`  |\n| `header_styler`    | `DataCellStyler`     |\n| `body_alignment`   | `Justify`            |\n| `body_formatter`   | `DataCellFormatter`  |\n| `body_styler`      | `DataCellStyler`     |\n| `proc`             | `Summary::UserProcs` |\n\n- `header` default value is the empty string\n- the next 6 entries default values are inherited from Table\n  initializers of same name\n- `proc` is a bit complex and has no default value. Its value type is\n  `Summary::UserProcs`, an alias whose definition is :\n\n```crystal\nalias SourcesCurrentColumn = Array(CellType)\nalias SourcesAllColumns = Hash(LabelType, Array(CellType))\nalias Summary::UserProcCurrent = Proc(SourcesCurrentColumn, CellType)\nalias Summary::UserProcAll = Proc(SourcesAllColumns, CellType)\n\nalias SummaryLineProcCurrent = {Int32, Summary::UserProcCurrent}\nalias SummaryLineProcAll = {Int32, Summary::UserProcAll}\nalias SummaryLineProcBoth = SummaryLineProcCurrent | SummaryLineProcAll\n\nalias Summary::UserProcs = {Int32, Proc(Array(CellType), CellType)} |\n{Int32, Proc(Hash(LabelType, Array(CellType)), CellType)} |\nArray({Int32, Proc(Array(CellType), CellType)}) |\nArray({Int32, Proc(Hash(LabelType, Array(CellType)), CellType)}) |\nArray({Int32, Proc(Array(CellType), CellType)} |\n{Int32, Proc(Hash(LabelType, Array(CellType)), CellType)})\nalias Summary::UserProcAll = Proc(Hash(LabelType, Array(CellType)), CellType)\nalias Summary::UserProcCurrent = Proc(Array(CellType), CellType)\n```\n\nThe latter - `Summary::UserProcs`- is a tad complex and can take several forms.\nBasically, it is a tuple of 2 elements :\n\n- An `Int32`, which indicates the position (line) of the proc result in the column\n- A `proc` or an array of procs, which performs the calculation and expects\n  as parameter either an `Array(CellType)` or a `Hash(LabelType,\nArray(CellType))`\n\nThe second parameter (`options`) ...\n\nOutch!\n\nLooking again at the source code, we see that :\n\n- The `:tax` column has 2 entries, of type `Tuple`:\n- `body_formatter:` and its associated proc which performs the\n  conversion from cents to currency units, and checks that the cell is\n  not nil (this is necessary, as of the 3 summary lines, the 1st and\n  3rd are not fed).\n- `proc:` a tuple defined by the number of the summary line to be fed,\n  and the proc performing the calculation. The latter takes as\n  parameter a `CellType` array (the \"Tax (20%)\" data column), converts\n  it to an array of integers before summing and converting the result\n\n## Transpose\n\n```text\n\n```\n","program":{"html_id":"tablo/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"tablo","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"tablo/Tablo","path":"Tablo.html","kind":"module","full_name":"Tablo","name":"Tablo","abstract":false,"locations":[{"filename":"src/border.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L4"},{"filename":"src/cell.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L3"},{"filename":"src/column.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/column.cr#L4"},{"filename":"src/config.cr","line_number":5,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L5"},{"filename":"src/heading.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L3"},{"filename":"src/row.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/row.cr#L3"},{"filename":"src/rowgroup.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/rowgroup.cr#L4"},{"filename":"src/summary.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L4"},{"filename":"src/table.cr","line_number":12,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L12"},{"filename":"src/tablo.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/tablo.cr#L3"},{"filename":"src/types.cr","line_number":24,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L24"},{"filename":"src/types.cr","line_number":48,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L48"},{"filename":"src/util.cr","line_number":1,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L1"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT_DATA_DEPENDENT_STYLER","name":"DEFAULT_DATA_DEPENDENT_STYLER","value":"->(_c : CellType, s : String) do\n  s\nend"},{"id":"DEFAULT_FORMATTER","name":"DEFAULT_FORMATTER","value":"->(c : CellType) do\n  c.to_s\nend"},{"id":"DEFAULT_HEADING_ALIGNMENT","name":"DEFAULT_HEADING_ALIGNMENT","value":"Justify::Center"},{"id":"DEFAULT_STYLER","name":"DEFAULT_STYLER","value":"->(s : String) do\n  s\nend"},{"id":"NEWLINE","name":"NEWLINE","value":"{% if flag?(:windows) %}\n              \"\\r\\n\"\n            {% else %}\n              \"\\n\"\n            {% end %}","doc":"Constant initializers","summary":"<p>Constant initializers</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.90.0\""}],"types":[{"html_id":"tablo/Tablo/Border","path":"Tablo/Border.html","kind":"struct","full_name":"Tablo::Border","name":"Border","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/border.cr","line_number":104,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L104"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PREDEFINED_BORDERS","name":"PREDEFINED_BORDERS","value":"{PreSet::Ascii => \"+++++++++|||----\", PreSet::ReducedAscii => \"ESEESEESEESE----\", PreSet::Modern => \"┌┬┐├┼┤└┴┘│││────\", PreSet::ReducedModern => \"ESEESEESEESE────\", PreSet::Markdown => \"SSS|||SSS|||SS-S\", PreSet::Fancy => \"╭┬╮├┼┤╰┴╯│:│─−-⋅\", PreSet::Blank => \"SSSSSSSSSSSSSSSS\", PreSet::Empty => \"EEEEEEEEEEEEEEEE\"}","doc":"`PreSet` border definition hash constant","summary":"<p><code><a href=\"../Tablo/Border/PreSet.html\">PreSet</a></code> border definition hash constant</p>"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The Border class enhances the layout of a data table by separating rows\nand columns with interconnected horizontal and vertical lines.\n\nVarious predefined line types are available, but you are free to create your own.\n\nA border can be styled by a user defined proc, of type `Styler` allowing\nfor colorized output, either by using ANSI sequences or the \"colorize\" module\nfrom the stdlib (default: no style).\n\nA `Border` is defined by a string of exactly 16 characters, which is\nthen converted into 16 strings of up to 1 character each. The definition\nstring can contain any character, but two of them have a special meaning:\nduring conversion, the uppercase E is replaced by an empty string, and the\nuppercase S character is replaced by a space (a simple space may also be used,\nof course).\n\n_Please note that using the capital E character may cause alignment\ndifficulties._\n\nExamples of text or graphic connectors:\n```\n| Name                           | 16 chars string  |\n| ------------------------------ | ---------------  |\n| CONNECTORS_SINGLE_ROUNDED      | ╭┬╮├┼┤╰┴╯│││──── |\n| CONNECTORS_SINGLE              | ┌┬┐├┼┤└┴┘│││──── |\n| CONNECTORS_DOUBLE              | ╔╦╗╠╬╣╚╩╝║║║════ |\n| CONNECTORS_SINGLE_DOUBLE       | ╒╤╕╞╪╡╘╧╛│││════ |\n| CONNECTORS_DOUBLE_SINGLE       | ╓╥╖╟╫╢╙╨╜║║║──── |\n| CONNECTORS_HEAVY               | ┏┳┓┣╋┫┗┻┛┃┃┃━━━━ |\n| CONNECTORS_LIGHT_HEAVY         | ┍┯┑┝┿┥┕┷┙│││━━━━ |\n| CONNECTORS_HEAVY_LIGHT         | ┎┰┒┠╂┨┖┸┚┃┃┃──── |\n| CONNECTORS_TEXT_CLASSIC        | +++++++++|||---- |\n\n```\nMixed graphic character sets, such as:\n```\n| Name                           | 16 chars string  |\n| ------------------------------ | ---------------  |\n| CONNECTORS_SINGLE_DOUBLE_MIXED | ╔╤╗╟┼╢╚╧╝║│║═─═- |\n```\nmay not be correctly rendered.\n\nBelow is a detailed representation of each position and meaning:\n\nThe first 9 characters define the junction or intersection of horizontal and\nvertical border lines.\n\n```\nPos Connector name     Example (using Fancy border preset)\n--- --------------     -----------------------------------\n 0  top_left           \"┌\"\n 1  top_mid            \"┬\"\n 2  top_right          \"┐\"\n\n 3  mid_left           \"├\"\n 4  mid_mid            \"┼\"\n 5  mid_right          \"┤\"\n\n 6  bottom_left        \"└\"\n 7  bottom_mid         \"┴\"\n 8  bottom_right       \"┘\"\n```\n\nThe next three characters define vertical separators in data rows.\n\n```\n 9  vdiv_left          \"│\"\n10  vdiv_mid           \":\"\n11  vdiv_right         \"│\"\n```\n\nAnd finally, the last four characters define the different types of horizontal\nborder, depending on the type of data row or types of adjacent data rows.\n\n```\n12  hdiv_tbs           \"─\"     (title or top or bottom or summary)\n13  hdiv_grp           \"−\"     (group)\n14  hdiv_hdr           \"-\"     (header)\n15  hdiv_bdy           \"⋅\"     (body)\n```\n\nEight predefined borders, of type `PreSet`, can also be used instead of\na definition string.\n\n```\n| name          | 16 chars string  |\n| ------------- | ---------------- |\n| Ascii         | +++++++++|||---- |\n| ReducedAscii  | ESEESEESEESE---- |\n| ReducedModern | ESEESEESEESE──── |\n| Markdown      | SSS|||SSS|||SS-S |\n| Modern        | ┌┬┐├┼┤└┴┘│││──── |\n| Fancy         | ╭┬╮├┼┤╰┴╯│:│─−-⋅ |\n| Blank         | SSSSSSSSSSSSSSSS |\n| Empty         | EEEEEEEEEEEEEEEE |\n```\n\nFor example, the string `\"ESEESEESEESE───\"` is how the `ReducedModern`\nstyle is defined.","summary":"<p>The Border class enhances the layout of a data table by separating rows and columns with interconnected horizontal and vertical lines.</p>","constructors":[{"html_id":"new(definition:String|PreSet=Config.border_definition,styler:Styler=Config.border_styler)-class-method","name":"new","doc":"Border constructor, returning a Border instance.\n\n_Optional (named) parameters, with default values_:\n\n- `definition`: type is `String` | `PreSet`\n\n  Default value is set by `Config.border_definition`\n\n- `styler`: type is `Styler`\n\n  Default value is set by `Config.border_styler`\n\nExamples :\n```\nborder = Tablo::Border.new(Tablo::Border::PreSet::Fancy,\n  styler: ->(s : String) { s.colorize(:yellow).to_s })\n```\nor\n```\nborder = Tablo::Border.new(\"┌┬┐├┼┤└┴┘│││────\",\n  styler: ->(s : String) { s.colorize.fore(:blue).mode(:bold).to_s })\n```","summary":"<p>Border constructor, returning a Border instance.</p>","abstract":false,"args":[{"name":"definition","default_value":"Config.border_definition","external_name":"definition","restriction":"String | PreSet"},{"name":"styler","default_value":"Config.border_styler","external_name":"styler","restriction":"Styler"}],"args_string":"(definition : String | PreSet = Config.border_definition, styler : Styler = Config.border_styler)","args_html":"(definition : String | <a href=\"../Tablo/Border/PreSet.html\">PreSet</a> = <span class=\"t\">Config</span>.border_definition, styler : <a href=\"../Tablo/Border/Styler.html\">Styler</a> = <span class=\"t\">Config</span>.border_styler)","location":{"filename":"src/border.cr","line_number":179,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L179"},"def":{"name":"new","args":[{"name":"definition","default_value":"Config.border_definition","external_name":"definition","restriction":"String | PreSet"},{"name":"styler","default_value":"Config.border_styler","external_name":"styler","restriction":"Styler"}],"visibility":"Public","body":"_ = allocate\n_.initialize(definition, styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"types":[{"html_id":"tablo/Tablo/Border/PreSet","path":"Tablo/Border/PreSet.html","kind":"enum","full_name":"Tablo::Border::PreSet","name":"PreSet","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/border.cr","line_number":107,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L107"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Ascii","name":"Ascii","value":"0"},{"id":"ReducedAscii","name":"ReducedAscii","value":"1"},{"id":"ReducedModern","name":"ReducedModern","value":"2"},{"id":"Markdown","name":"Markdown","value":"3"},{"id":"Modern","name":"Modern","value":"4"},{"id":"Fancy","name":"Fancy","value":"5"},{"id":"Empty","name":"Empty","value":"6"},{"id":"Blank","name":"Blank","value":"7"}],"namespace":{"html_id":"tablo/Tablo/Border","kind":"struct","full_name":"Tablo::Border","name":"Border"},"doc":" `PreSet` is an `enum` identifying a finite set of strings defining the most\n commonly used table layout templates (see `PREDEFINED_BORDERS`).","summary":"<p><code><a href=\"../../Tablo/Border/PreSet.html\">PreSet</a></code> is an <code>enum</code> identifying a finite set of strings defining the most  commonly used table layout templates (see <code><a href=\"../../Tablo/Border.html#PREDEFINED_BORDERS\">PREDEFINED_BORDERS</a></code>).</p>","instance_methods":[{"html_id":"ascii?-instance-method","name":"ascii?","abstract":false,"location":{"filename":"src/border.cr","line_number":108,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L108"},"def":{"name":"ascii?","visibility":"Public","body":"self == Ascii"}},{"html_id":"blank?-instance-method","name":"blank?","abstract":false,"location":{"filename":"src/border.cr","line_number":115,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L115"},"def":{"name":"blank?","visibility":"Public","body":"self == Blank"}},{"html_id":"empty?-instance-method","name":"empty?","abstract":false,"location":{"filename":"src/border.cr","line_number":114,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L114"},"def":{"name":"empty?","visibility":"Public","body":"self == Empty"}},{"html_id":"fancy?-instance-method","name":"fancy?","abstract":false,"location":{"filename":"src/border.cr","line_number":113,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L113"},"def":{"name":"fancy?","visibility":"Public","body":"self == Fancy"}},{"html_id":"markdown?-instance-method","name":"markdown?","abstract":false,"location":{"filename":"src/border.cr","line_number":111,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L111"},"def":{"name":"markdown?","visibility":"Public","body":"self == Markdown"}},{"html_id":"modern?-instance-method","name":"modern?","abstract":false,"location":{"filename":"src/border.cr","line_number":112,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L112"},"def":{"name":"modern?","visibility":"Public","body":"self == Modern"}},{"html_id":"reduced_ascii?-instance-method","name":"reduced_ascii?","abstract":false,"location":{"filename":"src/border.cr","line_number":109,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L109"},"def":{"name":"reduced_ascii?","visibility":"Public","body":"self == ReducedAscii"}},{"html_id":"reduced_modern?-instance-method","name":"reduced_modern?","abstract":false,"location":{"filename":"src/border.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L110"},"def":{"name":"reduced_modern?","visibility":"Public","body":"self == ReducedModern"}}]},{"html_id":"tablo/Tablo/Border/Styler","path":"Tablo/Border/Styler.html","kind":"alias","full_name":"Tablo::Border::Styler","name":"Styler","abstract":false,"locations":[{"filename":"src/border.cr","line_number":133,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/border.cr#L133"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"Proc(String, String)","aliased_html":"String -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Border","kind":"struct","full_name":"Tablo::Border","name":"Border"},"doc":"A border may be styled, either by using ANSI color sequences or using\nthe stdlib colorize module.\n\n `styler` default value is set by `Config.border_styler`\n\nExample, to colorize borders in blue :\n```\nrequire \"tablo\"\nrequire \"colorize\"\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(Tablo::Border::PreSet::Fancy,\n    styler: ->(b : String) { b.colorize(:blue).to_s })) do |t|\n  t.add_column(\"itself\", &.itself)\nend\nputs table\n```","summary":"<p>A border may be styled, either by using ANSI color sequences or using the stdlib colorize module.</p>"}]},{"html_id":"tablo/Tablo/Cell","path":"Tablo/Cell.html","kind":"class","full_name":"Tablo::Cell","name":"Cell","abstract":true,"superclass":{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":15,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L15"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},{"html_id":"tablo/Tablo/Cell/Text","kind":"class","full_name":"Tablo::Cell::Text","name":"Text"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"In Tablo, the Cell class and its subclasses, along with the Table class\nitself, form the core of the library's functionality. <br /> However, methods\nand classes of the Cell type are mainly for internal use, and generally\nhave no public interface.\n\nCell is an abstract class representing a single cell inside a Table.<br />\nDerived concrete cells are : `Cell::Text` and `Cell::Data`\n\nIt is made up of several attributes and methods, including the `value`\nattribute, of type `CellType`, which holds the raw content of each element\nin the data source.","summary":"<p>In Tablo, the Cell class and its subclasses, along with the Table class itself, form the core of the library's functionality.</p>","types":[{"html_id":"tablo/Tablo/Cell/Data","path":"Tablo/Cell/Data.html","kind":"class","full_name":"Tablo::Cell::Data","name":"Data","abstract":false,"superclass":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"ancestors":[{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":411,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L411"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"doc":"The Data class, derived from Cell, is used to manage the source data\nitself (column body), or those that depend on it (column header).","summary":"<p>The Data class, derived from Cell, is used to manage the source data itself (column body), or those that depend on it (column header).</p>","types":[{"html_id":"tablo/Tablo/Cell/Data/Coords","path":"Tablo/Cell/Data/Coords.html","kind":"struct","full_name":"Tablo::Cell::Data::Coords","name":"Coords","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":418,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L418"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},"doc":"The `Coords` `struct` inherits from the `Cell::Data` class and is\nessentially intended to enable conditional formatting or styling.  It\nis managed internally, but its attributes (`body_value`, `row_index`,\n`column_index`), which define the current source data element, are used by\nthe `Cell::Data::Formatter` and `Cell:Data::Styler` procedures, to be\ndefined by the user.","summary":"<p>The <code><a href=\"../../../Tablo/Cell/Data/Coords.html\">Coords</a></code> <code>struct</code> inherits from the <code><a href=\"../../../Tablo/Cell/Data.html\">Cell::Data</a></code> class and is essentially intended to enable conditional formatting or styling.</p>","constructors":[{"html_id":"new(body_value:CellType,row_index:Int32,column_index:Int32)-class-method","name":"new","doc":"Constructor with 3 mandatory parameters.","summary":"<p>Constructor with 3 mandatory parameters.</p>","abstract":false,"args":[{"name":"body_value","external_name":"body_value","restriction":"CellType"},{"name":"row_index","external_name":"row_index","restriction":"Int32"},{"name":"column_index","external_name":"column_index","restriction":"Int32"}],"args_string":"(body_value : CellType, row_index : Int32, column_index : Int32)","args_html":"(body_value : <a href=\"../../../Tablo/CellType.html\">CellType</a>, row_index : Int32, column_index : Int32)","location":{"filename":"src/cell.cr","line_number":429,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L429"},"def":{"name":"new","args":[{"name":"body_value","external_name":"body_value","restriction":"CellType"},{"name":"row_index","external_name":"row_index","restriction":"Int32"},{"name":"column_index","external_name":"column_index","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(body_value, row_index, column_index)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"body_value:Tablo::CellType-instance-method","name":"body_value","doc":"Returns the raw value of the current `Cell::Data`","summary":"<p>Returns the raw value of the current <code><a href=\"../../../Tablo/Cell/Data.html\">Cell::Data</a></code></p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":420,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L420"},"def":{"name":"body_value","visibility":"Public","body":"@body_value"}},{"html_id":"column_index:Int32-instance-method","name":"column_index","doc":"Returns the index of the column (0..n)","summary":"<p>Returns the index of the column (0..n)</p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":426,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L426"},"def":{"name":"column_index","visibility":"Public","body":"@column_index"}},{"html_id":"row_index:Int32-instance-method","name":"row_index","doc":"Returns the index of the row (0..n)","summary":"<p>Returns the index of the row (0..n)</p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":423,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L423"},"def":{"name":"row_index","visibility":"Public","body":"@row_index"}}]},{"html_id":"tablo/Tablo/Cell/Data/Formatter","path":"Tablo/Cell/Data/Formatter.html","kind":"alias","full_name":"Tablo::Cell::Data::Formatter","name":"Formatter","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":522,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L522"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(Tablo::CellType, Int32, String) | Proc(Tablo::CellType, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, Int32, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, String))","aliased_html":"<a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a> -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a>, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a> -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},"doc":"The purpose of the formatter is to transform the raw value of a cell\ninto a formatted character string <br /> (A default formatter (`to_s`) is applied if\nnone is defined by the user).\n\nFor cells of type `Cell::Data`, the Formatter proc can take 4 different\nforms, as shown below by their commonly used parameter names  and types: <br />\n- 1st form : (value : `CellType`, coords : `Cell::Data::Coords`, column_width : `Int32`)\n- 2nd form : (value : `CellType`, coords : `Cell::Data::Coords`)\n- 3rd form : (value : `CellType`, column_width : `Int32`)\n- 4th form : (value : `CellType`)\n\nand the return type is `String` for all of them.\n\nThese different forms can be used for conditional formatting.\n\nFor example, to alternate case after each row, the 2nd form\ncan be used :\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"],\n  body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n    if value.is_a?(String)\n      coords.row_index % 2 == 0 ? value.as(String).upcase : value.as(String).downcase\n    else\n      value.to_s\n    end\n  }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\noutput is:\n```\n+--------------+--------------+--------------+\n| itself       | itself x 2   | itself x 3   |\n+--------------+--------------+--------------+\n| A            | AA           | AAA          |\n| b            | bb           | bbb          |\n| C            | CC           | CCC          |\n+--------------+--------------+--------------+\n```\nThis has an impact on all text columns. To limit formatting to the\nsecond column, for example, you could write:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"],\n  body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n    if value.is_a?(String) && coords.column_index == 1\n      coords.row_index % 2 == 0 ? value.as(String).upcase : value.as(String).downcase\n    else\n      value.to_s\n    end\n  }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\nor, if formatting is done directly at the column level:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\",\n    body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n      if value.is_a?(String)\n        coords.row_index % 2 == 0 ? value.as(String).upcase : value.as(String).downcase\n      else\n        value.to_s\n      end\n    }, &.*(2)\n  )\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\noutput is:\n```\n+--------------+--------------+--------------+\n| itself       | itself x 2   | itself x 3   |\n+--------------+--------------+--------------+\n| A            | AA           | AAA          |\n| B            | bb           | BBB          |\n| C            | CC           | CCC          |\n+--------------+--------------+--------------+\n```","summary":"<p>The purpose of the formatter is to transform the raw value of a cell into a formatted character string <br /> (A default formatter (<code>to_s</code>) is applied if none is defined by the user).</p>"},{"html_id":"tablo/Tablo/Cell/Data/Styler","path":"Tablo/Cell/Data/Styler.html","kind":"alias","full_name":"Tablo::Cell::Data::Styler","name":"Styler","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":570,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L570"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(String, Int32, String) | Proc(String, String) | Proc(Tablo::CellType, String, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, String, Int32, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, String, String))","aliased_html":"String, Int32 -> String | String -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, String -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a>, String, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a>, String -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},"doc":"Styler procs for data cell types.\n\nThere are 5 of them, as shown below by their commonly used parameter names\nand types: <br />\n- 1st form : (value : `CellType`, coords : `Cell::Data::Coords`, content : `String`, line_index : `Int32`)\n- 2nd form : (value : `CellType`, coords : `Cell::Data::Coords`, content : `String`)\n- 3rd form : (value : `CellType`, content : `String`)\n- 4th form : (content : `String`, line_index : `Int32`)\n- 5th form : (content : `String`)\n\n*content* is the formatted value of the cell (after formatter is applied) <br />\nReturn type is String for all of them.\n\nThese different forms can be used for conditional formatting.\n\nIn a somewhat contrived example, we could write:\n```\n  body_styler: ->(_value : Tablo::CellType, coords : Tablo::Cell::Data::Coords, content : String, line_index : Int32) {\nif line_index > 0\n  content.colorize(:magenta).mode(:bold).to_s\nelse\n  if coords.row_index % 2 == 0\n    coords.column_index == 0 ? content.colorize(:red).to_s : content.colorize(:yellow).to_s\n  else\n    content.colorize(:blue).to_s\n  end\nend\n}\n```\nOr, more simply, to better differentiate between negative and positive values:\n```\nbody_styler: ->(value : Tablo::CellType, content : String) {\n  if value.is_a?(Float64)\n    if value.as(Float64) < 0.0\n      content.colorize(:red).to_s\n    else\n      content.colorize(:green).to_s\n    end\n  else\n    content\n  end\n}\n```","summary":"<p>Styler procs for data cell types.</p>"}]},{"html_id":"tablo/Tablo/Cell/Text","path":"Tablo/Cell/Text.html","kind":"class","full_name":"Tablo::Cell::Text","name":"Text","abstract":false,"superclass":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"ancestors":[{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":223,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L223"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"doc":"The Text class, derived from Cell, is used to manage the headings\n(`Heading::Title`, `Heading::SubTitle` and `Heading::Footer`) and group cells","summary":"<p>The Text class, derived from Cell, is used to manage the headings (<code><a href=\"../../Tablo/Heading/Title.html\">Heading::Title</a></code>, <code><a href=\"../../Tablo/Heading/SubTitle.html\">Heading::SubTitle</a></code> and <code><a href=\"../../Tablo/Heading/Footer.html\">Heading::Footer</a></code>) and group cells</p>","instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":360,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L360"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < Reference && (!@type.instance_vars.map(&.type).all? do |t|\n  ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive\nend) %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"}}],"types":[{"html_id":"tablo/Tablo/Cell/Text/Formatter","path":"Tablo/Cell/Text/Formatter.html","kind":"alias","full_name":"Tablo::Cell::Text::Formatter","name":"Formatter","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":293,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L293"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(Tablo::CellType, Int32, String) | Proc(Tablo::CellType, String))","aliased_html":"<a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a> -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Text","kind":"class","full_name":"Tablo::Cell::Text","name":"Text"},"doc":"The purpose of the formatter is to transform the raw value of a cell\ninto a formatted character string <br /> (A default formatter (`to_s`) is applied if\nnone is defined by the user).\n\nFor cells of type `Cell::Text` (headings and group), the formatter Proc can\ntake 2 different forms, as shown below by their commonly used parameter\nnames  and types: <br />\n- 1st form : (value : `Tablo::CellType`, column_width : `Int32`)\n- 2nd form : (value : `Tablo::CellType`)\n\nand the return type is `String` for both.\n\nAny processing can be done on cell value. For example, in a group, if the\nruntime cell value contains a `Time` type, we could format as :\n```\nrequire \"tablo\"\ntimestamp = \"15/1/2024 12:00:00\"\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_group(:g1, header: \"Before\\n\" + timestamp)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\n  t.add_group(:g2, header: timestamp, formatter: ->(value : Tablo::CellType) {\n    parsed = Time.parse(value.as(String), \"%d/%m/%Y %H:%M:%S\", Time::Location.local)\n    \"After\\nDate = \" + parsed.to_s(\"%Y-%m-%d\") + \"\\nTime = \" + parsed.to_s(\"%H:%M:%S\")\n  }, alignment: Tablo::Justify::Left)\nend\nputs table\n ```\nand output would be:\n```\n+--------------+-----------------------------+\n|    Before    | After                       |\n|   15/1/2024  | Date = 2024-01-15           |\n|   12:00:00   | Time = 12:00:00             |\n+--------------+--------------+--------------+\n|       itself |   itself x 2 |   itself x 3 |\n+--------------+--------------+--------------+\n|            1 |            2 |            3 |\n|            2 |            4 |            6 |\n|            3 |            6 |            9 |\n+--------------+--------------+--------------+\n```\nAnother example, to stretch contents of a cell to its maximum width:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading::Title.new(\"My Title\",\n    frame: Tablo::Frame.new, formatter: ->(value : Tablo::CellType, column_width : Int32) {\n    Tablo::Util.stretch(value.as(String), width: column_width)\n  })) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\noutputs is:\n```\n+--------------------------------------------+\n|    M    y         T    i    t    l    e    |\n+--------------+--------------+--------------+\n|       itself |   itself x 2 |   itself x 3 |\n+--------------+--------------+--------------+\n|            1 |            2 |            3 |\n|            2 |            4 |            6 |\n|            3 |            6 |            9 |\n+--------------+--------------+--------------+\n```","summary":"<p>The purpose of the formatter is to transform the raw value of a cell into a formatted character string <br /> (A default formatter (<code>to_s</code>) is applied if none is defined by the user).</p>"},{"html_id":"tablo/Tablo/Cell/Text/Styler","path":"Tablo/Cell/Text/Styler.html","kind":"alias","full_name":"Tablo::Cell::Text::Styler","name":"Styler","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":356,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/cell.cr#L356"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(String, Int32, String) | Proc(String, String))","aliased_html":"String, Int32 -> String | String -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Text","kind":"class","full_name":"Tablo::Cell::Text","name":"Text"},"doc":"The purpose of the styler is to apply stylistic effects to\na previously formatted character string. For a terminal without\ngraphic capabilities, these effects are limited to the use of color\nand/or character modes (bold, italic, etc.).\n\nFor cells of type Cell::Text (headings and group), the styler Proc\ncan take 2 different forms, as shown below by their commonly used\nparameter names and types:\n\n- 1st form : (content : `String`, line : `Int32`)\n- 2nd form : (content : `String`)\n\nand the return type is String for both.\n\n`content` is the formatted cell value, after the formatter has been applied.<br />\n`line` designates the line number in a (multi-line) cell (0..n).\n\nThe first form allows easy conditional styling. For example, to colorize\ndifferently each line of multiline cell:\n```\nrequire \"tablo\"\nrequire \"colorize\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading::Title.new(\"My\\nMultiline\\nTitle\",\n    frame: Tablo::Frame.new,\n    styler: ->(content : String, line : Int32) {\n      case line\n      when 0 then content.colorize(:blue).to_s\n      when 1 then content.colorize(:green).to_s\n      else        content.colorize(:red).to_s\n      end\n    })) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\n\nOutput is:\n\n<img src=\"../../../assets/images/api_cell_text_styler_1.svg\" width=\"400\">\n\n or, more simply, to style the whole cell, we use the 2nd form:\n```\nrequire \"tablo\"\nrequire \"colorize\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading::Title.new(\"My\\nMultiline\\nTitle\",\n    frame: Tablo::Frame.new,\n    styler: ->(content : String) { content.colorize.mode(:bold).to_s })) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\nOutput is:\n\n<img src=\"../../../assets/images/api_cell_text_styler_2.svg\" width=\"400\">","summary":"<p>The purpose of the styler is to apply stylistic effects to a previously formatted character string.</p>"}]}]},{"html_id":"tablo/Tablo/CellType","path":"Tablo/CellType.html","kind":"module","full_name":"Tablo::CellType","name":"CellType","abstract":false,"locations":[{"filename":"src/types.cr","line_number":24,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L24"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"`CellType` is an empty module, included in every standard scalar type.\n```\nmodule CellType\nend\n```\n\nThese standard types are:\n- Signed integers : `Int8`, `Int16`, `Int32`, `Int64`, `Int128`\n- Unsigned integers : `UInt8`, `UInt16`, `UInt32`, `UInt64`, `UInt128`\n- Floats : `Float32`, `Float64`\n- Misc : `Char`, `String`, `Bool`, `Nil`, `Symbol`, `Time`\n\n If other data types are to be used in Tablo, then reopen the type and\n include the `CellType` module, as in the case of the `BigDecimal` type:\n```\nstruct BigDecimal\n  include Tablo::CellType\nend\n```\nAfter initialization of a Tablo table, when source data are read for\nprocessing before display, their type is restricted to CellType, which in\nmost cases requires reverse casting when operations involving them are\nperformed.","summary":"<p><code><a href=\"../Tablo/CellType.html\">CellType</a></code> is an empty module, included in every standard scalar type.</p>"},{"html_id":"tablo/Tablo/Column","path":"Tablo/Column.html","kind":"class","full_name":"Tablo::Column(T)","name":"Column","abstract":false,"superclass":{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/column.cr","line_number":7,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/column.cr#L7"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Attributes and methods of this class define the presentation of each column.\nThis class is instantiated internally by the method `Table#add_column`","summary":"<p>Attributes and methods of this class define the presentation of each column.</p>"},{"html_id":"tablo/Tablo/Config","path":"Tablo/Config.html","kind":"module","full_name":"Tablo::Config","name":"Config","abstract":false,"locations":[{"filename":"src/config.cr","line_number":8,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L8"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The `Config` module define global getters and setters, to be used as default values\nfor all class instantiation parameters.","summary":"<p>The <code><a href=\"../Tablo/Config.html\">Config</a></code> module define global getters and setters, to be used as default values for all class instantiation parameters.</p>","class_methods":[{"html_id":"body_alignment:Justify|Nil-class-method","name":"body_alignment","doc":"Returns `.body_alignment`","summary":"<p>Returns <code><a href=\"../Tablo/Config.html#body_alignment%3AJustify%7CNil-class-method\">.body_alignment</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":141,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L141"},"def":{"name":"body_alignment","return_type":"Justify | ::Nil","visibility":"Public","body":"@@body_alignment"}},{"html_id":"body_alignment=(body_alignment:Justify|Nil)-class-method","name":"body_alignment=","doc":"Set default `body_alignment` to `nil` <br />\n(Default `nil` => alignment depends on body cell value datatype)","summary":"<p>Set default <code><a href=\"../Tablo/Config.html#body_alignment%3AJustify%7CNil-class-method\">.body_alignment</a></code> to <code>nil</code> <br /> (Default <code>nil</code> =&gt; alignment depends on body cell value datatype)</p>","abstract":false,"args":[{"name":"body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"}],"args_string":"(body_alignment : Justify | Nil)","args_html":"(body_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil)","location":{"filename":"src/config.cr","line_number":144,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L144"},"def":{"name":"body_alignment=","args":[{"name":"body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"}],"visibility":"Public","body":"@@body_alignment = body_alignment"}},{"html_id":"body_formatter:Cell::Data::Formatter-class-method","name":"body_formatter","abstract":false,"location":{"filename":"src/config.cr","line_number":146,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L146"},"def":{"name":"body_formatter","return_type":"Cell::Data::Formatter","visibility":"Public","body":"@@body_formatter"}},{"html_id":"body_formatter=(body_formatter:Cell::Data::Formatter)-class-method","name":"body_formatter=","abstract":false,"args":[{"name":"body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"}],"args_string":"(body_formatter : Cell::Data::Formatter)","args_html":"(body_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a>)","location":{"filename":"src/config.cr","line_number":147,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L147"},"def":{"name":"body_formatter=","args":[{"name":"body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"}],"visibility":"Public","body":"@@body_formatter = body_formatter"}},{"html_id":"body_styler:Cell::Data::Styler-class-method","name":"body_styler","abstract":false,"location":{"filename":"src/config.cr","line_number":149,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L149"},"def":{"name":"body_styler","return_type":"Cell::Data::Styler","visibility":"Public","body":"@@body_styler"}},{"html_id":"body_styler=(body_styler:Cell::Data::Styler)-class-method","name":"body_styler=","abstract":false,"args":[{"name":"body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"}],"args_string":"(body_styler : Cell::Data::Styler)","args_html":"(body_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a>)","location":{"filename":"src/config.cr","line_number":150,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L150"},"def":{"name":"body_styler=","args":[{"name":"body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"}],"visibility":"Public","body":"@@body_styler = body_styler"}},{"html_id":"body_wrap:Int32|Nil-class-method","name":"body_wrap","abstract":false,"location":{"filename":"src/config.cr","line_number":179,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L179"},"def":{"name":"body_wrap","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@body_wrap"}},{"html_id":"body_wrap=(body_wrap:Int32|Nil)-class-method","name":"body_wrap=","abstract":false,"args":[{"name":"body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"}],"args_string":"(body_wrap : Int32 | Nil)","args_html":"(body_wrap : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":180,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L180"},"def":{"name":"body_wrap=","args":[{"name":"body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@body_wrap = body_wrap"}},{"html_id":"body_wrap_range:Range(Int32,Int32)-class-method","name":"body_wrap_range","doc":"Returns the range of allowable values for `body_wrap`  <br />","summary":"<p>Returns the range of allowable values for <code><a href=\"../Tablo/Config.html#body_wrap%3AInt32%7CNil-class-method\">.body_wrap</a></code>  <br /></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":62,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L62"},"def":{"name":"body_wrap_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@body_wrap_range"}},{"html_id":"body_wrap_range=(body_wrap_range:Range(Int32,Int32))-class-method","name":"body_wrap_range=","doc":"Sets the range of allowable values for `body_wrap`  <br />\n(Default 1..8)","summary":"<p>Sets the range of allowable values for <code><a href=\"../Tablo/Config.html#body_wrap%3AInt32%7CNil-class-method\">.body_wrap</a></code>  <br /> (Default 1..8)</p>","abstract":false,"args":[{"name":"body_wrap_range","external_name":"body_wrap_range","restriction":"Range(Int32, Int32)"}],"args_string":"(body_wrap_range : Range(Int32, Int32))","args_html":"(body_wrap_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":65,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L65"},"def":{"name":"body_wrap_range=","args":[{"name":"body_wrap_range","external_name":"body_wrap_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@body_wrap_range = body_wrap_range"}},{"html_id":"border_definition:String|Border::PreSet-class-method","name":"border_definition","doc":"TODO I'm here! TODO\n","summary":"<p><span class=\"flag orange\">TODO</span>  I'm here! TODO</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":106,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L106"},"def":{"name":"border_definition","return_type":"String | Border::PreSet","visibility":"Public","body":"@@border_definition"}},{"html_id":"border_definition=(border_definition:String|Border::PreSet)-class-method","name":"border_definition=","abstract":false,"args":[{"name":"border_definition","external_name":"border_definition","restriction":"String | Border::PreSet"}],"args_string":"(border_definition : String | Border::PreSet)","args_html":"(border_definition : String | <a href=\"../Tablo/Border/PreSet.html\">Border::PreSet</a>)","location":{"filename":"src/config.cr","line_number":107,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L107"},"def":{"name":"border_definition=","args":[{"name":"border_definition","external_name":"border_definition","restriction":"String | Border::PreSet"}],"visibility":"Public","body":"@@border_definition = border_definition"}},{"html_id":"border_styler:Border::Styler-class-method","name":"border_styler","abstract":false,"location":{"filename":"src/config.cr","line_number":109,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L109"},"def":{"name":"border_styler","return_type":"Border::Styler","visibility":"Public","body":"@@border_styler"}},{"html_id":"border_styler=(border_styler:Border::Styler)-class-method","name":"border_styler=","abstract":false,"args":[{"name":"border_styler","external_name":"border_styler","restriction":"Border::Styler"}],"args_string":"(border_styler : Border::Styler)","args_html":"(border_styler : <a href=\"../Tablo/Border/Styler.html\">Border::Styler</a>)","location":{"filename":"src/config.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L110"},"def":{"name":"border_styler=","args":[{"name":"border_styler","external_name":"border_styler","restriction":"Border::Styler"}],"visibility":"Public","body":"@@border_styler = border_styler"}},{"html_id":"column_width_range:Range(Int32,Int32)-class-method","name":"column_width_range","doc":"Returns the range of allowable values for column `width`  <br />","summary":"<p>Returns the range of allowable values for column <code><a href=\"../Tablo/Config.html#width%3AInt32-class-method\">.width</a></code>  <br /></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":68,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L68"},"def":{"name":"column_width_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@column_width_range"}},{"html_id":"column_width_range=(column_width_range:Range(Int32,Int32))-class-method","name":"column_width_range=","doc":"Sets the range of allowable values for column `width`  <br />\n(Default 1..128)","summary":"<p>Sets the range of allowable values for column <code><a href=\"../Tablo/Config.html#width%3AInt32-class-method\">.width</a></code>  <br /> (Default 1..128)</p>","abstract":false,"args":[{"name":"column_width_range","external_name":"column_width_range","restriction":"Range(Int32, Int32)"}],"args_string":"(column_width_range : Range(Int32, Int32))","args_html":"(column_width_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":71,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L71"},"def":{"name":"column_width_range=","args":[{"name":"column_width_range","external_name":"column_width_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@column_width_range = column_width_range"}},{"html_id":"footer:Heading::Footer-class-method","name":"footer","doc":"Returns the Footer struct","summary":"<p>Returns the Footer struct</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":99,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L99"},"def":{"name":"footer","return_type":"Heading::Footer","visibility":"Public","body":"@@footer"}},{"html_id":"footer=(footer:Heading::Footer)-class-method","name":"footer=","doc":"Creates an instance of Footer struct with default parameters  <br />\n(Default struct Footer has a nil value, so nothing to display)","summary":"<p>Creates an instance of Footer struct with default parameters  <br /> (Default struct Footer has a nil value, so nothing to display)</p>","abstract":false,"args":[{"name":"footer","external_name":"footer","restriction":"Heading::Footer"}],"args_string":"(footer : Heading::Footer)","args_html":"(footer : <a href=\"../Tablo/Heading/Footer.html\">Heading::Footer</a>)","location":{"filename":"src/config.cr","line_number":102,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L102"},"def":{"name":"footer=","args":[{"name":"footer","external_name":"footer","restriction":"Heading::Footer"}],"visibility":"Public","body":"@@footer = footer"}},{"html_id":"group_alignment:Justify-class-method","name":"group_alignment","abstract":false,"location":{"filename":"src/config.cr","line_number":121,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L121"},"def":{"name":"group_alignment","return_type":"Justify","visibility":"Public","body":"@@group_alignment"}},{"html_id":"group_alignment=(group_alignment:Justify)-class-method","name":"group_alignment=","abstract":false,"args":[{"name":"group_alignment","external_name":"group_alignment","restriction":"Justify"}],"args_string":"(group_alignment : Justify)","args_html":"(group_alignment : <a href=\"../Tablo/Justify.html\">Justify</a>)","location":{"filename":"src/config.cr","line_number":122,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L122"},"def":{"name":"group_alignment=","args":[{"name":"group_alignment","external_name":"group_alignment","restriction":"Justify"}],"visibility":"Public","body":"@@group_alignment = group_alignment"}},{"html_id":"group_formatter:Cell::Text::Formatter-class-method","name":"group_formatter","abstract":false,"location":{"filename":"src/config.cr","line_number":124,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L124"},"def":{"name":"group_formatter","return_type":"Cell::Text::Formatter","visibility":"Public","body":"@@group_formatter"}},{"html_id":"group_formatter=(group_formatter:Cell::Text::Formatter)-class-method","name":"group_formatter=","abstract":false,"args":[{"name":"group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"}],"args_string":"(group_formatter : Cell::Text::Formatter)","args_html":"(group_formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a>)","location":{"filename":"src/config.cr","line_number":125,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L125"},"def":{"name":"group_formatter=","args":[{"name":"group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"}],"visibility":"Public","body":"@@group_formatter = group_formatter"}},{"html_id":"group_styler:Cell::Text::Styler-class-method","name":"group_styler","abstract":false,"location":{"filename":"src/config.cr","line_number":127,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L127"},"def":{"name":"group_styler","return_type":"Cell::Text::Styler","visibility":"Public","body":"@@group_styler"}},{"html_id":"group_styler=(group_styler:Cell::Text::Styler)-class-method","name":"group_styler=","abstract":false,"args":[{"name":"group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"}],"args_string":"(group_styler : Cell::Text::Styler)","args_html":"(group_styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a>)","location":{"filename":"src/config.cr","line_number":128,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L128"},"def":{"name":"group_styler=","args":[{"name":"group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"}],"visibility":"Public","body":"@@group_styler = group_styler"}},{"html_id":"header_alignment:Justify|Nil-class-method","name":"header_alignment","doc":"","summary":"","abstract":false,"location":{"filename":"src/config.cr","line_number":131,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L131"},"def":{"name":"header_alignment","return_type":"Justify | ::Nil","visibility":"Public","body":"@@header_alignment"}},{"html_id":"header_alignment=(header_alignment:Justify|Nil)-class-method","name":"header_alignment=","abstract":false,"args":[{"name":"header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"}],"args_string":"(header_alignment : Justify | Nil)","args_html":"(header_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil)","location":{"filename":"src/config.cr","line_number":132,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L132"},"def":{"name":"header_alignment=","args":[{"name":"header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"}],"visibility":"Public","body":"@@header_alignment = header_alignment"}},{"html_id":"header_formatter:Cell::Data::Formatter-class-method","name":"header_formatter","abstract":false,"location":{"filename":"src/config.cr","line_number":134,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L134"},"def":{"name":"header_formatter","return_type":"Cell::Data::Formatter","visibility":"Public","body":"@@header_formatter"}},{"html_id":"header_formatter=(header_formatter:Cell::Data::Formatter)-class-method","name":"header_formatter=","abstract":false,"args":[{"name":"header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"}],"args_string":"(header_formatter : Cell::Data::Formatter)","args_html":"(header_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a>)","location":{"filename":"src/config.cr","line_number":135,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L135"},"def":{"name":"header_formatter=","args":[{"name":"header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"}],"visibility":"Public","body":"@@header_formatter = header_formatter"}},{"html_id":"header_frequency:Int32|Nil-class-method","name":"header_frequency","doc":"","summary":"","abstract":false,"location":{"filename":"src/config.cr","line_number":167,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L167"},"def":{"name":"header_frequency","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@header_frequency"}},{"html_id":"header_frequency=(header_frequency:Int32|Nil)-class-method","name":"header_frequency=","abstract":false,"args":[{"name":"header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"}],"args_string":"(header_frequency : Int32 | Nil)","args_html":"(header_frequency : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":168,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L168"},"def":{"name":"header_frequency=","args":[{"name":"header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@header_frequency = header_frequency"}},{"html_id":"header_frequency_range:Range(Int32,Int32)-class-method","name":"header_frequency_range","doc":"Returns the range of allowable values for Table `header_frequency` <br />","summary":"<p>Returns the range of allowable values for Table <code><a href=\"../Tablo/Config.html#header_frequency%3AInt32%7CNil-class-method\">.header_frequency</a></code> <br /></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":44,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L44"},"def":{"name":"header_frequency_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@header_frequency_range"}},{"html_id":"header_frequency_range=(header_frequency_range:Range(Int32,Int32))-class-method","name":"header_frequency_range=","doc":"Sets the range of allowable values for Table `header_frequency` <br />\n(Default 0..64)","summary":"<p>Sets the range of allowable values for Table <code><a href=\"../Tablo/Config.html#header_frequency%3AInt32%7CNil-class-method\">.header_frequency</a></code> <br /> (Default 0..64)</p>","abstract":false,"args":[{"name":"header_frequency_range","external_name":"header_frequency_range","restriction":"Range(Int32, Int32)"}],"args_string":"(header_frequency_range : Range(Int32, Int32))","args_html":"(header_frequency_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":47,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L47"},"def":{"name":"header_frequency_range=","args":[{"name":"header_frequency_range","external_name":"header_frequency_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@header_frequency_range = header_frequency_range"}},{"html_id":"header_styler:Cell::Data::Styler-class-method","name":"header_styler","abstract":false,"location":{"filename":"src/config.cr","line_number":137,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L137"},"def":{"name":"header_styler","return_type":"Cell::Data::Styler","visibility":"Public","body":"@@header_styler"}},{"html_id":"header_styler=(header_styler:Cell::Data::Styler)-class-method","name":"header_styler=","abstract":false,"args":[{"name":"header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"}],"args_string":"(header_styler : Cell::Data::Styler)","args_html":"(header_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a>)","location":{"filename":"src/config.cr","line_number":138,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L138"},"def":{"name":"header_styler=","args":[{"name":"header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"}],"visibility":"Public","body":"@@header_styler = header_styler"}},{"html_id":"header_wrap:Int32|Nil-class-method","name":"header_wrap","abstract":false,"location":{"filename":"src/config.cr","line_number":176,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L176"},"def":{"name":"header_wrap","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@header_wrap"}},{"html_id":"header_wrap=(header_wrap:Int32|Nil)-class-method","name":"header_wrap=","abstract":false,"args":[{"name":"header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"}],"args_string":"(header_wrap : Int32 | Nil)","args_html":"(header_wrap : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":177,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L177"},"def":{"name":"header_wrap=","args":[{"name":"header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@header_wrap = header_wrap"}},{"html_id":"header_wrap_range:Range(Int32,Int32)-class-method","name":"header_wrap_range","doc":"Returns the range of allowable values for `header_wrap`  <br />","summary":"<p>Returns the range of allowable values for <code><a href=\"../Tablo/Config.html#header_wrap%3AInt32%7CNil-class-method\">.header_wrap</a></code>  <br /></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":56,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L56"},"def":{"name":"header_wrap_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@header_wrap_range"}},{"html_id":"header_wrap_range=(header_wrap_range:Range(Int32,Int32))-class-method","name":"header_wrap_range=","doc":"Sets the range of allowable values for `header_wrap`  <br />\n(Default 1..8)","summary":"<p>Sets the range of allowable values for <code><a href=\"../Tablo/Config.html#header_wrap%3AInt32%7CNil-class-method\">.header_wrap</a></code>  <br /> (Default 1..8)</p>","abstract":false,"args":[{"name":"header_wrap_range","external_name":"header_wrap_range","restriction":"Range(Int32, Int32)"}],"args_string":"(header_wrap_range : Range(Int32, Int32))","args_html":"(header_wrap_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":59,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L59"},"def":{"name":"header_wrap_range=","args":[{"name":"header_wrap_range","external_name":"header_wrap_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@header_wrap_range = header_wrap_range"}},{"html_id":"heading_alignment:Justify-class-method","name":"heading_alignment","abstract":false,"location":{"filename":"src/config.cr","line_number":112,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L112"},"def":{"name":"heading_alignment","return_type":"Justify","visibility":"Public","body":"@@heading_alignment"}},{"html_id":"heading_alignment=(heading_alignment:Justify)-class-method","name":"heading_alignment=","abstract":false,"args":[{"name":"heading_alignment","external_name":"heading_alignment","restriction":"Justify"}],"args_string":"(heading_alignment : Justify)","args_html":"(heading_alignment : <a href=\"../Tablo/Justify.html\">Justify</a>)","location":{"filename":"src/config.cr","line_number":113,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L113"},"def":{"name":"heading_alignment=","args":[{"name":"heading_alignment","external_name":"heading_alignment","restriction":"Justify"}],"visibility":"Public","body":"@@heading_alignment = heading_alignment"}},{"html_id":"heading_formatter:Cell::Text::Formatter-class-method","name":"heading_formatter","abstract":false,"location":{"filename":"src/config.cr","line_number":115,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L115"},"def":{"name":"heading_formatter","return_type":"Cell::Text::Formatter","visibility":"Public","body":"@@heading_formatter"}},{"html_id":"heading_formatter=(heading_formatter:Cell::Text::Formatter)-class-method","name":"heading_formatter=","abstract":false,"args":[{"name":"heading_formatter","external_name":"heading_formatter","restriction":"Cell::Text::Formatter"}],"args_string":"(heading_formatter : Cell::Text::Formatter)","args_html":"(heading_formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a>)","location":{"filename":"src/config.cr","line_number":116,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L116"},"def":{"name":"heading_formatter=","args":[{"name":"heading_formatter","external_name":"heading_formatter","restriction":"Cell::Text::Formatter"}],"visibility":"Public","body":"@@heading_formatter = heading_formatter"}},{"html_id":"heading_styler:Cell::Text::Styler-class-method","name":"heading_styler","abstract":false,"location":{"filename":"src/config.cr","line_number":118,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L118"},"def":{"name":"heading_styler","return_type":"Cell::Text::Styler","visibility":"Public","body":"@@heading_styler"}},{"html_id":"heading_styler=(heading_styler:Cell::Text::Styler)-class-method","name":"heading_styler=","abstract":false,"args":[{"name":"heading_styler","external_name":"heading_styler","restriction":"Cell::Text::Styler"}],"args_string":"(heading_styler : Cell::Text::Styler)","args_html":"(heading_styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a>)","location":{"filename":"src/config.cr","line_number":119,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L119"},"def":{"name":"heading_styler=","args":[{"name":"heading_styler","external_name":"heading_styler","restriction":"Cell::Text::Styler"}],"visibility":"Public","body":"@@heading_styler = heading_styler"}},{"html_id":"left_padding:Int32-class-method","name":"left_padding","doc":"","summary":"","abstract":false,"location":{"filename":"src/config.cr","line_number":152,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L152"},"def":{"name":"left_padding","return_type":"Int32","visibility":"Public","body":"@@left_padding"}},{"html_id":"left_padding=(left_padding:Int32)-class-method","name":"left_padding=","abstract":false,"args":[{"name":"left_padding","external_name":"left_padding","restriction":"Int32"}],"args_string":"(left_padding : Int32)","args_html":"(left_padding : Int32)","location":{"filename":"src/config.cr","line_number":153,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L153"},"def":{"name":"left_padding=","args":[{"name":"left_padding","external_name":"left_padding","restriction":"Int32"}],"visibility":"Public","body":"@@left_padding = left_padding"}},{"html_id":"line_breaks_range:Range(Int32,Int32)-class-method","name":"line_breaks_range","doc":"Returns the range of allowable values for `line_breaks_before` and\n`line_breaks_after` attributes in `Heading::Frame` struct <br />","summary":"<p>Returns the range of allowable values for <code>line_breaks_before</code> and <code>line_breaks_after</code> attributes in <code>Heading::Frame</code> struct <br /></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":75,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L75"},"def":{"name":"line_breaks_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@line_breaks_range"}},{"html_id":"line_breaks_range=(line_breaks_range:Range(Int32,Int32))-class-method","name":"line_breaks_range=","doc":"Sets the range of allowable values for `line_breaks_before` and\n`line_breaks_after`  <br />\nDefault 0..8)","summary":"<p>Sets the range of allowable values for <code>line_breaks_before</code> and <code>line_breaks_after</code>  <br /> Default 0..8)</p>","abstract":false,"args":[{"name":"line_breaks_range","external_name":"line_breaks_range","restriction":"Range(Int32, Int32)"}],"args_string":"(line_breaks_range : Range(Int32, Int32))","args_html":"(line_breaks_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":79,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L79"},"def":{"name":"line_breaks_range=","args":[{"name":"line_breaks_range","external_name":"line_breaks_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@line_breaks_range = line_breaks_range"}},{"html_id":"masked_headers=(masked_headers:Bool)-class-method","name":"masked_headers=","abstract":false,"args":[{"name":"masked_headers","external_name":"masked_headers","restriction":"Bool"}],"args_string":"(masked_headers : Bool)","args_html":"(masked_headers : Bool)","location":{"filename":"src/config.cr","line_number":183,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L183"},"def":{"name":"masked_headers=","args":[{"name":"masked_headers","external_name":"masked_headers","restriction":"Bool"}],"visibility":"Public","body":"@@masked_headers = masked_headers"}},{"html_id":"masked_headers?:Bool-class-method","name":"masked_headers?","abstract":false,"location":{"filename":"src/config.cr","line_number":182,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L182"},"def":{"name":"masked_headers?","return_type":"Bool","visibility":"Public","body":"@@masked_headers"}},{"html_id":"omit_group_header_rule=(omit_group_header_rule:Bool)-class-method","name":"omit_group_header_rule=","abstract":false,"args":[{"name":"omit_group_header_rule","external_name":"omit_group_header_rule","restriction":"Bool"}],"args_string":"(omit_group_header_rule : Bool)","args_html":"(omit_group_header_rule : Bool)","location":{"filename":"src/config.cr","line_number":186,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L186"},"def":{"name":"omit_group_header_rule=","args":[{"name":"omit_group_header_rule","external_name":"omit_group_header_rule","restriction":"Bool"}],"visibility":"Public","body":"@@omit_group_header_rule = omit_group_header_rule"}},{"html_id":"omit_group_header_rule?:Bool-class-method","name":"omit_group_header_rule?","abstract":false,"location":{"filename":"src/config.cr","line_number":185,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L185"},"def":{"name":"omit_group_header_rule?","return_type":"Bool","visibility":"Public","body":"@@omit_group_header_rule"}},{"html_id":"omit_last_rule=(omit_last_rule:Bool)-class-method","name":"omit_last_rule=","abstract":false,"args":[{"name":"omit_last_rule","external_name":"omit_last_rule","restriction":"Bool"}],"args_string":"(omit_last_rule : Bool)","args_html":"(omit_last_rule : Bool)","location":{"filename":"src/config.cr","line_number":189,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L189"},"def":{"name":"omit_last_rule=","args":[{"name":"omit_last_rule","external_name":"omit_last_rule","restriction":"Bool"}],"visibility":"Public","body":"@@omit_last_rule = omit_last_rule"}},{"html_id":"omit_last_rule?:Bool-class-method","name":"omit_last_rule?","abstract":false,"location":{"filename":"src/config.cr","line_number":188,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L188"},"def":{"name":"omit_last_rule?","return_type":"Bool","visibility":"Public","body":"@@omit_last_rule"}},{"html_id":"padding_character:String-class-method","name":"padding_character","abstract":false,"location":{"filename":"src/config.cr","line_number":158,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L158"},"def":{"name":"padding_character","return_type":"String","visibility":"Public","body":"@@padding_character"}},{"html_id":"padding_character=(padding_character:String)-class-method","name":"padding_character=","abstract":false,"args":[{"name":"padding_character","external_name":"padding_character","restriction":"String"}],"args_string":"(padding_character : String)","args_html":"(padding_character : String)","location":{"filename":"src/config.cr","line_number":159,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L159"},"def":{"name":"padding_character=","args":[{"name":"padding_character","external_name":"padding_character","restriction":"String"}],"visibility":"Public","body":"@@padding_character = padding_character"}},{"html_id":"padding_width_range:Range(Int32,Int32)-class-method","name":"padding_width_range","doc":"Returns the range of allowable values for `left_padding` and\n`right_padding` width <br />\nCheck is done by the `check_padding` private method, when\ninitializing Table or Column.","summary":"<p>Returns the range of allowable values for <code><a href=\"../Tablo/Config.html#left_padding%3AInt32-class-method\">.left_padding</a></code> and <code><a href=\"../Tablo/Config.html#right_padding%3AInt32-class-method\">.right_padding</a></code> width <br /> Check is done by the <code>check_padding</code> private method, when initializing Table or Column.</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":38,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L38"},"def":{"name":"padding_width_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@padding_width_range"}},{"html_id":"padding_width_range=(padding_width_range:Range(Int32,Int32))-class-method","name":"padding_width_range=","doc":"Sets the range of allowable values for padding width. <br />\n(Default 0..8)","summary":"<p>Sets the range of allowable values for padding width.</p>","abstract":false,"args":[{"name":"padding_width_range","external_name":"padding_width_range","restriction":"Range(Int32, Int32)"}],"args_string":"(padding_width_range : Range(Int32, Int32))","args_html":"(padding_width_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":41,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L41"},"def":{"name":"padding_width_range=","args":[{"name":"padding_width_range","external_name":"padding_width_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@padding_width_range = padding_width_range"}},{"html_id":"right_padding:Int32-class-method","name":"right_padding","abstract":false,"location":{"filename":"src/config.cr","line_number":155,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L155"},"def":{"name":"right_padding","return_type":"Int32","visibility":"Public","body":"@@right_padding"}},{"html_id":"right_padding=(right_padding:Int32)-class-method","name":"right_padding=","abstract":false,"args":[{"name":"right_padding","external_name":"right_padding","restriction":"Int32"}],"args_string":"(right_padding : Int32)","args_html":"(right_padding : Int32)","location":{"filename":"src/config.cr","line_number":156,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L156"},"def":{"name":"right_padding=","args":[{"name":"right_padding","external_name":"right_padding","restriction":"Int32"}],"visibility":"Public","body":"@@right_padding = right_padding"}},{"html_id":"row_divider_frequency:Int32|Nil-class-method","name":"row_divider_frequency","abstract":false,"location":{"filename":"src/config.cr","line_number":170,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L170"},"def":{"name":"row_divider_frequency","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@row_divider_frequency"}},{"html_id":"row_divider_frequency=(row_divider_frequency:Int32|Nil)-class-method","name":"row_divider_frequency=","abstract":false,"args":[{"name":"row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"}],"args_string":"(row_divider_frequency : Int32 | Nil)","args_html":"(row_divider_frequency : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":171,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L171"},"def":{"name":"row_divider_frequency=","args":[{"name":"row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@row_divider_frequency = row_divider_frequency"}},{"html_id":"row_divider_frequency_range:Range(Int32,Int32)-class-method","name":"row_divider_frequency_range","doc":"Returns the range of allowable values for `row_divider_frequency`  <br />","summary":"<p>Returns the range of allowable values for <code><a href=\"../Tablo/Config.html#row_divider_frequency%3AInt32%7CNil-class-method\">.row_divider_frequency</a></code>  <br /></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":50,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L50"},"def":{"name":"row_divider_frequency_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@row_divider_frequency_range"}},{"html_id":"row_divider_frequency_range=(row_divider_frequency_range:Range(Int32,Int32))-class-method","name":"row_divider_frequency_range=","doc":"Sets the range of allowable values for `row_divider_frequency`  <br />\n(Default 1..8)","summary":"<p>Sets the range of allowable values for <code><a href=\"../Tablo/Config.html#row_divider_frequency%3AInt32%7CNil-class-method\">.row_divider_frequency</a></code>  <br /> (Default 1..8)</p>","abstract":false,"args":[{"name":"row_divider_frequency_range","external_name":"row_divider_frequency_range","restriction":"Range(Int32, Int32)"}],"args_string":"(row_divider_frequency_range : Range(Int32, Int32))","args_html":"(row_divider_frequency_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":53,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L53"},"def":{"name":"row_divider_frequency_range=","args":[{"name":"row_divider_frequency_range","external_name":"row_divider_frequency_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@row_divider_frequency_range = row_divider_frequency_range"}},{"html_id":"styler_tty_only=(styler_tty_only:Bool)-class-method","name":"styler_tty_only=","doc":"Allows styling (`false`) or not (`true`) when output is redirected.","summary":"<p>Allows styling (<code>false</code>) or not (<code>true</code>) when output is redirected.</p>","abstract":false,"args":[{"name":"styler_tty_only","external_name":"styler_tty_only","restriction":"Bool"}],"args_string":"(styler_tty_only : Bool)","args_html":"(styler_tty_only : Bool)","location":{"filename":"src/config.cr","line_number":16,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L16"},"def":{"name":"styler_tty_only=","args":[{"name":"styler_tty_only","external_name":"styler_tty_only","restriction":"Bool"}],"visibility":"Public","body":"@@styler_tty_only = styler_tty_only"}},{"html_id":"styler_tty_only?:Bool-class-method","name":"styler_tty_only?","doc":"Tests whether styling is allowed when output is redirected.\n\n- `true` : styling not allowed\n- `false` : styling allowed <br />\n(Default `true`)","summary":"<p>Tests whether styling is allowed when output is redirected.</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":14,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L14"},"def":{"name":"styler_tty_only?","return_type":"Bool","visibility":"Public","body":"@@styler_tty_only"}},{"html_id":"subtitle:Heading::SubTitle-class-method","name":"subtitle","doc":"Returns the SubTitle struct","summary":"<p>Returns the SubTitle struct</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":93,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L93"},"def":{"name":"subtitle","return_type":"Heading::SubTitle","visibility":"Public","body":"@@subtitle"}},{"html_id":"subtitle=(subtitle:Heading::SubTitle)-class-method","name":"subtitle=","doc":"Creates an instance of SubTitle struct with default parameters  <br />\n(Default struct SubTitle has a nil value, so nothing to display)","summary":"<p>Creates an instance of SubTitle struct with default parameters  <br /> (Default struct SubTitle has a nil value, so nothing to display)</p>","abstract":false,"args":[{"name":"subtitle","external_name":"subtitle","restriction":"Heading::SubTitle"}],"args_string":"(subtitle : Heading::SubTitle)","args_html":"(subtitle : <a href=\"../Tablo/Heading/SubTitle.html\">Heading::SubTitle</a>)","location":{"filename":"src/config.cr","line_number":96,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L96"},"def":{"name":"subtitle=","args":[{"name":"subtitle","external_name":"subtitle","restriction":"Heading::SubTitle"}],"visibility":"Public","body":"@@subtitle = subtitle"}},{"html_id":"terminal_capped_width=(terminal_capped_width:Bool)-class-method","name":"terminal_capped_width=","doc":"Sets the value of `terminal_capped_width` to control table width\n(`true`) or not (`false`) when packing if called without a specified width","summary":"<p>Sets the value of <code>terminal_capped_width</code> to control table width (<code>true</code>) or not (<code>false</code>) when packing if called without a specified width</p>","abstract":false,"args":[{"name":"terminal_capped_width","external_name":"terminal_capped_width","restriction":"Bool"}],"args_string":"(terminal_capped_width : Bool)","args_html":"(terminal_capped_width : Bool)","location":{"filename":"src/config.cr","line_number":27,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L27"},"def":{"name":"terminal_capped_width=","args":[{"name":"terminal_capped_width","external_name":"terminal_capped_width","restriction":"Bool"}],"visibility":"Public","body":"@@terminal_capped_width = terminal_capped_width"}},{"html_id":"terminal_capped_width?:Bool-class-method","name":"terminal_capped_width?","doc":"Tests whether terminal size is used as table total width when packing is\ncalled without a specified width.\n\n- `true` : table width is capped to terminal size\n- `false` : terminal size is ignored <br />\n(Default `false`)","summary":"<p>Tests whether terminal size is used as table total width when packing is called without a specified width.</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":24,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L24"},"def":{"name":"terminal_capped_width?","return_type":"Bool","visibility":"Public","body":"@@terminal_capped_width"}},{"html_id":"title:Heading::Title-class-method","name":"title","doc":"Returns the Title struct","summary":"<p>Returns the Title struct</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":87,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L87"},"def":{"name":"title","return_type":"Heading::Title","visibility":"Public","body":"@@title"}},{"html_id":"title=(title:Heading::Title)-class-method","name":"title=","doc":"Creates an instance of Title struct with default parameters  <br />\n(Default struct Title has a nil value, so nothing to display)","summary":"<p>Creates an instance of Title struct with default parameters  <br /> (Default struct Title has a nil value, so nothing to display)</p>","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"Heading::Title"}],"args_string":"(title : Heading::Title)","args_html":"(title : <a href=\"../Tablo/Heading/Title.html\">Heading::Title</a>)","location":{"filename":"src/config.cr","line_number":90,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L90"},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"Heading::Title"}],"visibility":"Public","body":"@@title = title"}},{"html_id":"truncation_indicator:String-class-method","name":"truncation_indicator","abstract":false,"location":{"filename":"src/config.cr","line_number":161,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L161"},"def":{"name":"truncation_indicator","return_type":"String","visibility":"Public","body":"@@truncation_indicator"}},{"html_id":"truncation_indicator=(truncation_indicator:String)-class-method","name":"truncation_indicator=","abstract":false,"args":[{"name":"truncation_indicator","external_name":"truncation_indicator","restriction":"String"}],"args_string":"(truncation_indicator : String)","args_html":"(truncation_indicator : String)","location":{"filename":"src/config.cr","line_number":162,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L162"},"def":{"name":"truncation_indicator=","args":[{"name":"truncation_indicator","external_name":"truncation_indicator","restriction":"String"}],"visibility":"Public","body":"@@truncation_indicator = truncation_indicator"}},{"html_id":"width:Int32-class-method","name":"width","abstract":false,"location":{"filename":"src/config.cr","line_number":164,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L164"},"def":{"name":"width","return_type":"Int32","visibility":"Public","body":"@@width"}},{"html_id":"width=(width:Int32)-class-method","name":"width=","abstract":false,"args":[{"name":"width","external_name":"width","restriction":"Int32"}],"args_string":"(width : Int32)","args_html":"(width : Int32)","location":{"filename":"src/config.cr","line_number":165,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L165"},"def":{"name":"width=","args":[{"name":"width","external_name":"width","restriction":"Int32"}],"visibility":"Public","body":"@@width = width"}},{"html_id":"wrap_mode:WrapMode-class-method","name":"wrap_mode","abstract":false,"location":{"filename":"src/config.cr","line_number":173,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L173"},"def":{"name":"wrap_mode","return_type":"WrapMode","visibility":"Public","body":"@@wrap_mode"}},{"html_id":"wrap_mode=(wrap_mode:WrapMode)-class-method","name":"wrap_mode=","abstract":false,"args":[{"name":"wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"}],"args_string":"(wrap_mode : WrapMode)","args_html":"(wrap_mode : <a href=\"../Tablo/WrapMode.html\">WrapMode</a>)","location":{"filename":"src/config.cr","line_number":174,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/config.cr#L174"},"def":{"name":"wrap_mode=","args":[{"name":"wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"}],"visibility":"Public","body":"@@wrap_mode = wrap_mode"}}]},{"html_id":"tablo/Tablo/Error","path":"Tablo/Error.html","kind":"class","full_name":"Tablo::Error","name":"Error","abstract":false,"superclass":{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":142,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L142"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"tablo/Tablo/Error/DuplicateLabel","kind":"class","full_name":"Tablo::Error::DuplicateLabel","name":"DuplicateLabel"},{"html_id":"tablo/Tablo/Error/GroupEmpty","kind":"class","full_name":"Tablo::Error::GroupEmpty","name":"GroupEmpty"},{"html_id":"tablo/Tablo/Error/InvalidBorderDefinition","kind":"class","full_name":"Tablo::Error::InvalidBorderDefinition","name":"InvalidBorderDefinition"},{"html_id":"tablo/Tablo/Error/InvalidColumnIndex","kind":"class","full_name":"Tablo::Error::InvalidColumnIndex","name":"InvalidColumnIndex"},{"html_id":"tablo/Tablo/Error/InvalidValue","kind":"class","full_name":"Tablo::Error::InvalidValue","name":"InvalidValue"},{"html_id":"tablo/Tablo/Error/LabelNotFound","kind":"class","full_name":"Tablo::Error::LabelNotFound","name":"LabelNotFound"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The class Error contains all the error cases specific to the Tablo library\n\nIts subclasses return the precise type of error","summary":"<p>The class Error contains all the error cases specific to the Tablo library</p>","types":[{"html_id":"tablo/Tablo/Error/DuplicateLabel","path":"Tablo/Error/DuplicateLabel.html","kind":"class","full_name":"Tablo::Error::DuplicateLabel","name":"DuplicateLabel","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":145,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L145"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the column (or group) identifier (LabelType)\nis used more than once in a given situation","summary":"<p>This exception is raised when the column (or group) identifier (LabelType) is used more than once in a given situation</p>"},{"html_id":"tablo/Tablo/Error/GroupEmpty","path":"Tablo/Error/GroupEmpty.html","kind":"class","full_name":"Tablo::Error::GroupEmpty","name":"GroupEmpty","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":158,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L158"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when there is no column to group","summary":"<p>This exception is raised when there is no column to group</p>"},{"html_id":"tablo/Tablo/Error/InvalidBorderDefinition","path":"Tablo/Error/InvalidBorderDefinition.html","kind":"class","full_name":"Tablo::Error::InvalidBorderDefinition","name":"InvalidBorderDefinition","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":163,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L163"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the border definition string is invalid,\nie when its size is not exactly 16.","summary":"<p>This exception is raised when the border definition string is invalid, ie when its size is not exactly 16.</p>"},{"html_id":"tablo/Tablo/Error/InvalidColumnIndex","path":"Tablo/Error/InvalidColumnIndex.html","kind":"class","full_name":"Tablo::Error::InvalidColumnIndex","name":"InvalidColumnIndex","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":154,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L154"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the column index is out of bounds","summary":"<p>This exception is raised when the column index is out of bounds</p>"},{"html_id":"tablo/Tablo/Error/InvalidValue","path":"Tablo/Error/InvalidValue.html","kind":"class","full_name":"Tablo::Error::InvalidValue","name":"InvalidValue","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":168,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L168"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the given value is not expected\n(This is a generic error, covering various cases)","summary":"<p>This exception is raised when the given value is not expected (This is a generic error, covering various cases)</p>"},{"html_id":"tablo/Tablo/Error/LabelNotFound","path":"Tablo/Error/LabelNotFound.html","kind":"class","full_name":"Tablo::Error::LabelNotFound","name":"LabelNotFound","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":150,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L150"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the column (or group) identifier (LabelType)\ndoes not exist","summary":"<p>This exception is raised when the column (or group) identifier (LabelType) does not exist</p>"}]},{"html_id":"tablo/Tablo/Frame","path":"Tablo/Frame.html","kind":"struct","full_name":"Tablo::Frame","name":"Frame","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/heading.cr","line_number":6,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L6"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"struct Frame creates a frame around titles, subtitles or footers, with\noptional line breaks before and after","summary":"<p>struct Frame creates a frame around titles, subtitles or footers, with optional line breaks before and after</p>","constructors":[{"html_id":"new(line_breaks_before:Int32=0,line_breaks_after:Int32=0)-class-method","name":"new","doc":"Returns a Frame instance\n\nThe Frame struct must be used within a Heading instantiation (see\nexamples below).\n\n_Optional named parameters, with default values_\n\n- `line_breaks_before`: type is `Int32`<br />\n  Default value is 0\n- `line_breaks_after`: type is `Int32`<br />\n  Default value is 0\n\nPermitted range of values for these 2 parameters is governed by\n`Config.line_breaks_range` (an `Error::InvalidValue` exception is raised if not\nin range)\n\nThese 2 parameters help define the number of line breaks between adjacent\nframed rows.  The value of this number is the greater of the values\nbetween the `line_breaks_after` value of one row and the\n`line_breaks_before` value of the next, bearing in mind that for Group,\nHeader and Body row types, these values are always equal to 0.\n\nThe following example:\n```\nTablo::Heading::Title.new(\"My title\", Tablo::Frame.new(1, 1))\nTablo::Heading::SubTitle.new(\"Another title\", Tablo::Frame.new(line_breaks_before: 3))\n```\nwould result in 3 line breaks between the title and the subtitle (ie\n2 blank lines)\n\nIf the values of `line_breaks_after` and `line_breaks_before` are both equal\nto 0, no line break is generated and the 2 adjacent frames are joined.","summary":"<p>Returns a Frame instance</p>","abstract":false,"args":[{"name":"line_breaks_before","default_value":"0","external_name":"line_breaks_before","restriction":"Int32"},{"name":"line_breaks_after","default_value":"0","external_name":"line_breaks_after","restriction":"Int32"}],"args_string":"(line_breaks_before : Int32 = 0, line_breaks_after : Int32 = 0)","args_html":"(line_breaks_before : Int32 = <span class=\"n\">0</span>, line_breaks_after : Int32 = <span class=\"n\">0</span>)","location":{"filename":"src/heading.cr","line_number":42,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L42"},"def":{"name":"new","args":[{"name":"line_breaks_before","default_value":"0","external_name":"line_breaks_before","restriction":"Int32"},{"name":"line_breaks_after","default_value":"0","external_name":"line_breaks_after","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(line_breaks_before, line_breaks_after)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Heading","path":"Tablo/Heading.html","kind":"module","full_name":"Tablo::Heading","name":"Heading","abstract":false,"locations":[{"filename":"src/heading.cr","line_number":52,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L52"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"types":[{"html_id":"tablo/Tablo/Heading/Footer","path":"Tablo/Heading/Footer.html","kind":"struct","full_name":"Tablo::Heading::Footer","name":"Footer","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/heading.cr","line_number":149,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L149"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Heading","kind":"module","full_name":"Tablo::Heading","name":"Heading"},"constructors":[{"html_id":"new(value:CellType=nil,frame:Frame|Nil=nil,alignment:Justify=Config.heading_alignment,formatter:Cell::Text::Formatter=Config.heading_formatter,styler:Cell::Text::Styler=Config.heading_styler,page_break:Bool=false)-class-method","name":"new","doc":"Returns an instance of Footer.\n\nExample:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([1, 2, 3],\n  footer: Tablo::Heading::Footer.new(\"My footer\",\n    frame: Tablo::Frame.new(1, 1), page_break: true)) do |t|\n  t.add_column(\"itself\", &.itself)\nend\nputs table\n```\n\n_All (named) parameters are optional, with default values_\n\n- `value`: type is `CellType` <br />\n  Default value is `nil` <br />\nThis is the footer's display content.\n- `frame`: type is `Frame?` <br />\n  Default value is `nil` <br />\n  If a Frame instance is created, the footer is framed.\n- `alignment`: type is `Justify` <br />\n  By default, as defined in `Config.heading_alignment` (but this can be\n  modified), footer content is centered.\n- `formatter`:  a Proc whose type is `Cell::Text::Formatter` <br />\n  Default value is set by `Config.heading_formatter`\n- `styler`:  a Proc whose type is `Cell::Text::Styler` <br />\n  Default value is set by `Config.heading_styler`\n- `page_break`: type is `Bool` <br />\n  Default value is `false` <br />\nIf true, a page break is inserted after the footer content (or after the\nfooter frame, but note that in this case, it prevents the join with the\nframe that follows when the value of the `omit_last_rule` parameter of\n`Table` is `true`).","summary":"<p>Returns an instance of Footer.</p>","abstract":false,"args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"frame","default_value":"nil","external_name":"frame","restriction":"Frame | ::Nil"},{"name":"alignment","default_value":"Config.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"},{"name":"page_break","default_value":"false","external_name":"page_break","restriction":"Bool"}],"args_string":"(value : CellType = nil, frame : Frame | Nil = nil, alignment : Justify = Config.heading_alignment, formatter : Cell::Text::Formatter = Config.heading_formatter, styler : Cell::Text::Styler = Config.heading_styler, page_break : Bool = false)","args_html":"(value : <a href=\"../../Tablo/CellType.html\">CellType</a> = <span class=\"n\">nil</span>, frame : <a href=\"../../Tablo/Frame.html\">Frame</a> | Nil = <span class=\"n\">nil</span>, alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span>.heading_alignment, formatter : <a href=\"../../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span>.heading_formatter, styler : <a href=\"../../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span>.heading_styler, page_break : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/heading.cr","line_number":191,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L191"},"def":{"name":"new","args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"frame","default_value":"nil","external_name":"frame","restriction":"Frame | ::Nil"},{"name":"alignment","default_value":"Config.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"},{"name":"page_break","default_value":"false","external_name":"page_break","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value, frame, alignment, formatter, styler, page_break)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"framed?-instance-method","name":"framed?","abstract":false,"location":{"filename":"src/heading.cr","line_number":199,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L199"},"def":{"name":"framed?","visibility":"Public","body":"!frame.nil?"}}]},{"html_id":"tablo/Tablo/Heading/SubTitle","path":"Tablo/Heading/SubTitle.html","kind":"struct","full_name":"Tablo::Heading::SubTitle","name":"SubTitle","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/heading.cr","line_number":107,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L107"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Heading","kind":"module","full_name":"Tablo::Heading","name":"Heading"},"doc":"struct SubTitle creates a subtitle for the table (**but displayed only  if\na title has also been defined**)","summary":"<p>struct SubTitle creates a subtitle for the table (<strong>but displayed only  if a title has also been defined</strong>)</p>","constructors":[{"html_id":"new(value:CellType=nil,frame:Frame|Nil=nil,alignment:Justify=Config.heading_alignment,formatter:Cell::Text::Formatter=Config.heading_formatter,styler:Cell::Text::Styler=Config.heading_styler)-class-method","name":"new","doc":"Returns an instance of SubTitle\n\nExample:\n```\nTablo::Table.new((1, 2, 3],\n  subtitle: Tablo::Heading::SubTitle.new(\"My subtitle\", frame: Tablo::Frame.new(1, 1),\n    alignment: Tablo::Justify::Left)\n```\n\n_All (named) parameters are optional, with default values_\n\n- `value`: type is `CellType` <br />\n  Default value is `nil` <br />\nThis is the subtitle's display content.\n- `frame`: type is `Frame?` <br />\n  Default value is `nil` <br />\n  If a Frame instance is created, the subtitle is framed.\n- `alignment`: type is `Justify` <br />\n  By default, as defined in `Config.heading_alignment` (but this can be\n  modified), subtitle content is centered.\n- `formatter`:  a Proc whose type is `Cell::Text::Formatter` <br />\n  Default value is set by `Config.heading_formatter`\n- `styler`:  a Proc whose type is `Cell::Text::Styler` <br />\n  Default value is set by `Config.heading_styler`","summary":"<p>Returns an instance of SubTitle</p>","abstract":false,"args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"frame","default_value":"nil","external_name":"frame","restriction":"Frame | ::Nil"},{"name":"alignment","default_value":"Config.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"}],"args_string":"(value : CellType = nil, frame : Frame | Nil = nil, alignment : Justify = Config.heading_alignment, formatter : Cell::Text::Formatter = Config.heading_formatter, styler : Cell::Text::Styler = Config.heading_styler)","args_html":"(value : <a href=\"../../Tablo/CellType.html\">CellType</a> = <span class=\"n\">nil</span>, frame : <a href=\"../../Tablo/Frame.html\">Frame</a> | Nil = <span class=\"n\">nil</span>, alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span>.heading_alignment, formatter : <a href=\"../../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span>.heading_formatter, styler : <a href=\"../../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span>.heading_styler)","location":{"filename":"src/heading.cr","line_number":137,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L137"},"def":{"name":"new","args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"frame","default_value":"nil","external_name":"frame","restriction":"Frame | ::Nil"},{"name":"alignment","default_value":"Config.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value, frame, alignment, formatter, styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"framed?-instance-method","name":"framed?","abstract":false,"location":{"filename":"src/heading.cr","line_number":144,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L144"},"def":{"name":"framed?","visibility":"Public","body":"!frame.nil?"}}]},{"html_id":"tablo/Tablo/Heading/Title","path":"Tablo/Heading/Title.html","kind":"struct","full_name":"Tablo::Heading::Title","name":"Title","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/heading.cr","line_number":56,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L56"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Heading","kind":"module","full_name":"Tablo::Heading","name":"Heading"},"doc":"struct Title creates a title for the table.","summary":"<p>struct Title creates a title for the table.</p>","constructors":[{"html_id":"new(value:CellType=nil,frame:Frame|Nil=nil,alignment:Justify=Config.heading_alignment,formatter:Cell::Text::Formatter=Config.heading_formatter,styler:Cell::Text::Styler=Config.heading_styler,repeated:Bool=false)-class-method","name":"new","doc":"Returns an instance of Title.\n\nExample:\n```\nTablo::Table.new((1, 2, 3],\n  title: Tablo::Heading::Title.new(\"My title\", frame: Tablo::Frame.new(1, 1), repeated: true)\n```\n\n_All (named) parameters are optional, with default values_\n\n- `value`: type is `CellType` <br />\n  Default value is `nil` <br />\nThis is the title's display content.\n- `frame`: type is `Frame?` <br />\n  Default value is `nil` <br />\n  If a Frame instance is created, the title is framed.\n- `alignment`: type is `Justify` <br />\n  By default, as defined in `Config.heading_alignment` (but this can be\n  modified), title content is centered.\n- `formatter`:  a Proc whose type is `Cell::Text::Formatter` <br />\n  Default value is set by `Config.heading_formatter`\n- `styler`:  a Proc whose type is `Cell::Text::Styler` <br />\n  Default value is set by `Config.heading_styler`\n- `repeated`: type is `Bool` <br />\n  Default value is `false` <br />\n  This attribute governs the repetition of the title and subtitle when the\n  `header_frequency` attribute of `Table` is greater than 0 (if `true`, title and subtitle\n  are inserted before the repeated group and header rows).","summary":"<p>Returns an instance of Title.</p>","abstract":false,"args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"frame","default_value":"nil","external_name":"frame","restriction":"Frame | ::Nil"},{"name":"alignment","default_value":"Config.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"},{"name":"repeated","default_value":"false","external_name":"repeated","restriction":"Bool"}],"args_string":"(value : CellType = nil, frame : Frame | Nil = nil, alignment : Justify = Config.heading_alignment, formatter : Cell::Text::Formatter = Config.heading_formatter, styler : Cell::Text::Styler = Config.heading_styler, repeated : Bool = false)","args_html":"(value : <a href=\"../../Tablo/CellType.html\">CellType</a> = <span class=\"n\">nil</span>, frame : <a href=\"../../Tablo/Frame.html\">Frame</a> | Nil = <span class=\"n\">nil</span>, alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span>.heading_alignment, formatter : <a href=\"../../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span>.heading_formatter, styler : <a href=\"../../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span>.heading_styler, repeated : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/heading.cr","line_number":92,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L92"},"def":{"name":"new","args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"frame","default_value":"nil","external_name":"frame","restriction":"Frame | ::Nil"},{"name":"alignment","default_value":"Config.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"},{"name":"repeated","default_value":"false","external_name":"repeated","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(value, frame, alignment, formatter, styler, repeated)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"framed?-instance-method","name":"framed?","abstract":false,"location":{"filename":"src/heading.cr","line_number":100,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/heading.cr#L100"},"def":{"name":"framed?","visibility":"Public","body":"!frame.nil?"}}]}]},{"html_id":"tablo/Tablo/Justify","path":"Tablo/Justify.html","kind":"enum","full_name":"Tablo::Justify","name":"Justify","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":133,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L133"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Left","name":"Left","value":"0"},{"id":"Center","name":"Center","value":"1"},{"id":"Right","name":"Right","value":"2"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Cell justification","summary":"<p>Cell justification</p>","instance_methods":[{"html_id":"center?-instance-method","name":"center?","abstract":false,"location":{"filename":"src/types.cr","line_number":135,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L135"},"def":{"name":"center?","visibility":"Public","body":"self == Center"}},{"html_id":"left?-instance-method","name":"left?","abstract":false,"location":{"filename":"src/types.cr","line_number":134,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L134"},"def":{"name":"left?","visibility":"Public","body":"self == Left"}},{"html_id":"right?-instance-method","name":"right?","abstract":false,"location":{"filename":"src/types.cr","line_number":136,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L136"},"def":{"name":"right?","visibility":"Public","body":"self == Right"}}]},{"html_id":"tablo/Tablo/LabelType","path":"Tablo/LabelType.html","kind":"alias","full_name":"Tablo::LabelType","name":"LabelType","abstract":false,"locations":[{"filename":"src/types.cr","line_number":65,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L65"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Int32 | String | Symbol)","aliased_html":"Int32 | String | Symbol","const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"LabelType is an union of allowed types for a column label.","summary":"<p>LabelType is an union of allowed types for a column label.</p>"},{"html_id":"tablo/Tablo/Position","path":"Tablo/Position.html","kind":"enum","full_name":"Tablo::Position","name":"Position","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L110"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"BodyBody","name":"BodyBody","value":"0"},{"id":"BodyBottom","name":"BodyBottom","value":"1"},{"id":"BodyFiller","name":"BodyFiller","value":"2"},{"id":"BodyGroup","name":"BodyGroup","value":"3"},{"id":"BodyHeader","name":"BodyHeader","value":"4"},{"id":"BodyTitle","name":"BodyTitle","value":"5"},{"id":"BodyTop","name":"BodyTop","value":"6"},{"id":"GroupHeader","name":"GroupHeader","value":"7"},{"id":"GroupTop","name":"GroupTop","value":"8"},{"id":"HeaderBody","name":"HeaderBody","value":"9"},{"id":"HeaderTop","name":"HeaderTop","value":"10"},{"id":"SummaryBody","name":"SummaryBody","value":"11"},{"id":"SummaryHeader","name":"SummaryHeader","value":"12"},{"id":"TitleBody","name":"TitleBody","value":"13"},{"id":"TitleBottom","name":"TitleBottom","value":"14"},{"id":"TitleGroup","name":"TitleGroup","value":"15"},{"id":"TitleHeader","name":"TitleHeader","value":"16"},{"id":"TitleTitle","name":"TitleTitle","value":"17"},{"id":"TitleTop","name":"TitleTop","value":"18"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Row position transitions","summary":"<p>Row position transitions</p>","instance_methods":[{"html_id":"body_body?-instance-method","name":"body_body?","abstract":false,"location":{"filename":"src/types.cr","line_number":111,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L111"},"def":{"name":"body_body?","visibility":"Public","body":"self == BodyBody"}},{"html_id":"body_bottom?-instance-method","name":"body_bottom?","abstract":false,"location":{"filename":"src/types.cr","line_number":112,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L112"},"def":{"name":"body_bottom?","visibility":"Public","body":"self == BodyBottom"}},{"html_id":"body_filler?-instance-method","name":"body_filler?","abstract":false,"location":{"filename":"src/types.cr","line_number":113,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L113"},"def":{"name":"body_filler?","visibility":"Public","body":"self == BodyFiller"}},{"html_id":"body_group?-instance-method","name":"body_group?","abstract":false,"location":{"filename":"src/types.cr","line_number":114,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L114"},"def":{"name":"body_group?","visibility":"Public","body":"self == BodyGroup"}},{"html_id":"body_header?-instance-method","name":"body_header?","abstract":false,"location":{"filename":"src/types.cr","line_number":115,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L115"},"def":{"name":"body_header?","visibility":"Public","body":"self == BodyHeader"}},{"html_id":"body_title?-instance-method","name":"body_title?","abstract":false,"location":{"filename":"src/types.cr","line_number":116,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L116"},"def":{"name":"body_title?","visibility":"Public","body":"self == BodyTitle"}},{"html_id":"body_top?-instance-method","name":"body_top?","abstract":false,"location":{"filename":"src/types.cr","line_number":117,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L117"},"def":{"name":"body_top?","visibility":"Public","body":"self == BodyTop"}},{"html_id":"group_header?-instance-method","name":"group_header?","abstract":false,"location":{"filename":"src/types.cr","line_number":118,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L118"},"def":{"name":"group_header?","visibility":"Public","body":"self == GroupHeader"}},{"html_id":"group_top?-instance-method","name":"group_top?","abstract":false,"location":{"filename":"src/types.cr","line_number":119,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L119"},"def":{"name":"group_top?","visibility":"Public","body":"self == GroupTop"}},{"html_id":"header_body?-instance-method","name":"header_body?","abstract":false,"location":{"filename":"src/types.cr","line_number":120,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L120"},"def":{"name":"header_body?","visibility":"Public","body":"self == HeaderBody"}},{"html_id":"header_top?-instance-method","name":"header_top?","abstract":false,"location":{"filename":"src/types.cr","line_number":121,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L121"},"def":{"name":"header_top?","visibility":"Public","body":"self == HeaderTop"}},{"html_id":"summary_body?-instance-method","name":"summary_body?","abstract":false,"location":{"filename":"src/types.cr","line_number":122,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L122"},"def":{"name":"summary_body?","visibility":"Public","body":"self == SummaryBody"}},{"html_id":"summary_header?-instance-method","name":"summary_header?","abstract":false,"location":{"filename":"src/types.cr","line_number":123,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L123"},"def":{"name":"summary_header?","visibility":"Public","body":"self == SummaryHeader"}},{"html_id":"title_body?-instance-method","name":"title_body?","abstract":false,"location":{"filename":"src/types.cr","line_number":124,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L124"},"def":{"name":"title_body?","visibility":"Public","body":"self == TitleBody"}},{"html_id":"title_bottom?-instance-method","name":"title_bottom?","abstract":false,"location":{"filename":"src/types.cr","line_number":125,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L125"},"def":{"name":"title_bottom?","visibility":"Public","body":"self == TitleBottom"}},{"html_id":"title_group?-instance-method","name":"title_group?","abstract":false,"location":{"filename":"src/types.cr","line_number":126,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L126"},"def":{"name":"title_group?","visibility":"Public","body":"self == TitleGroup"}},{"html_id":"title_header?-instance-method","name":"title_header?","abstract":false,"location":{"filename":"src/types.cr","line_number":127,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L127"},"def":{"name":"title_header?","visibility":"Public","body":"self == TitleHeader"}},{"html_id":"title_title?-instance-method","name":"title_title?","abstract":false,"location":{"filename":"src/types.cr","line_number":128,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L128"},"def":{"name":"title_title?","visibility":"Public","body":"self == TitleTitle"}},{"html_id":"title_top?-instance-method","name":"title_top?","abstract":false,"location":{"filename":"src/types.cr","line_number":129,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L129"},"def":{"name":"title_top?","visibility":"Public","body":"self == TitleTop"}}]},{"html_id":"tablo/Tablo/RowType","path":"Tablo/RowType.html","kind":"enum","full_name":"Tablo::RowType","name":"RowType","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":100,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L100"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Title","name":"Title","value":"0"},{"id":"SubTitle","name":"SubTitle","value":"1"},{"id":"Group","name":"Group","value":"2"},{"id":"Header","name":"Header","value":"3"},{"id":"Body","name":"Body","value":"4"},{"id":"Footer","name":"Footer","value":"5"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Types of rows in Table layout","summary":"<p>Types of rows in Table layout</p>","instance_methods":[{"html_id":"body?-instance-method","name":"body?","abstract":false,"location":{"filename":"src/types.cr","line_number":105,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L105"},"def":{"name":"body?","visibility":"Public","body":"self == Body"}},{"html_id":"footer?-instance-method","name":"footer?","abstract":false,"location":{"filename":"src/types.cr","line_number":106,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L106"},"def":{"name":"footer?","visibility":"Public","body":"self == Footer"}},{"html_id":"group?-instance-method","name":"group?","abstract":false,"location":{"filename":"src/types.cr","line_number":103,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L103"},"def":{"name":"group?","visibility":"Public","body":"self == Group"}},{"html_id":"header?-instance-method","name":"header?","abstract":false,"location":{"filename":"src/types.cr","line_number":104,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L104"},"def":{"name":"header?","visibility":"Public","body":"self == Header"}},{"html_id":"sub_title?-instance-method","name":"sub_title?","abstract":false,"location":{"filename":"src/types.cr","line_number":102,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L102"},"def":{"name":"sub_title?","visibility":"Public","body":"self == SubTitle"}},{"html_id":"title?-instance-method","name":"title?","abstract":false,"location":{"filename":"src/types.cr","line_number":101,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L101"},"def":{"name":"title?","visibility":"Public","body":"self == Title"}}]},{"html_id":"tablo/Tablo/Summary","path":"Tablo/Summary.html","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary","abstract":false,"superclass":{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":7,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L7"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The purpose of the Summary class is to calculate and format aggregated\nsource data in a dedicated table, closely linked to the main table.","summary":"<p>The purpose of the Summary class is to calculate and format aggregated source data in a dedicated table, closely linked to the main table.</p>","class_methods":[{"html_id":"use(key)-class-method","name":"use","doc":"Class method to retrieve and use results of saved calculations\nby key (which is of type Symbol).\n\nFor example, to populate row 1 of column `:total` with the result of\na previous calculation identified by `:total_sum`:\n```\nTablo::Summary::BodyRow.new(:total, 1, ->{ Tablo::Summary.use(:total_sum) })\n```","summary":"<p>Class method to retrieve and use results of saved calculations by key (which is of type Symbol).</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/summary.cr","line_number":205,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L205"},"def":{"name":"use","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"proc_results[key]"}}],"constructors":[{"html_id":"new(table:Table(T),summary_definition:U,summary_options:V)-class-method","name":"new","doc":"Summary class constructor\n\n_Mandatory parameters:_\n\n- `table`: type is Table(T) <br />\n  This parameter references the main table\n\n- `summary_definition`: its type is U, as its content is a user defined\narray containing `n` instances of `Summary::UserProc`, `Summary::HeaderColumn`,\n`Summary::BodyColumn`, `Summary::BodyRow` structs)\n\n- `summary_options`: its type is V, a NamedTuple of Table initializers (may be\nempty)\n\nHere is a complete and functional example of Detail and Summary tables\n\"working\" together (See relevant infos on usage in structs listed above)\n```\nrequire \"tablo\"\nrequire \"colorize\"\nrequire \"big\"\n\nstruct BigDecimal\n  include Tablo::CellType\nend\n\nstruct InvoiceItem\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : BigDecimal?)\n  end\nend\n\ninvoice = [\n  InvoiceItem.new(\"Laptop\", 3, BigDecimal.new(980)),\n  InvoiceItem.new(\"Printer\", 2, BigDecimal.new(154.99)),\n  InvoiceItem.new(\"Router\", 1, BigDecimal.new(99)),\n  InvoiceItem.new(\"Switch\", nil, BigDecimal.new(45)),\n  InvoiceItem.new(\"Accessories\", 5, BigDecimal.new(64.50)),\n]\n\ninvoice_summary_definition = [\n  Tablo::Summary::UserProc.new(\n    proc: ->(tbl : Tablo::Table(InvoiceItem)) {\n      total_sum = BigDecimal.new(0)\n      tbl.column_data(:total).each do |tot|\n        total_sum += tot.as(BigDecimal) unless tot.nil?\n      end\n      discount = total_sum * 0.05\n      total_after_discount = total_sum - discount\n      tax = total_after_discount * 0.2\n      total_due = total_after_discount + tax\n      {\n        :total_sum            => total_sum.as(Tablo::CellType),\n        :discount             => discount.as(Tablo::CellType),\n        :total_after_discount => total_after_discount.as(Tablo::CellType),\n        :tax                  => tax.as(Tablo::CellType),\n        :total_due            => total_due.as(Tablo::CellType),\n      }\n    }),\n  Tablo::Summary::BodyColumn.new(\"Price\", alignment: Tablo::Justify::Right),\n  Tablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Right,\n    formatter: ->(value : Tablo::CellType) {\n      value.is_a?(String) ? value : (\n        value.nil? ? \"\" : \"%.2f\" % value.as(BigDecimal)\n      )\n    },\n    styler: ->(_value : Tablo::CellType, cd : Tablo::Cell::Data::Coords, fc : String) {\n      case cd.row_index\n      when 0, 2, 5 then fc.colorize.mode(:bold).to_s\n      when 1       then fc.colorize.mode(:italic).to_s\n      else              fc\n      end\n    }),\n  Tablo::Summary::HeaderColumn.new(\"Product\", content: \"\"),\n  Tablo::Summary::HeaderColumn.new(\"Quantity\", content: \"\"),\n  Tablo::Summary::HeaderColumn.new(\"Price\", content: \"Total Invoice\",\n    alignment: Tablo::Justify::Right),\n  Tablo::Summary::HeaderColumn.new(:total, content: \"Amounts\"),\n\n  Tablo::Summary::BodyRow.new(\"Price\", 10, \"SubTotal\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 20, \"Discount 5%\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 30, \"S/T after discount\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 40, \"Tax (20%)\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 60, \"Balance due\"),\n\n  Tablo::Summary::BodyRow.new(:total, 10, ->{ Tablo::Summary.use(:total_sum) }),\n  Tablo::Summary::BodyRow.new(:total, 20, ->{ Tablo::Summary.use(:discount) }),\n  Tablo::Summary::BodyRow.new(:total, 30, ->{ Tablo::Summary.use(:total_after_discount) }),\n  Tablo::Summary::BodyRow.new(:total, 40, ->{ Tablo::Summary.use(:tax) }),\n  Tablo::Summary::BodyRow.new(:total, 50, \"========\"),\n  Tablo::Summary::BodyRow.new(:total, 60, ->{ Tablo::Summary.use(:total_due) }),\n]\n\ntable = Tablo::Table.new(invoice,\n  omit_last_rule: true,\n  border: Tablo::Border.new(Tablo::BorderName::Fancy),\n  title: Tablo::Heading::Title.new(\"\\nInvoice\\n=======\\n\"),\n  subtitle: Tablo::Heading::SubTitle.new(\"Details\", frame: Tablo::Heading::Frame.new)) do |t|\n  t.add_column(\"Product\",\n    &.product)\n  t.add_column(\"Quantity\",\n    body_formatter: ->(value : Tablo::CellType) {\n      (value.nil? ? \"N/A\" : value.to_s)\n    }, &.quantity)\n  t.add_column(\"Price\",\n    body_formatter: ->(value : Tablo::CellType) {\n      \"%.2f\" % value.as(BigDecimal)\n    }, &.price.as(Tablo::CellType))\n  t.add_column(:total, header: \"Total\",\n    body_formatter: ->(value : Tablo::CellType) {\n      value.nil? ? \"\" : \"%.2f\" % value.as(BigDecimal)\n    }) { |n| n.price.nil? || n.quantity.nil? ? nil : (\n    n.price.as(BigDecimal) *\n      n.quantity.as(Int32)\n  ).as(Tablo::CellType) }\nend\n\ntable.pack\ntable.add_summary(invoice_summary_definition,\n  title: Tablo::Heading::Title.new(\"Summary\", frame: Tablo::Heading::Frame.new))\ntable.summary.as(Tablo::Table).pack\nputs table\nputs table.summary\n```\noutput (styling disabled):\n```\n\n                          Invoice\n                          =======\n\n╭────────────────────────────────────────────────────────╮\n│                         Details                        │\n├─────────────┬──────────┬────────────────────┬──────────┤\n│ Product     : Quantity :              Price :    Total │\n├-------------┼----------┼--------------------┼----------┤\n│ Laptop      :        3 :             980.00 :  2940.00 │\n│ Printer     :        2 :             154.99 :   309.98 │\n│ Router      :        1 :              99.00 :    99.00 │\n│ Switch      : N/A      :              45.00 :          │\n│ Accessories :        5 :              64.50 :   322.50 │\n├─────────────┴──────────┴────────────────────┴──────────┤\n│                         Summary                        │\n├─────────────┬──────────┬────────────────────┬──────────┤\n│             :          :      Total Invoice :  Amounts │\n├-------------┼----------┼--------------------┼----------┤\n│             :          :           SubTotal :  3671.48 │\n│             :          :        Discount 5% :   183.57 │\n│             :          : S/T after discount :  3487.91 │\n│             :          :          Tax (20%) :   697.58 │\n│             :          :                    : ======== │\n│             :          :        Balance due :  4185.49 │\n╰─────────────┴──────────┴────────────────────┴──────────╯\n```\nA few points of note <br />\n- Use of the `BigDecimal` type (not included in Tablo by default, but made\n  possible by reopening the `BigDecimal` struct and adding the `include CellType`\n  statement).\n- Joining of the summary table to the main table, with the main table's\n`omit_last_rule` parameter set to `true`.\n- Row numbers need not be consecutive. What's important is that their\norder is well defined, as they will ultimately be replaced by their index\nin a sorted array of row values.\n- To obtain optimal result in packing, the main table must be packed\n  before summary table definition.","summary":"<p>Summary class constructor</p>","abstract":false,"args":[{"name":"table","external_name":"table","restriction":"Table(T)"},{"name":"summary_definition","external_name":"summary_definition","restriction":"U"},{"name":"summary_options","external_name":"summary_options","restriction":"V"}],"args_string":"(table : Table(T), summary_definition : U, summary_options : V)","args_html":"(table : <a href=\"../Tablo/Table.html\">Table</a>(T), summary_definition : U, summary_options : V)","location":{"filename":"src/summary.cr","line_number":187,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L187"},"def":{"name":"new","args":[{"name":"table","external_name":"table","restriction":"Table(T)"},{"name":"summary_definition","external_name":"summary_definition","restriction":"U"},{"name":"summary_options","external_name":"summary_options","restriction":"V"}],"visibility":"Public","body":"_ = Summary(T, U, V).allocate\n_.initialize(table, summary_definition, summary_options)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"types":[{"html_id":"tablo/Tablo/Summary/BodyColumn","path":"Tablo/Summary/BodyColumn.html","kind":"struct","full_name":"Tablo::Summary::BodyColumn","name":"BodyColumn","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":503,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L503"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::BodyColumn` struct lets you define specific\nalignment, formatting and styling on body columns.","summary":"<p>The <code><a href=\"../../Tablo/Summary/BodyColumn.html\">Summary::BodyColumn</a></code> struct lets you define specific alignment, formatting and styling on body columns.</p>","constructors":[{"html_id":"new(column:LabelType|Array(LabelType),alignment:Justify|Nil=nil,formatter:Cell::Data::Formatter|Nil=nil,styler:Cell::Data::Styler|Nil=nil)-class-method","name":"new","doc":"The constructor expects up to 4 parameters, of which the first, the\ncolumn identifier, is the only mandatory one (but it goes without saying\nthat at least one of the 3 optional parameters must be defined!)\n\n- `column` : type is `LabelType`\n\n- The last three optional parameters are (`alignment`,\n  `formatter` and `styler`)\n\nExample:\n```\nTablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Right,\n  formatter: ->(value : Tablo::CellType) {\n    value.is_a?(String) ? value : (\n      value.nil? ? \"\" : \"%.2f\" % value.as(BigDecimal)\n    )\n  },\n  styler: ->(_value : Tablo::CellType, cd : Tablo::Cell::Data::Coords, fc : String) {\n    case cd.row_index\n    when 0, 2, 5 then fc.colorize.mode(:bold).to_s\n    when 1       then fc.colorize.mode(:italic).to_s\n    else              fc\n    end\n  }),\n```","summary":"<p>The constructor expects up to 4 parameters, of which the first, the column identifier, is the only mandatory one (but it goes without saying that at least one of the 3 optional parameters must be defined!)</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"args_string":"(column : LabelType | Array(LabelType), alignment : Justify | Nil = nil, formatter : Cell::Data::Formatter | Nil = nil, styler : Cell::Data::Styler | Nil = nil)","args_html":"(column : <a href=\"../../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../../Tablo/LabelType.html\">LabelType</a>), alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"n\">nil</span>, formatter : <a href=\"../../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> | Nil = <span class=\"n\">nil</span>, styler : <a href=\"../../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/summary.cr","line_number":531,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L531"},"def":{"name":"new","args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(column, alignment, formatter, styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Summary/BodyRow","path":"Tablo/Summary/BodyRow.html","kind":"struct","full_name":"Tablo::Summary::BodyRow","name":"BodyRow","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":539,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L539"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::BodyRow` struct lets you define body rows content","summary":"<p>The <code><a href=\"../../Tablo/Summary/BodyRow.html\">Summary::BodyRow</a></code> struct lets you define body rows content</p>","constructors":[{"html_id":"new(column:LabelType,row:Int32,content:CellType|Proc(CellType))-class-method","name":"new","doc":"The constructor expects 3 mandatory parameters.\n\n- `column` : type is `LabelType`, the column identifier\n\n- `row` : type is `Int32`, the row number\n\n- `content` : type is `CellType` or a Proc returning a `CellType`\n\n`column` and `row` define the precise location of the aggregated value in the\nSummary table. Row numbers need not be contiguous; what's important is that\nthey allow results to be displayed in the desired row order.\n\nExample of `content` directly fed by a literal string:\n```\nTablo::Summary::BodyRow.new(\"Price\", 40, \"Tax (20%)\")\nTablo::Summary::BodyRow.new(\"Price\", 60, \"Balance due\"),\n```\n Example of `content` fed by a proc returning a `CellType` value:\n```\nTablo::Summary::BodyRow.new(:total, 40, ->{ Tablo::Summary.use(:tax) }),\nTablo::Summary::BodyRow.new(:total, 60, ->{ Tablo::Summary.use(:total_due) }),\n```\n\n**Important**:\nNote here the use of the `Summary.use` class method, which retrieves, via\na Symbol key, an aggregated value previously calculated in\na `Summary::UserProc`  instance.","summary":"<p>The constructor expects 3 mandatory parameters.</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"LabelType"},{"name":"row","external_name":"row","restriction":"Int32"},{"name":"content","external_name":"content","restriction":"CellType | Proc(CellType)"}],"args_string":"(column : LabelType, row : Int32, content : CellType | Proc(CellType))","args_html":"(column : <a href=\"../../Tablo/LabelType.html\">LabelType</a>, row : Int32, content : <a href=\"../../Tablo/CellType.html\">CellType</a> | Proc(<a href=\"../../Tablo/CellType.html\">CellType</a>))","location":{"filename":"src/summary.cr","line_number":569,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L569"},"def":{"name":"new","args":[{"name":"column","external_name":"column","restriction":"LabelType"},{"name":"row","external_name":"row","restriction":"Int32"},{"name":"content","external_name":"content","restriction":"CellType | Proc(CellType)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(column, row, content)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Summary/HeaderColumn","path":"Tablo/Summary/HeaderColumn.html","kind":"struct","full_name":"Tablo::Summary::HeaderColumn","name":"HeaderColumn","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":471,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L471"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::HeaderColumn` struct lets you define header content and specific\nalignment, formatting and styling","summary":"<p>The <code><a href=\"../../Tablo/Summary/HeaderColumn.html\">Summary::HeaderColumn</a></code> struct lets you define header content and specific alignment, formatting and styling</p>","constructors":[{"html_id":"new(column:LabelType|Array(LabelType),content:String,alignment:Justify|Nil=nil,formatter:Cell::Data::Formatter|Nil=nil,styler:Cell::Data::Styler|Nil=nil)-class-method","name":"new","doc":"The constructor expects up to 5 parameters, the first 2 being mandatory\n\n- `column` : type if `LabelType` <br />\n   It is the column identifier.\n\n- `content` : type is String <br />\n   (may be empty)\n\n- The last three are optional (`alignment`, `formatter` and `styler`)\n\nExamples:\n```\nTablo::Summary::HeaderColumn.new(\"Price\",\n  content: \"Total Invoice\",\n  alignment: Tablo::Justify::Right),\nTablo::Summary::HeaderColumn.new(:total,\n  content: \"Amounts\",\n  styler: ->(s : String) {s.colorize(:red).to_s}),\n```","summary":"<p>The constructor expects up to 5 parameters, the first 2 being mandatory</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"content","external_name":"content","restriction":"String"},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"args_string":"(column : LabelType | Array(LabelType), content : String, alignment : Justify | Nil = nil, formatter : Cell::Data::Formatter | Nil = nil, styler : Cell::Data::Styler | Nil = nil)","args_html":"(column : <a href=\"../../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../../Tablo/LabelType.html\">LabelType</a>), content : String, alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"n\">nil</span>, formatter : <a href=\"../../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> | Nil = <span class=\"n\">nil</span>, styler : <a href=\"../../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/summary.cr","line_number":493,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L493"},"def":{"name":"new","args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"content","external_name":"content","restriction":"String"},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(column, content, alignment, formatter, styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Summary/UserProc","path":"Tablo/Summary/UserProc.html","kind":"struct","full_name":"Tablo::Summary::UserProc(T)","name":"UserProc","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":414,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L414"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::UserProc` struct lets you define specific functions to be applied\nto source data, accessible either by column or directly from the source,\nin order to provide aggregated results.","summary":"<p>The <code><a href=\"../../Tablo/Summary/UserProc.html\">Summary::UserProc</a></code> struct lets you define specific functions to be applied to source data, accessible either by column or directly from the source, in order to provide aggregated results.</p>","constructors":[{"html_id":"new(proc:Proc(Table(T),Hash(Symbol,CellType)))-class-method","name":"new","doc":"The constructor's only parameter is a Proc, which in turn expects\na Table(T) as its only parameter.\n\nThe Proc must return a hash of results (of type CellType), which are\nautomatically saved for future use (See `Summary.use` method\nin `Summary::BodyRow`).\n\nExample of accessing data directly from source:\n```\nstruct InvoiceItem\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : Int32?)\n  end\nend\n\nTablo::Summary::UserProc.new(\n  proc: ->(tbl : Tablo::Table(InvoiceItem)) {\n    total_sum = 0\n    tbl.sources.each do |row|\n      next unless row.quantity.is_a?(Int32) && row.price.is_a?(Int32)\n      total_sum += row.quantity.as(Int32) * row.price.as(Int32)\n    end\n    {:total_sum => total_sum.as(Tablo::CellType)}\n  })\n```\nAnother example, this time using column access, with iterators, and\nreturning several results.\n```\nTablo::Summary::UserProc.new(\n  proc: ->(tbl : Tablo::Table(InvoiceItem)) {\n    total_sum = total_count = max_price = 0\n    iter_quantity = tbl.column_data(\"Quantity\").each\n    iter_price = tbl.column_data(\"Price\").each\n    iter = iter_quantity.zip(iter_price)\n    iter.each do |q, p|\n      next unless q.is_a?(Int32) && p.is_a?(Int32)\n      total_sum += q * p\n      total_count += 1\n      max_price = [max_price, p].max\n    end\n    {\n      :total_count => total_count.as(Tablo::CellType),\n      :total_sum   => total_sum.as(Tablo::CellType),\n      :max_price   => max_price.as(Tablo::CellType),\n    }\n  })\n```","summary":"<p>The constructor's only parameter is a Proc, which in turn expects a Table(T) as its only parameter.</p>","abstract":false,"args":[{"name":"proc","external_name":"proc","restriction":"Proc(Table(T), Hash(Symbol, CellType))"}],"args_string":"(proc : Proc(Table(T), Hash(Symbol, CellType)))","args_html":"(proc : Proc(<a href=\"../../Tablo/Table.html\">Table</a>(T), Hash(Symbol, <a href=\"../../Tablo/CellType.html\">CellType</a>)))","location":{"filename":"src/summary.cr","line_number":465,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/summary.cr#L465"},"def":{"name":"new","args":[{"name":"proc","external_name":"proc","restriction":"Proc(Table(T), Hash(Symbol, CellType))"}],"visibility":"Public","body":"_ = UserProc(T).allocate\n_.initialize(proc)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"tablo/Tablo/Table","path":"Tablo/Table.html","kind":"class","full_name":"Tablo::Table(T)","name":"Table","abstract":false,"superclass":{"html_id":"tablo/Tablo/ATable","kind":"class","full_name":"Tablo::ATable","name":"ATable"},"ancestors":[{"html_id":"tablo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"tablo/Tablo/ATable","kind":"class","full_name":"Tablo::ATable","name":"ATable"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/table.cr","line_number":23,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L23"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"tablo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The Table class is Tablo's main class. Its initialization defines the main\nparameters governing the overall operation of the Tablo library, in particular\nthe data source and column definitions.","summary":"<p>The Table class is Tablo's main class.</p>","constructors":[{"html_id":"new(sources:Enumerable(T),*,title:Heading::Title=Config.title,subtitle:Heading::SubTitle=Config.subtitle,footer:Heading::Footer=Config.footer,border:Border=Border.new(Config.border_definition,Config.border_styler),group_alignment:Justify=Config.group_alignment,group_formatter:Cell::Text::Formatter=Config.group_formatter,group_styler:Cell::Text::Styler=Config.group_styler,header_alignment:Justify|Nil=Config.header_alignment,header_formatter:Cell::Data::Formatter=Config.header_formatter,header_styler:Cell::Data::Styler=Config.header_styler,body_alignment:Justify|Nil=Config.body_alignment,body_formatter:Cell::Data::Formatter=Config.body_formatter,body_styler:Cell::Data::Styler=Config.body_styler,left_padding:Int32=Config.left_padding,right_padding:Int32=Config.right_padding,padding_character:String=Config.padding_character,truncation_indicator:String=Config.truncation_indicator,width:Int32=Config.width,header_frequency:Int32|Nil=Config.header_frequency,row_divider_frequency:Int32|Nil=Config.row_divider_frequency,wrap_mode:WrapMode=Config.wrap_mode,header_wrap:Int32|Nil=Config.header_wrap,body_wrap:Int32|Nil=Config.body_wrap,masked_headers:Bool=Config.masked_headers?,omit_group_header_rule:Bool=Config.omit_group_header_rule?,omit_last_rule:Bool=Config.omit_last_rule?)-class-method","name":"new","doc":"First constructor : Table constructor has two versions to initialize a new Table instance, depending on whether a block is given or not.\n\n ```text\n Used constants                | Default values\n ----------------------------- | ------------------------------------\n DEFAULT_HEADING_ALIGNMENT     | Justify::Center\n DEFAULT_FORMATTER             | ->(c : CellType) { c.to_s }\n DEFAULT_STYLER                | ->(s : String) { s }\n DEFAULT_DATA_DEPENDENT_STYLER | ->(_c : CellType, s : String) { s }\n```\n\n_Mandatory parameters:_\n\n- `sources`: type is Enumerable(T)<br />\n  Can be any Enumerable data type _(`Range` is currently (Crystal 1.9.2) not correctly supported in this context: use `Range.to_a` instead)_\n\n_Optional named parameters, with default values_\n\n- `title`: type is `Title`<br />\n  Default set by `Config.title`<br />\n  Initializing this class without any argument set its value to `nil`,\n  so there is nothing to display\n- `subtitle`: type is `SubTitle`<br />\n  Default set by `Config.subtitle`<br />\n  (Initialization: see `title`)\n- `footer`: type is `Footer`<br />\n  Default set by `Config.footer`<br />\n  (Initialization: see `title`)\n- `border`: type is `Border`<br />\n  Initalized by `Config.border`, which defaults to `BorderName::Ascii` <br />\n  Other `BorderName` are `ReducedAscii`, `Modern`,\n  `ReducedModern`, `Markdown`, `Fancy` and `Blank`. <br />\n  `border` may also be initialized directly by a string of 16 characters.\n- `group_alignment`: type is `Justify`<br />\n  Default value is `DEFAULT_HEADING_ALIGNMENT`\n- `group_formatter`: type is `Cell::Text::Formatter`<br />\n  Default value is `DEFAULT_FORMATTER`\n- `group_styler`: type is `Cell::Text::Styler` <br />\n  Default value is `DEFAULT_STYLER`\n- `header_alignment`: type is `Justify?` <br />\n  Default value is `nil` <br />\n  (with `nil` as default, alignment\n  depends on the type of the related body cell value)\n- `header_formatter`: type is `Cell::Data::Formatter` <br />\n  Default value is `DEFAULT_FORMATTER`\n- `header_styler`: type is `Cell::Data::Styler` <br />\n  Defaut value is `DEFAULT_DATA_DEPENDENT_STYLER`\n- `body_alignment`: type is `Justify?` <br />\n  Default value is `nil` <br />\n  (With `nil` as default, alignment depends on the type of its cell value)\n- `body_formatter`: type id `Cell::Data::Formatter` <br />\n  Default value is `DEFAULT_FORMATTER`\n- `body_styler`: type is `Cell::Data::Styler` <br />\n  Default value is `DEFAULT_DATA_DEPENDENT_STYLER`\n- `left_padding`: type is `Int32`<br />\n  Default value is `1` <br />\n  Permitted range of values is governed by `Config.padding_width_range` in the `check_padding` method<br />\n  (raises `Error::InvalidValue` runtime exception if value not in range)\n- `right_padding`: type is `Int32` <br />\n  Default value is `1` <br />\n  Permitted range of values is governed by `Config.padding_width_range` in the `check_padding` method<br />\n  (raises `Error::InvalidValue` runtime exception if value not in range)\n- `padding_character`: type is `String`<br />\n  Default value is `\" \"` <br />\n  The `check_padding_character` auxiliairy method ensures the `padding_character` string size is only one <br />\n  (raises an `Error::InvalidValue` runtime exception otherwise)\n- `truncation_indicator`: type is `String` <br />\n  Defaut value is `\"~\"` <br />\n  The `check_truncation_indicator` auxiliairy method ensures the `truncation_indicator` string size\n  is only one (raises an `Error::InvalidValue` runtime exception otherwise)\n- `width`: type is `Int32` <br />\n  Default value is `12`<br />\n  Permitted range of values is governed by `Config.column_width_range` in the\n  `check_width` auxiliary method (raises `Error::InvalidValue` runtime exception\n  unless value in range)\n\n- `header_frequency`: type is `Int32?` <br />\n  Default value is `0` <br />\n  Permitted range of values is governed by `Config.header_frequency_range` in the\n  `check_header_frequency` auxiliary method (raises `Error::InvalidValue` runtime exception\n  unless value in range or `nil`)\n\n  - If set to `0`, rows of data other than body are displayed\n    only once, at the beginning for titles and headers, at the end for the footer.\n  - If set to `n` (positive), group or column headers are repeated every `n`\n    rows, as are footers, but titles and subtitles are not repeated (unless\n    title `repeated` attribute is set to `true`)\n  - If set to `nil`, only body rows are displayed.\n\n- `row_divider_frequency`: type is `Int32?` <br />\n  Default value is `nil` <br />\n  Permitted range of values is governed by `Config.row_divider_frequency_range` in the\n  `check_row_divider_frequency` auxiliary method (raises `Error::InvalidValue` runtime\n  exception unless value in range or `nil`)\n\n- `wrap_mode`: type is `WrapMode` <br />\n  Default value is `WrapMode::Word`<br />\n  The `WrapMode` enum defines 2 modes :\n\n  - `Rune` : long lines can be cut between characters (graphemes)\n  - `Word` : long lines can be cut between words only\n\n- `header_wrap`: type is `Int32?` <br />\n  Default value is `nil` <br />\n  Permitted range of values is governed by\n  `Config.header_wrap_range` in the `check_header_wrap` auxiliary method\n  (raises `Error::InvalidValue` runtime exception unless value in range or `nil`)\n\n- `body_wrap` | `Int32?`<br />\n  Default value is `nil` <br />\n  Permitted range of values is governed by\n  `Config.body_wrap_range` in the `check_body_wrap` auxiliary method (raises\n  `Error::InvalidValue` runtime exception unless value in range or `nil`)\n\n- `masked_headers`: type is `Bool` <br />\n  Default value is `false` <br />\n  If `true`, groups and column headers are not displayed <br />\n  (this does not prevent display of title, subtitle and footer)\n\n- `omit_group_header_rule`: type is `Bool` <br />\n  Default value is `false` <br />\n  If `true`, the rule between Group and Header rows is not displayed.\n  This is useful for headers custom rendering.\n\n- `omit_last_rule`: type is `Bool` <br />\n  Default value is `false` <br />\n  If `true`, the closing rule of table is not displayed.\n  This is useful for custom rendering (and notably for Detail and Summary tables joining)\n\nReturns an instance of `Table(T)`","summary":"<p>First constructor : Table constructor has two versions to initialize a new Table instance, depending on whether a block is given or not.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config.title","external_name":"title","restriction":"Heading::Title"},{"name":"subtitle","default_value":"Config.subtitle","external_name":"subtitle","restriction":"Heading::SubTitle"},{"name":"footer","default_value":"Config.footer","external_name":"footer","restriction":"Heading::Footer"},{"name":"border","default_value":"Border.new(Config.border_definition, Config.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config.width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"args_string":"(sources : Enumerable(T), *, title : Heading::Title = Config.title, subtitle : Heading::SubTitle = Config.subtitle, footer : Heading::Footer = Config.footer, border : Border = Border.new(Config.border_definition, Config.border_styler), group_alignment : Justify = Config.group_alignment, group_formatter : Cell::Text::Formatter = Config.group_formatter, group_styler : Cell::Text::Styler = Config.group_styler, header_alignment : Justify | Nil = Config.header_alignment, header_formatter : Cell::Data::Formatter = Config.header_formatter, header_styler : Cell::Data::Styler = Config.header_styler, body_alignment : Justify | Nil = Config.body_alignment, body_formatter : Cell::Data::Formatter = Config.body_formatter, body_styler : Cell::Data::Styler = Config.body_styler, left_padding : Int32 = Config.left_padding, right_padding : Int32 = Config.right_padding, padding_character : String = Config.padding_character, truncation_indicator : String = Config.truncation_indicator, width : Int32 = Config.width, header_frequency : Int32 | Nil = Config.header_frequency, row_divider_frequency : Int32 | Nil = Config.row_divider_frequency, wrap_mode : WrapMode = Config.wrap_mode, header_wrap : Int32 | Nil = Config.header_wrap, body_wrap : Int32 | Nil = Config.body_wrap, masked_headers : Bool = Config.masked_headers?, omit_group_header_rule : Bool = Config.omit_group_header_rule?, omit_last_rule : Bool = Config.omit_last_rule?)","args_html":"(sources : Enumerable(T), *, title : <a href=\"../Tablo/Heading/Title.html\">Heading::Title</a> = <span class=\"t\">Config</span>.title, subtitle : <a href=\"../Tablo/Heading/SubTitle.html\">Heading::SubTitle</a> = <span class=\"t\">Config</span>.subtitle, footer : <a href=\"../Tablo/Heading/Footer.html\">Heading::Footer</a> = <span class=\"t\">Config</span>.footer, border : <a href=\"../Tablo/Border.html\">Border</a> = <span class=\"t\">Border</span>.new(<span class=\"t\">Config</span>.border_definition, <span class=\"t\">Config</span>.border_styler), group_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span>.group_alignment, group_formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span>.group_formatter, group_styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span>.group_styler, header_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span>.header_alignment, header_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span>.header_formatter, header_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span>.header_styler, body_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span>.body_alignment, body_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span>.body_formatter, body_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span>.body_styler, left_padding : Int32 = <span class=\"t\">Config</span>.left_padding, right_padding : Int32 = <span class=\"t\">Config</span>.right_padding, padding_character : String = <span class=\"t\">Config</span>.padding_character, truncation_indicator : String = <span class=\"t\">Config</span>.truncation_indicator, width : Int32 = <span class=\"t\">Config</span>.width, header_frequency : Int32 | Nil = <span class=\"t\">Config</span>.header_frequency, row_divider_frequency : Int32 | Nil = <span class=\"t\">Config</span>.row_divider_frequency, wrap_mode : <a href=\"../Tablo/WrapMode.html\">WrapMode</a> = <span class=\"t\">Config</span>.wrap_mode, header_wrap : Int32 | Nil = <span class=\"t\">Config</span>.header_wrap, body_wrap : Int32 | Nil = <span class=\"t\">Config</span>.body_wrap, masked_headers : Bool = <span class=\"t\">Config</span>.masked_headers?, omit_group_header_rule : Bool = <span class=\"t\">Config</span>.omit_group_header_rule?, omit_last_rule : Bool = <span class=\"t\">Config</span>.omit_last_rule?)","location":{"filename":"src/table.cr","line_number":259,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L259"},"def":{"name":"new","args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config.title","external_name":"title","restriction":"Heading::Title"},{"name":"subtitle","default_value":"Config.subtitle","external_name":"subtitle","restriction":"Heading::SubTitle"},{"name":"footer","default_value":"Config.footer","external_name":"footer","restriction":"Heading::Footer"},{"name":"border","default_value":"Border.new(Config.border_definition, Config.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config.width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"splat_index":1,"visibility":"Public","body":"_ = Table(T).allocate\n_.initialize(sources, title: title, subtitle: subtitle, footer: footer, border: border, group_alignment: group_alignment, group_formatter: group_formatter, group_styler: group_styler, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, width: width, header_frequency: header_frequency, row_divider_frequency: row_divider_frequency, wrap_mode: wrap_mode, header_wrap: header_wrap, body_wrap: body_wrap, masked_headers: masked_headers, omit_group_header_rule: omit_group_header_rule, omit_last_rule: omit_last_rule)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(sources:Enumerable(T),*,title:Heading::Title=Config.title,subtitle:Heading::SubTitle=Config.subtitle,footer:Heading::Footer=Config.footer,border:Border=Border.new(Config.border_definition,Config.border_styler),group_alignment:Justify=Config.group_alignment,group_formatter:Cell::Text::Formatter=Config.group_formatter,group_styler:Cell::Text::Styler=Config.group_styler,header_alignment:Justify|Nil=Config.header_alignment,header_formatter:Cell::Data::Formatter=Config.header_formatter,header_styler:Cell::Data::Styler=Config.header_styler,body_alignment:Justify|Nil=Config.body_alignment,body_formatter:Cell::Data::Formatter=Config.body_formatter,body_styler:Cell::Data::Styler=Config.body_styler,left_padding:Int32=Config.left_padding,right_padding:Int32=Config.right_padding,padding_character:String=Config.padding_character,truncation_indicator:String=Config.truncation_indicator,width:Int32=Config.width,header_frequency:Int32|Nil=Config.header_frequency,row_divider_frequency:Int32|Nil=Config.row_divider_frequency,wrap_mode:WrapMode=Config.wrap_mode,header_wrap:Int32|Nil=Config.header_wrap,body_wrap:Int32|Nil=Config.body_wrap,masked_headers:Bool=Config.masked_headers?,omit_group_header_rule:Bool=Config.omit_group_header_rule?,omit_last_rule:Bool=Config.omit_last_rule?,&)-class-method","name":"new","doc":"Second constructor, with same parameters as the first one, but with a block given","summary":"<p>Second constructor, with same parameters as the first one, but with a block given</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config.title","external_name":"title","restriction":"Heading::Title"},{"name":"subtitle","default_value":"Config.subtitle","external_name":"subtitle","restriction":"Heading::SubTitle"},{"name":"footer","default_value":"Config.footer","external_name":"footer","restriction":"Heading::Footer"},{"name":"border","default_value":"Border.new(Config.border_definition, Config.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config.width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"args_string":"(sources : Enumerable(T), *, title : Heading::Title = Config.title, subtitle : Heading::SubTitle = Config.subtitle, footer : Heading::Footer = Config.footer, border : Border = Border.new(Config.border_definition, Config.border_styler), group_alignment : Justify = Config.group_alignment, group_formatter : Cell::Text::Formatter = Config.group_formatter, group_styler : Cell::Text::Styler = Config.group_styler, header_alignment : Justify | Nil = Config.header_alignment, header_formatter : Cell::Data::Formatter = Config.header_formatter, header_styler : Cell::Data::Styler = Config.header_styler, body_alignment : Justify | Nil = Config.body_alignment, body_formatter : Cell::Data::Formatter = Config.body_formatter, body_styler : Cell::Data::Styler = Config.body_styler, left_padding : Int32 = Config.left_padding, right_padding : Int32 = Config.right_padding, padding_character : String = Config.padding_character, truncation_indicator : String = Config.truncation_indicator, width : Int32 = Config.width, header_frequency : Int32 | Nil = Config.header_frequency, row_divider_frequency : Int32 | Nil = Config.row_divider_frequency, wrap_mode : WrapMode = Config.wrap_mode, header_wrap : Int32 | Nil = Config.header_wrap, body_wrap : Int32 | Nil = Config.body_wrap, masked_headers : Bool = Config.masked_headers?, omit_group_header_rule : Bool = Config.omit_group_header_rule?, omit_last_rule : Bool = Config.omit_last_rule?, &)","args_html":"(sources : Enumerable(T), *, title : <a href=\"../Tablo/Heading/Title.html\">Heading::Title</a> = <span class=\"t\">Config</span>.title, subtitle : <a href=\"../Tablo/Heading/SubTitle.html\">Heading::SubTitle</a> = <span class=\"t\">Config</span>.subtitle, footer : <a href=\"../Tablo/Heading/Footer.html\">Heading::Footer</a> = <span class=\"t\">Config</span>.footer, border : <a href=\"../Tablo/Border.html\">Border</a> = <span class=\"t\">Border</span>.new(<span class=\"t\">Config</span>.border_definition, <span class=\"t\">Config</span>.border_styler), group_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span>.group_alignment, group_formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span>.group_formatter, group_styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span>.group_styler, header_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span>.header_alignment, header_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span>.header_formatter, header_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span>.header_styler, body_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span>.body_alignment, body_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span>.body_formatter, body_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span>.body_styler, left_padding : Int32 = <span class=\"t\">Config</span>.left_padding, right_padding : Int32 = <span class=\"t\">Config</span>.right_padding, padding_character : String = <span class=\"t\">Config</span>.padding_character, truncation_indicator : String = <span class=\"t\">Config</span>.truncation_indicator, width : Int32 = <span class=\"t\">Config</span>.width, header_frequency : Int32 | Nil = <span class=\"t\">Config</span>.header_frequency, row_divider_frequency : Int32 | Nil = <span class=\"t\">Config</span>.row_divider_frequency, wrap_mode : <a href=\"../Tablo/WrapMode.html\">WrapMode</a> = <span class=\"t\">Config</span>.wrap_mode, header_wrap : Int32 | Nil = <span class=\"t\">Config</span>.header_wrap, body_wrap : Int32 | Nil = <span class=\"t\">Config</span>.body_wrap, masked_headers : Bool = <span class=\"t\">Config</span>.masked_headers?, omit_group_header_rule : Bool = <span class=\"t\">Config</span>.omit_group_header_rule?, omit_last_rule : Bool = <span class=\"t\">Config</span>.omit_last_rule?, &)","location":{"filename":"src/table.cr","line_number":262,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L262"},"def":{"name":"new","args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config.title","external_name":"title","restriction":"Heading::Title"},{"name":"subtitle","default_value":"Config.subtitle","external_name":"subtitle","restriction":"Heading::SubTitle"},{"name":"footer","default_value":"Config.footer","external_name":"footer","restriction":"Heading::Footer"},{"name":"border","default_value":"Border.new(Config.border_definition, Config.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config.width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"splat_index":1,"yields":1,"block_arity":1,"visibility":"Public","body":"_ = Table(T).allocate\n_.initialize(sources, title: title, subtitle: subtitle, footer: footer, border: border, group_alignment: group_alignment, group_formatter: group_formatter, group_styler: group_styler, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, width: width, header_frequency: header_frequency, row_divider_frequency: row_divider_frequency, wrap_mode: wrap_mode, header_wrap: header_wrap, body_wrap: body_wrap, masked_headers: masked_headers, omit_group_header_rule: omit_group_header_rule, omit_last_rule: omit_last_rule) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_column(label:LabelType,*,header=label.to_s,header_alignment=header_alignment,header_formatter=header_formatter,header_styler=header_styler,body_alignment=body_alignment,body_formatter=body_formatter,body_styler=body_styler,left_padding=left_padding,right_padding=right_padding,padding_character=padding_character,width=width,truncation_indicator=truncation_indicator,wrap_mode=wrap_mode,&extractor:T,Int32->CellType)-instance-method","name":"add_column","doc":"Returns an instance of `Column(T)`\n\n_Mandatory positional parameter:_\n\n- `label`: type is `LabelType`<br />\n  The label identifies the column (`LabelType` is an alias of `Int32 | Symbol | String`)\n\n_Optional named parameters, with default values_\n\n- `header`: type is `String` <br />\n  Default value is `label.to_s`<br />\n  Can be an empty string\n\n- `header_alignment`: type is `Justify?`<br />\n  By default, inherits from table `header_alignment` initializer\n\n- `header_formatter`: type is `Cell::Data::Formatter` <br />\n  By default, inherits from table `header_formatter` initializer\n\n- `header_styler`: type is `Cell::Data::Styler` <br />\n  By default, inherits from table `header_styler` initializer\n\n- `body_alignment`: type is `Justify?` <br />\n  By default, inherits from table `body_alignment` initializer\n\n- `body_formatter`: type is `Cell::Data::Formatter` <br />\n  By default, inherits from table `body_formatter` initializer\n\n- `body_styler`: type is `Cell::Data::Styler` <br />\n  By default, inherits from table `body_styler` initializer\n\n- `left_padding`: type is `Int32` <br />\n  By default, inherits from table `left_padding` initializer\n\n- `right_padding`: type is `Int32` <br />\n  By default, inherits from table `right_padding` initializer\n\n- `padding_character`: type is `String` <br />\n  By default, inherits from table `padding_character` initializer\n\n- `width`: type is `Int32` <br />\n  By default, inherits from table `width` initializer\n\n- `truncation_indicator`: type is `String` <br />\n  By default, inherits from table `truncation_indicator` initializer\n\n- `wrap_mode`: type is `WrapMode` <br />\n  By default, inherits from table `wrap_mode` initializer\n\n_Captured block_\n\n- `&extractor`: type is `(T | Int32) -> CellType` <br />\n  Captured block for extracting data from source","summary":"<p>Returns an instance of <code><a href=\"../Tablo/Column.html\">Column</a>(T)</code></p>","abstract":false,"args":[{"name":"label","external_name":"label","restriction":"LabelType"},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"header_alignment","default_value":"header_alignment","external_name":"header_alignment","restriction":""},{"name":"header_formatter","default_value":"header_formatter","external_name":"header_formatter","restriction":""},{"name":"header_styler","default_value":"header_styler","external_name":"header_styler","restriction":""},{"name":"body_alignment","default_value":"body_alignment","external_name":"body_alignment","restriction":""},{"name":"body_formatter","default_value":"body_formatter","external_name":"body_formatter","restriction":""},{"name":"body_styler","default_value":"body_styler","external_name":"body_styler","restriction":""},{"name":"left_padding","default_value":"left_padding","external_name":"left_padding","restriction":""},{"name":"right_padding","default_value":"right_padding","external_name":"right_padding","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"width","default_value":"width","external_name":"width","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"args_string":"(label : LabelType, *, header = label.to_s, header_alignment = header_alignment, header_formatter = header_formatter, header_styler = header_styler, body_alignment = body_alignment, body_formatter = body_formatter, body_styler = body_styler, left_padding = left_padding, right_padding = right_padding, padding_character = padding_character, width = width, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode, &extractor : T, Int32 -> CellType)","args_html":"(label : <a href=\"../Tablo/LabelType.html\">LabelType</a>, *, header = label.to_s, header_alignment = header_alignment, header_formatter = header_formatter, header_styler = header_styler, body_alignment = body_alignment, body_formatter = body_formatter, body_styler = body_styler, left_padding = left_padding, right_padding = right_padding, padding_character = padding_character, width = width, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode, &extractor : T, Int32 -> <a href=\"../Tablo/CellType.html\">CellType</a>)","location":{"filename":"src/table.cr","line_number":415,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L415"},"def":{"name":"add_column","args":[{"name":"label","external_name":"label","restriction":"LabelType"},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"header_alignment","default_value":"header_alignment","external_name":"header_alignment","restriction":""},{"name":"header_formatter","default_value":"header_formatter","external_name":"header_formatter","restriction":""},{"name":"header_styler","default_value":"header_styler","external_name":"header_styler","restriction":""},{"name":"body_alignment","default_value":"body_alignment","external_name":"body_alignment","restriction":""},{"name":"body_formatter","default_value":"body_formatter","external_name":"body_formatter","restriction":""},{"name":"body_styler","default_value":"body_styler","external_name":"body_styler","restriction":""},{"name":"left_padding","default_value":"left_padding","external_name":"left_padding","restriction":""},{"name":"right_padding","default_value":"right_padding","external_name":"right_padding","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"width","default_value":"width","external_name":"width","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"splat_index":1,"yields":2,"block_arity":2,"block_arg":{"name":"extractor","external_name":"extractor","restriction":"(T, Int32 -> CellType)"},"visibility":"Public","body":"if column_registry.has_key?(label)\n  raise(Error::DuplicateLabel.new(\"Column label already used in this table.\"))\nend\ncheck_width(width)\ncheck_padding(left_padding)\ncheck_padding(right_padding)\ncheck_padding_character(padding_character)\ncheck_truncation_indicator(truncation_indicator)\ncolumn_registry[label] = Column(T).new(header: header, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, width: width, truncation_indicator: truncation_indicator, wrap_mode: wrap_mode, extractor: Proc(T, Int32, CellType).new do |row, index|\n  (extractor.call(row, index)).as(CellType)\nend, index: column_registry.size)\n"}},{"html_id":"add_group(label,*,header=label.to_s,alignment=group_alignment,formatter=group_formatter,styler=group_styler,padding_character=padding_character,truncation_indicator=truncation_indicator,wrap_mode=wrap_mode)-instance-method","name":"add_group","doc":"Returns an instance of `Cell::Text`\n\nCreates a group including all previous columns not already grouped.\nAfter adding the last column, a group is automatically created (with an\nempty header) if not explicitly specified.\n\n_Mandatory positional parameter_\n\n- `label`: type is `LabelType` <br />\n  The label identifies the group.\n\n_Optional named parameters, with default values_\n\n- `header`: type is `String` <br />\n  Default value id `label.to_s` <br />\n  Can be an empty string\n\n- `alignment`: type is `Justify` <br />\n  By default, inherits from table `group_alignment` initializer\n\n- `formatter`: type is `Cell::Text::Formatter` <br />\n  By default, inherits from table `group_formatter` initializer\n\n- `styler`: type is `Cell::Text::Styler` <br />\n  By default, inherits from table `group_styler` initializer\n\n- `padding_character`: type is `String` <br />\n  By default, inherits from table `padding_character` initializer\n\n- `truncation_indicator`: type is `String` <br />\n  By default, inherits from table `truncation_indicator` initializer\n\n- `wrap_mode`: type is `WrapMode` <br />\n  By default, inherits from table `wrap_mode` initializer","summary":"<p>Returns an instance of <code><a href=\"../Tablo/Cell/Text.html\">Cell::Text</a></code></p>","abstract":false,"args":[{"name":"label","external_name":"label","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"alignment","default_value":"group_alignment","external_name":"alignment","restriction":""},{"name":"formatter","default_value":"group_formatter","external_name":"formatter","restriction":""},{"name":"styler","default_value":"group_styler","external_name":"styler","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"args_string":"(label, *, header = label.to_s, alignment = group_alignment, formatter = group_formatter, styler = group_styler, padding_character = padding_character, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode)","args_html":"(label, *, header = label.to_s, alignment = group_alignment, formatter = group_formatter, styler = group_styler, padding_character = padding_character, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode)","location":{"filename":"src/table.cr","line_number":502,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L502"},"def":{"name":"add_group","args":[{"name":"label","external_name":"label","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"alignment","default_value":"group_alignment","external_name":"alignment","restriction":""},{"name":"formatter","default_value":"group_formatter","external_name":"formatter","restriction":""},{"name":"styler","default_value":"group_styler","external_name":"styler","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"splat_index":1,"visibility":"Public","body":"if group_registry.has_key?(label)\n  raise(Error::DuplicateLabel.new(\"Group label already used in this table.\"))\nend\nif column_registry.size.zero?\n  raise(Error::GroupEmpty.new(\"Group requires at least one column.\"))\nend\ncheck_padding_character(padding_character)\ncheck_truncation_indicator(truncation_indicator)\ncolumn_groups << columns_group\ncolumns = column_list.select do |e|\n  e.index.in?(column_groups.last)\nend\ngroup_width = calc_group_width(columns)\ngroup_registry[label] = Cell::Text.new(value: header, row_type: RowType::Group, alignment: alignment, formatter: formatter, styler: styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, wrap_mode: wrap_mode, width: group_width)\n"}},{"html_id":"add_summary(summary_definition,summary_options)-instance-method","name":"add_summary","doc":"The `add_summary` method creates a summary table, attached to the main table.\n\n_Mandatory positional parameters:_\n\n- `summary_definition`: type is `Array(<structs>)`<br />\nwhere `<structs>` may be one or more instances of `Summary::UserProc`,\n`Summary::HeaderColumn`, `HeaderRow`, `Summary::BodyColumn` or `Summary::BodyRow` <br />\n\n- `summary_options`: type is `NamedTuple(<Table parameters>)` <br />\nwhere `<Table parameters>` is a list of any number of Table initializers (may be empty).\n\nExample of `summary_definition` :\n```\nsummary_definition = [\n  Tablo::... TODO\n  Tablo::Summary::BodyRow.new(:total, 1, ->{ Tablo::Summary.use(:total_sum) }),\n  Tablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Center),\n]\n```\nwhich means :\n 1. Sum the `:total` column\n 2. populate the Summary table with this result in column `:total`, row 1\n 3. and set column alignment to Center\n\nThis method is overloaded on the `summary_options` parameter, which can be given as:\n- a named tuple of Table initializers : { ..., ...,  }  (first form)\n- a list of Table initializers : ..., ...,  (second form) <br />\n  (converted into a named tuple by the ** operator)\n\nCreates a summary table and sets its parent<br />\nReturns self (an instance of Table(T)) with an embedded Summary Table","summary":"<p>The <code><a href=\"../Tablo/Table.html#add_summary%28summary_definition%2Csummary_options%29-instance-method\">#add_summary</a></code> method creates a summary table, attached to the main table.</p>","abstract":false,"args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""},{"name":"summary_options","external_name":"summary_options","restriction":""}],"args_string":"(summary_definition, summary_options)","args_html":"(summary_definition, summary_options)","location":{"filename":"src/table.cr","line_number":636,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L636"},"def":{"name":"add_summary","args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""},{"name":"summary_options","external_name":"summary_options","restriction":""}],"visibility":"Public","body":"self.child = (Summary.new(self, summary_definition, summary_options)).run\n(self.child.as(ATable)).parent = self.as(ATable)\n"}},{"html_id":"add_summary(summary_definition,**summary_options)-instance-method","name":"add_summary","doc":"Second form : `summary_options` given as a list of Table initializers","summary":"<p>Second form : <code>summary_options</code> given as a list of Table initializers</p>","abstract":false,"args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""}],"args_string":"(summary_definition, **summary_options)","args_html":"(summary_definition, **summary_options)","location":{"filename":"src/table.cr","line_number":642,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L642"},"def":{"name":"add_summary","args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""}],"double_splat":{"name":"summary_options","external_name":"summary_options","restriction":""},"visibility":"Public","body":"self.child = (Summary.new(self, summary_definition, summary_options)).run\n(self.child.as(ATable)).parent = self.as(ATable)\n"}},{"html_id":"column_data(column_label:LabelType)-instance-method","name":"column_data","doc":"returns an array of data for a specific column\nUsed by Summary::UserProc","summary":"<p>returns an array of data for a specific column Used by Summary::UserProc</p>","abstract":false,"args":[{"name":"column_label","external_name":"column_label","restriction":"LabelType"}],"args_string":"(column_label : LabelType)","args_html":"(column_label : <a href=\"../Tablo/LabelType.html\">LabelType</a>)","location":{"filename":"src/table.cr","line_number":1419,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1419"},"def":{"name":"column_data","args":[{"name":"column_label","external_name":"column_label","restriction":"LabelType"}],"visibility":"Public","body":"column_data = [] of CellType\nextractor = column_registry[column_label].extractor\nsources.each_with_index do |source, index|\n  column_data << (extractor.call(source, index))\nend\ncolumn_data\n"}},{"html_id":"column_data(column_label:Array(LabelType))-instance-method","name":"column_data","doc":"returns a hash of array of data for several columns\nUsed by Summary::UserProc","summary":"<p>returns a hash of array of data for several columns Used by Summary::UserProc</p>","abstract":false,"args":[{"name":"column_label","external_name":"column_label","restriction":"Array(LabelType)"}],"args_string":"(column_label : Array(LabelType))","args_html":"(column_label : Array(<a href=\"../Tablo/LabelType.html\">LabelType</a>))","location":{"filename":"src/table.cr","line_number":1430,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1430"},"def":{"name":"column_data","args":[{"name":"column_label","external_name":"column_label","restriction":"Array(LabelType)"}],"visibility":"Public","body":"column_data = {} of LabelType => Array(CellType)\nsources.each_with_index do |source, index|\n  column_label.each do |col|\n    if column_data.has_key?(col)\n    else\n      column_data[col] = [] of CellType\n    end\n    column_data[col] << (column_registry[col].extractor.call(source, index))\n  end\nend\ncolumn_data\n"}},{"html_id":"each(&)-instance-method","name":"each","doc":"Returns successive formatted rows, with all corresponding headers and footers,\naccording to the `header_frequency` value.\n\nIn fact,\n\n```\ntable.each do |r|\n  puts r\nend\n```\n\nis the same as\n\n```\nputs table\n```","summary":"<p>Returns successive formatted rows, with all corresponding headers and footers, according to the <code>header_frequency</code> value.</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":694,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L694"},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"sources.each_with_index do |source, index|\n  show_divider = false\n  if (  rdf = row_divider_frequency).nil?\n  else\n    show_divider = (index > 0) && ((index % rdf) == 0)\n    if (    hf = header_frequency).nil?\n    else\n      if hf > 0\n        show_divider && (show_divider = ((index % hf) != 0))\n      end\n    end\n  end\n  yield Row.new(table: self, source: source, divider: show_divider, index: index)\nend"}},{"html_id":"horizontal_rule(position=Position::Bottom,column_groups=[]ofArray(Int32))-instance-method","name":"horizontal_rule","doc":"Produce a horizontal dividing line suitable for printing between\nrendered rows, so as to customize table output.\n\nFor example, to insert a horizontal line at specific tow positions, we\ncan do :\n```\ntable.each_with_index do |row, i|\n  puts table.horizontal_rule(Tablo::Position::BodyBody) unless i == 0 || i == 2\n  puts row\nend\n```\n- Returns a String representing the formatted horizontal rule","summary":"<p>Produce a horizontal dividing line suitable for printing between rendered rows, so as to customize table output.</p>","abstract":false,"args":[{"name":"position","default_value":"Position::Bottom","external_name":"position","restriction":""},{"name":"column_groups","default_value":"[] of Array(Int32)","external_name":"column_groups","restriction":""}],"args_string":"(position = Position::Bottom, column_groups = [] of Array(Int32))","args_html":"(position = <span class=\"t\">Position</span><span class=\"t\">::</span><span class=\"t\">Bottom</span>, column_groups = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Array</span>(<span class=\"t\">Int32</span>))","location":{"filename":"src/table.cr","line_number":817,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L817"},"def":{"name":"horizontal_rule","args":[{"name":"position","default_value":"Position::Bottom","external_name":"position","restriction":""},{"name":"column_groups","default_value":"[] of Array(Int32)","external_name":"column_groups","restriction":""}],"visibility":"Public","body":"widths = column_list.map do |column|\n  column.width + column.total_padding\nend\nborder.horizontal_rule(widths, position, groups: column_groups)\n"}},{"html_id":"pack(width:Int32|Nil=nil,*,packing_mode=PackingMode::AutoSized)-instance-method","name":"pack","doc":"`pack` method (1. all displyable columns)\n\nThe `pack` method comes in 3 overloaded versions :\n- Version 1: all columns are selected for packing\n- Version 2: some columns are excluded (`except` parameter)\n- Version 3: only certain columns are selected (`only` parameter)\n\nThe `pack` method allows for adapting the total width of the table.\nIt accepts 3 parameters, all optional:\n\n- `width`: total width required for the formatted table. If no `width` is\n  given and if the value of parameter `Config.terminal_capped_width` is true,\n  the value of `width` is read from the size of the terminal, otherwise its\n  value is `nil` and in that case, only `packing_mode == AutoSized` has an\n  effect.\n\n- `packing_mode` : column widths taken as starting point for resizing, possible\n  values are :\n  * `CurrentWidths` : resizing starts from columns current width\n  * `InitialWidths` : columns current width is reset to its initial values, at column\n    definition time\n  * `AutoSized` : current values are set to their 'best fit' values, ie they are\n    automatically adapted to their largest content\n\n- `except`: column or array of columns excluded from being resized\n- `only`: column or array of columns selected exclusively for resizing\n\nThe following examples will illustrate the behaviour of the different\nparameters values, starting from the 'standard' one, with all column widths to\ntheir default value : 12 characters.\n\nreturns the Table itself\n\nReturns `self` (the current Table instance) after modifying its column widths\n\n_All named parameters are optional, with default values_\n\n- `width`: type is `Int32?` <br />\n  Default value is `nil` <br />\n  `width` is the requested total table width. If `nil` and `Config.terminal_capped_width`\n  is `true` (and output not redirected), `width` finally takes the value of the terminal size.\n\n- `packing_mode`: type is `PackingMode` <br />\n  Default set by `Config.packing_mode` <br />\n  `packing_mode` allows you to specify the starting point for resizing : <br />\n\n  - either from the current column width value (`PackingMode::CurrentWidths`) <br />\n  - or from its initial value (`PackingMode::InitialWidths`) <br />\n  - or ignore it and directly perform optimized resizing (`PackingMode::AutoSized`)\n\n- `except` or `only` (mutually exclusive named parameters) : (array of) column label(s) <br />\n\n  - to be excluded from resizing (`except` named parameter) <br />\n  - to be selected exclusively for packing (`only` named parameter) <br />\n\n  Default to `nil`\n\n**Description of the packing algorithm**<br />\n\nThe resizing algorithm is actually quite simple:<br />\nIf the final value of the `width` parameter is not `nil`, it first compares\nthe table's current width with the requested width, to determine whether this\nis a reduction or an increase in size. Then, depending on the case, either the\nwidest column is reduced, or the narrowest increased, in steps of 1, until the\nrequested table width is reached.<br />\nThis explains why the final result of resizing depends on the starting column\nwidths.","summary":"<p><code><a href=\"../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cpacking_mode%3DPackingMode%3A%3AAutoSized%29-instance-method\">#pack</a></code> method (1.</p>","abstract":false,"args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"packing_mode","default_value":"PackingMode::AutoSized","external_name":"packing_mode","restriction":""}],"args_string":"(width : Int32 | Nil = nil, *, packing_mode = PackingMode::AutoSized)","args_html":"(width : Int32 | Nil = <span class=\"n\">nil</span>, *, packing_mode = <span class=\"t\">PackingMode</span><span class=\"t\">::</span><span class=\"t\">AutoSized</span>)","location":{"filename":"src/table.cr","line_number":921,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L921"},"def":{"name":"pack","args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"packing_mode","default_value":"PackingMode::AutoSized","external_name":"packing_mode","restriction":""}],"splat_index":1,"visibility":"Public","body":"packit(width, packing_mode, column_list)"}},{"html_id":"pack(width:Int32|Nil=nil,*,packing_mode=PackingMode::AutoSized,except:LabelType|Array(LabelType))-instance-method","name":"pack","doc":"`pack` method (2. displayable columns with exceptions)","summary":"<p><code><a href=\"../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cpacking_mode%3DPackingMode%3A%3AAutoSized%29-instance-method\">#pack</a></code> method (2.</p>","abstract":false,"args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"packing_mode","default_value":"PackingMode::AutoSized","external_name":"packing_mode","restriction":""},{"name":"except","external_name":"except","restriction":"LabelType | Array(LabelType)"}],"args_string":"(width : Int32 | Nil = nil, *, packing_mode = PackingMode::AutoSized, except : LabelType | Array(LabelType))","args_html":"(width : Int32 | Nil = <span class=\"n\">nil</span>, *, packing_mode = <span class=\"t\">PackingMode</span><span class=\"t\">::</span><span class=\"t\">AutoSized</span>, except : <a href=\"../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../Tablo/LabelType.html\">LabelType</a>))","location":{"filename":"src/table.cr","line_number":928,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L928"},"def":{"name":"pack","args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"packing_mode","default_value":"PackingMode::AutoSized","external_name":"packing_mode","restriction":""},{"name":"except","external_name":"except","restriction":"LabelType | Array(LabelType)"}],"splat_index":1,"visibility":"Public","body":"if except.is_a?(Array)\nelse\n  except = [except]\nend\nexcept.each do |key|\n  if column_registry.has_key?(key)\n  else\n    raise(Error::LabelNotFound.new(\"Pack 'except' error : unknown column label <#{key}>\"))\n  end\nend\ncolumn_labels = column_registry.keys - except\ncolumns = column_labels.map do |label|\n  column_registry[label]\nend\npackit(width, packing_mode, columns)\n"}},{"html_id":"pack(width:Int32|Nil=nil,*,packing_mode=PackingMode::AutoSized,only:LabelType|Array(LabelType))-instance-method","name":"pack","doc":"`pack` method (3. displayable and selected columns only)","summary":"<p><code><a href=\"../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cpacking_mode%3DPackingMode%3A%3AAutoSized%29-instance-method\">#pack</a></code> method (3.</p>","abstract":false,"args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"packing_mode","default_value":"PackingMode::AutoSized","external_name":"packing_mode","restriction":""},{"name":"only","external_name":"only","restriction":"LabelType | Array(LabelType)"}],"args_string":"(width : Int32 | Nil = nil, *, packing_mode = PackingMode::AutoSized, only : LabelType | Array(LabelType))","args_html":"(width : Int32 | Nil = <span class=\"n\">nil</span>, *, packing_mode = <span class=\"t\">PackingMode</span><span class=\"t\">::</span><span class=\"t\">AutoSized</span>, only : <a href=\"../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../Tablo/LabelType.html\">LabelType</a>))","location":{"filename":"src/table.cr","line_number":944,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L944"},"def":{"name":"pack","args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"packing_mode","default_value":"PackingMode::AutoSized","external_name":"packing_mode","restriction":""},{"name":"only","external_name":"only","restriction":"LabelType | Array(LabelType)"}],"splat_index":1,"visibility":"Public","body":"if only.is_a?(Array)\nelse\n  only = [only]\nend\nonly.each do |key|\n  if column_registry.has_key?(key)\n  else\n    raise(Error::LabelNotFound.new(\"Pack 'only' error : unknown column label <#{key}>\"))\n  end\nend\ncolumns = only.map do |label|\n  column_registry[label]\nend\npackit(width, packing_mode, columns)\n"}},{"html_id":"reset_sources(tosrc:Enumerable(T))-instance-method","name":"reset_sources","doc":"Returns the sources enumerable\n\nReplaces existing data source with a new one. <br />\n_(This could be seen as a hack to do some special form of pagination !)_\n\n_Mandatory positional parameter_\n\n- `src`: type is `Enumerable(T) (Where T is the same type as at table initialization)","summary":"<p>Returns the sources enumerable</p>","abstract":false,"args":[{"name":"src","external_name":"to","restriction":"Enumerable(T)"}],"args_string":"(to src : Enumerable(T))","args_html":"(to src : Enumerable(T))","location":{"filename":"src/table.cr","line_number":356,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L356"},"def":{"name":"reset_sources","args":[{"name":"src","external_name":"to","restriction":"Enumerable(T)"}],"visibility":"Public","body":"self.child = nil\nself.row_count = src.size\nself.sources = src\n"}},{"html_id":"sources-instance-method","name":"sources","abstract":false,"location":{"filename":"src/table.cr","line_number":49,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L49"},"def":{"name":"sources","visibility":"Public","body":"@sources"}},{"html_id":"summary-instance-method","name":"summary","doc":"Returns a previously defined summary table","summary":"<p>Returns a previously defined summary table</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":648,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L648"},"def":{"name":"summary","visibility":"Public","body":"self.child.as(ATable)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Returns the table as a formatted string","summary":"<p>Returns the table as a formatted string</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/table.cr","line_number":653,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L653"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if column_registry.empty?\n  io << \"\"\nelse\n  if column_groups.empty?\n  else\n    if column_groups.flatten.size != column_list.size\n      add_group(:dummy_last_group, header: \"\")\n    end\n  end\n  rows = map(&.to_s)\n  io << (join_lines(rows))\nend\nif used_columns.indexes.empty?\nelse\n  used_columns.indexes.clear\n  used_columns.reordered = false\n  restore_group_context\nend\n"}},{"html_id":"total_table_width-instance-method","name":"total_table_width","doc":"returns the total actual width of the table as a whole","summary":"<p>returns the total actual width of the table as a whole</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":1242,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1242"},"def":{"name":"total_table_width","visibility":"Public","body":"(widths_sum + padding_widths_sum) + border_widths_sum"}},{"html_id":"transpose(opts)-instance-method","name":"transpose","abstract":false,"args":[{"name":"opts","external_name":"opts","restriction":""}],"args_string":"(opts)","args_html":"(opts)","location":{"filename":"src/table.cr","line_number":1053,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1053"},"def":{"name":"transpose","args":[{"name":"opts","external_name":"opts","restriction":""}],"visibility":"Public","body":"transpose(**opts)"}},{"html_id":"transpose(**opts)-instance-method","name":"transpose","doc":"`transpose(opts = {})` returns a Tablo::Table instance\n\nThe `transpose` method creates a new Tablo::Table from the current\ntable, transposed, i.e.  rotated 90 degrees with respect to the current\ntable, so that the header names of the current table form the contents\nof the leftmost column of the new table, and each subsequent column\ncorresponds to one of the source elements of the current table, the\nheader of that column being the string value of that element.\n\nExample:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([-1, 0, 1]) do |t|\n  t.add_column(\"Even?\", &.even?)\n  t.add_column(\"Odd?\", &.odd?)\n  t.add_column(\"Abs\", &.abs)\nend.transpose\nputs table\n ```\n\n ```\n+-------+--------------+--------------+--------------+\n|       |      -1      |       0      |       1      |\n+-------+--------------+--------------+--------------+\n| Even? |     false    |     true     |     false    |\n| Odd?  |     true     |     false    |     true     |\n| Abs   |            1 |            0 |            1 |\n+-------+--------------+--------------+--------------+\n ```\nBy default, the transposed table inherits all the parameters of the\ncurrent table, with their values, except those appearing in the `opts`\nparameter of the `transpose` method with a different value.\n\nThese parameters apply to all columns, with one notable exception: the\nfirst column, the leftmost, is special, as it is created from the column\nheaders (field names) of the current table and therefore has its own\nwidth and alignment parameters, namely:\n- `field_names_header_alignment`: default value = `nil`, i.e. alignment\n  depends on the body data type, in this case, a left-aligned string.\n- `field_names_body_alignment`: default value = `nil`, i.e. dependent on\n  data type, i.e. a character string, left-aligned\n- `field_names_width`: default value = nil, triggering optimal width\n  calculation based on content\n\n Two other parameters complete the transposed table:\n- `field_names_header`: default value = `nil`, replaced by an empty\n  character string\n- `body_headers` : default value = `nil`, which returns the current\n  value of `source` in each column\n\nAll these values can be modified in the `opts` parameter, according to\ntheir data type.\n\nHowever, `body_headers` is a special case: if it contains a character\nstring, it will be rendered as such, unless it contains the integer\ndisplay format `%d`, which will then be replaced by the original row number.\n\nModified previous example:\n ```\nrequire \"tablo\"\ntable = Tablo::Table.new([-1, 0, 1],\n  header_alignment: Tablo::Justify::Center,\n  body_alignment: Tablo::Justify::Center) do |t|\n  t.add_column(\"Even?\", &.even?)\n  t.add_column(\"Odd?\", &.odd?)\n  t.add_column(\"Abs\", &.abs)\nend.transpose(\n  field_names_header_alignment: Tablo::Justify::Right,\n  field_names_body_alignment: Tablo::Justify::Right,\n  field_names_header: \"Field names\",\n  body_headers: \"Row #%d content\"\n)\nputs table\n ```\n\n ```\n+-------+--------------+--------------+--------------+\n| Field |    Row #0    |    Row #1    |    Row #2    |\n| names |    content   |    content   |    content   |\n+-------+--------------+--------------+--------------+\n| Even? |     false    |     true     |     false    |\n|  Odd? |     true     |     false    |     true     |\n|   Abs |       1      |       0      |       1      |\n+-------+--------------+--------------+--------------+\n ```","summary":"<p><code><a href=\"../Tablo/Table.html#transpose%28opts%29-instance-method\">#transpose(opts = {})</a></code> returns a Tablo::Table instance</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":1142,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1142"},"def":{"name":"transpose","double_splat":{"name":"opts","external_name":"opts","restriction":""},"visibility":"Public","body":"inherited_attributes = {title: title, subtitle: subtitle, footer: footer, border: border, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, width: width, header_frequency: header_frequency, row_divider_frequency: row_divider_frequency, wrap_mode: wrap_mode, header_wrap: header_wrap, body_wrap: body_wrap, masked_headers: masked_headers?, omit_group_header_rule: omit_group_header_rule?, omit_last_rule: omit_last_rule?}\ndefault_extra_opts = {field_names_header_alignment: nil, field_names_body_alignment: nil, field_names_width: nil, field_names_header: nil, body_headers: nil}\nif opts.nil?\n  initializer_opts = inherited_attributes\n  extra_opts = default_extra_opts\nelse\n  initializer_opts = Util.update(inherited_attributes, from: opts)\n  extra_opts = Util.update(default_extra_opts, from: opts)\nend\nfields = column_registry.values\ntable = Table.new(fields, **initializer_opts) do |t|\n  width_opt = extra_opts[:field_names_width]\n  field_names_width = width_opt.nil? ? fields.map do |f|\n    f.header.size\n  end.max : width_opt\n  header = extra_opts[:field_names_header]\n  header = header.nil? ? \"\" : header.as(String)\n  t.add_column(0, body_alignment: extra_opts[:field_names_body_alignment], header: header, header_alignment: extra_opts[:field_names_header_alignment], width: field_names_width, &.header)\n  sources.each_with_index do |source, i|\n    header = extra_opts[:body_headers]\n    header = if header.nil?\n      source.to_s\n    else\n      if header =~ (/%d/)\n        \"#{header % i}\"\n      else\n        \"#{header}\"\n      end\n    end\n    t.add_column(i + 1, header: header) do |original_column|\n      original_column.body_cell_value(source, row_index: i)\n    end\n  end\nend\ntable\n"}},{"html_id":"using_column_indexes(*indexes,reordered=false)-instance-method","name":"using_column_indexes","abstract":false,"args":[{"name":"indexes","external_name":"indexes","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"args_string":"(*indexes, reordered = false)","args_html":"(*indexes, reordered = <span class=\"n\">false</span>)","location":{"filename":"src/table.cr","line_number":1288,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1288"},"def":{"name":"using_column_indexes","args":[{"name":"indexes","external_name":"indexes","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"splat_index":0,"visibility":"Public","body":"if indexes.empty?\n  raise(Error::InvalidValue.new(\"No column index given\"))\nend\nused_columns.reordered = reordered\nindex_range = 0..(column_registry.size - 1)\nindexes.each do |e|\n  case e\n  when Int32\n    if !(e.in?(index_range))\n      raise(Error::InvalidColumnIndex.new(\"No such column index <#{e}>\"))\n    end\n    used_columns.indexes << e\n  when Tuple(Int32, Int32)\n    bg = e[0]\n    if !(bg.in?(index_range))\n      raise(Error::InvalidColumnIndex.new(\"No such column index <#{bg}>\"))\n    end\n    nd = e[1]\n    if !(nd.in?(index_range))\n      raise(Error::InvalidColumnIndex.new(\"No such column index <#{nd}>\"))\n    end\n    if bg > nd\n      bg.downto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    else\n      bg.upto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    end\n  else\n    raise(Error::InvalidColumnIndex.new(\"<#{e}> is not a valid index\"))\n  end\nend\ndeal_with_groups\nself\n"}},{"html_id":"using_columns(*cols,reordered=false)-instance-method","name":"using_columns","abstract":false,"args":[{"name":"cols","external_name":"cols","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"args_string":"(*cols, reordered = false)","args_html":"(*cols, reordered = <span class=\"n\">false</span>)","location":{"filename":"src/table.cr","line_number":1259,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L1259"},"def":{"name":"using_columns","args":[{"name":"cols","external_name":"cols","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"splat_index":0,"visibility":"Public","body":"if cols.empty?\n  raise(Error::InvalidValue.new(\"No column given\"))\nend\nused_columns.reordered = reordered\ncols.each do |e|\n  case e\n  when LabelType\n    index = column_registry.keys.index(e)\n    if index.nil?\n      raise(Error::LabelNotFound.new(\"No such column <#{e}>\"))\n    end\n    used_columns.indexes << index\n  when Tuple(LabelType, LabelType)\n    bg = column_registry.keys.index(e[0])\n    if bg.nil?\n      raise(Error::LabelNotFound.new(\"No such column <#{e[0]}>\"))\n    end\n    nd = column_registry.keys.index(e[1])\n    if nd.nil?\n      raise(Error::LabelNotFound.new(\"No such column <#{e[1]}>\"))\n    end\n    if bg > nd\n      bg.downto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    else\n      bg.upto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    end\n  end\nend\ndeal_with_groups\nself\n"}}],"macros":[{"html_id":"initialize(block_given)-macro","name":"initialize","doc":"The `initialize` macro generates two `initialize' methods, one with block_given = true\nand one with block_given = false","summary":"<p>The <code><a href=\"../Tablo/Table.html#initialize%28block_given%29-macro\">initialize</a></code> macro generates two `initialize' methods, one with block_given = true and one with block_given = false</p>","abstract":false,"args":[{"name":"block_given","external_name":"block_given","restriction":""}],"args_string":"(block_given)","args_html":"(block_given)","location":{"filename":"src/table.cr","line_number":70,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L70"},"def":{"name":"initialize","args":[{"name":"block_given","external_name":"block_given","restriction":""}],"visibility":"Public","body":"      def initialize(@sources : Enumerable(T), *,\n        @title : Heading::Title = Config.title,\n        @subtitle : Heading::SubTitle = Config.subtitle,\n        @footer : Heading::Footer = Config.footer,\n        \n#\n\n        @border : Border = Border.new(Config.border_definition, Config.border_styler),\n        \n#\n\n        @group_alignment : Justify = Config.group_alignment,\n        @group_formatter : Cell::Text::Formatter = Config.group_formatter,\n        @group_styler : Cell::Text::Styler = Config.group_styler,\n        \n#\n\n        @header_alignment : Justify? = Config.header_alignment,\n        @header_formatter : Cell::Data::Formatter = Config.header_formatter,\n        @header_styler : Cell::Data::Styler = Config.header_styler,\n        \n#\n\n        @body_alignment : Justify? = Config.body_alignment,\n        @body_formatter : Cell::Data::Formatter = Config.body_formatter,\n        @body_styler : Cell::Data::Styler = Config.body_styler,\n        \n#\n\n        @left_padding : Int32 = Config.left_padding,\n        @right_padding : Int32 = Config.right_padding,\n        @padding_character : String = Config.padding_character,\n        @truncation_indicator : String = Config.truncation_indicator,\n        @width : Int32 = Config.width,\n        \n#\n\n        @header_frequency : Int32? = Config.header_frequency,\n        @row_divider_frequency : Int32? = Config.row_divider_frequency ,\n        @wrap_mode : WrapMode = Config.wrap_mode,\n        @header_wrap : Int32? = Config.header_wrap,\n        @body_wrap : Int32? = Config.body_wrap,\n        \n#\n\n        @masked_headers  : Bool = Config.masked_headers?,\n        @omit_group_header_rule : Bool = Config.omit_group_header_rule?,\n        \n{% if block_given %}\n        @omit_last_rule : Bool = Config.omit_last_rule?, &)\n        {% else %}\n        @omit_last_rule : Bool = Config.omit_last_rule?)\n        {% end %}\n\n\n        self.row_count = sources.size\n        \n{% if block_given == true %}\n          yield self\n        {% end %}\n\n        \n# Table checks\n\n        check_header_frequency\n        check_row_divider_frequency\n        check_header_wrap\n        check_body_wrap\n        \n# Table & column checks\n\n        check_width(width)\n        check_padding(left_padding)\n        check_padding(right_padding)\n        check_padding_character(padding_character)\n        check_truncation_indicator(truncation_indicator)\n      \nend\n    \n"}}],"types":[{"html_id":"tablo/Tablo/Table/PackingMode","path":"Tablo/Table/PackingMode.html","kind":"enum","full_name":"Tablo::Table::PackingMode","name":"PackingMode","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/table.cr","line_number":842,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L842"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"InitialWidths","name":"InitialWidths","value":"0","doc":"Packing starts with initial widths, as set by default or at each column\ninitialization","summary":"<p>Packing starts with initial widths, as set by default or at each column initialization</p>"},{"id":"CurrentWidths","name":"CurrentWidths","value":"1","doc":"Packing starts with current widths, as set initially or modified by a\nprevious pack operation","summary":"<p>Packing starts with current widths, as set initially or modified by a previous pack operation</p>"},{"id":"AutoSized","name":"AutoSized","value":"2","doc":"Packing optimizes each column width, shroinking or expanding it, so that\nit can display whole contents without line break","summary":"<p>Packing optimizes each column width, shroinking or expanding it, so that it can display whole contents without line break</p>"}],"namespace":{"html_id":"tablo/Tablo/Table","kind":"class","full_name":"Tablo::Table(T)","name":"Table"},"doc":"`enum` to define how packing is done (see `Table.pack`)","summary":"<p><code>enum</code> to define how packing is done (see <code><a href=\"../../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cpacking_mode%3DPackingMode%3A%3AAutoSized%29-instance-method\">Table.pack</a></code>)</p>","instance_methods":[{"html_id":"auto_sized?-instance-method","name":"auto_sized?","abstract":false,"location":{"filename":"src/table.cr","line_number":851,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L851"},"def":{"name":"auto_sized?","visibility":"Public","body":"self == AutoSized"}},{"html_id":"current_widths?-instance-method","name":"current_widths?","abstract":false,"location":{"filename":"src/table.cr","line_number":848,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L848"},"def":{"name":"current_widths?","visibility":"Public","body":"self == CurrentWidths"}},{"html_id":"initial_widths?-instance-method","name":"initial_widths?","abstract":false,"location":{"filename":"src/table.cr","line_number":845,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L845"},"def":{"name":"initial_widths?","visibility":"Public","body":"self == InitialWidths"}}]},{"html_id":"tablo/Tablo/Table/UsedColumns","path":"Tablo/Table/UsedColumns.html","kind":"struct","full_name":"Tablo::Table::UsedColumns","name":"UsedColumns","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/table.cr","line_number":26,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L26"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Table","kind":"class","full_name":"Tablo::Table(T)","name":"Table"},"constructors":[{"html_id":"new(reordered:Bool,indexes:Array(Int32))-class-method","name":"new","abstract":false,"args":[{"name":"reordered","external_name":"reordered","restriction":"Bool"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int32)"}],"args_string":"(reordered : Bool, indexes : Array(Int32))","args_html":"(reordered : Bool, indexes : Array(Int32))","location":{"filename":"src/table.cr","line_number":29,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L29"},"def":{"name":"new","args":[{"name":"reordered","external_name":"reordered","restriction":"Bool"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(reordered, indexes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"indexes:Array(Int32)-instance-method","name":"indexes","abstract":false,"location":{"filename":"src/table.cr","line_number":27,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L27"},"def":{"name":"indexes","visibility":"Public","body":"@indexes"}},{"html_id":"indexes=(indexes:Array(Int32))-instance-method","name":"indexes=","abstract":false,"args":[{"name":"indexes","external_name":"indexes","restriction":"::Array(::Int32)"}],"args_string":"(indexes : Array(Int32))","args_html":"(indexes : Array(Int32))","location":{"filename":"src/table.cr","line_number":27,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L27"},"def":{"name":"indexes=","args":[{"name":"indexes","external_name":"indexes","restriction":"::Array(::Int32)"}],"visibility":"Public","body":"@indexes = indexes"}},{"html_id":"reordered:Bool-instance-method","name":"reordered","abstract":false,"location":{"filename":"src/table.cr","line_number":27,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L27"},"def":{"name":"reordered","visibility":"Public","body":"@reordered"}},{"html_id":"reordered=(reordered:Bool)-instance-method","name":"reordered=","abstract":false,"args":[{"name":"reordered","external_name":"reordered","restriction":"::Bool"}],"args_string":"(reordered : Bool)","args_html":"(reordered : Bool)","location":{"filename":"src/table.cr","line_number":27,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/table.cr#L27"},"def":{"name":"reordered=","args":[{"name":"reordered","external_name":"reordered","restriction":"::Bool"}],"visibility":"Public","body":"@reordered = reordered"}}]}]},{"html_id":"tablo/Tablo/Util","path":"Tablo/Util.html","kind":"module","full_name":"Tablo::Util","name":"Util","abstract":false,"locations":[{"filename":"src/util.cr","line_number":2,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L2"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"class_methods":[{"html_id":"dot_align(value,dec,mode:DotAlign=DotAlign::DotZero)-class-method","name":"dot_align","abstract":false,"args":[{"name":"value","external_name":"value","restriction":""},{"name":"dec","external_name":"dec","restriction":""},{"name":"mode","default_value":"DotAlign::DotZero","external_name":"mode","restriction":"DotAlign"}],"args_string":"(value, dec, mode : DotAlign = DotAlign::DotZero)","args_html":"(value, dec, mode : <a href=\"../Tablo/Util/DotAlign.html\">DotAlign</a> = <span class=\"t\">DotAlign</span><span class=\"t\">::</span><span class=\"t\">DotZero</span>)","location":{"filename":"src/util.cr","line_number":199,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L199"},"def":{"name":"dot_align","args":[{"name":"value","external_name":"value","restriction":""},{"name":"dec","external_name":"dec","restriction":""},{"name":"mode","default_value":"DotAlign::DotZero","external_name":"mode","restriction":"DotAlign"}],"visibility":"Public","body":"if dec <= 0\n  dec = 1\nend\nbytes = (\"%.#{dec}f\" % value).to_slice.dup\npos = bytes.size - 1\nchr = bytes[pos]\nloop do\n  chr_prev = bytes[pos - 1]\n  if chr == 48_u8\n    if chr_prev == 48_u8\n      bytes[pos] = 32_u8\n    else\n      if chr_prev == 46_u8\n        case mode\n        in DotAlign::DotZero\n          break\n        in DotAlign::Dot\n          bytes[pos] = 32_u8\n          break\n        in DotAlign::Blank, DotAlign::Empty\n          bytes[pos] = 32_u8\n          bytes[pos - 1] = 32_u8\n          if mode == DotAlign::Empty\n            if (bytes[pos - 2] == 48_u8) && ((pos - 2) == 0)\n              bytes[pos - 2] = 32_u8\n            end\n          end\n          break\n        end\n      else\n        bytes[pos] = 32_u8\n        break\n      end\n    end\n  else\n    break\n  end\n  pos = pos - 1\n  chr = chr_prev\nend\nString.new(bytes)\n"}},{"html_id":"stretch(str:String,width:Int32,insert_char:Char='',gap:Int32|Nil=nil,left_margin:String=\"\",right_margin:String=\"\")-class-method","name":"stretch","doc":"The stretch method is designed to optimize the filling of a text area,\npossibly multi-line, by inserting one or more separators (by default\na space) between each character of the initial string.","summary":"<p>The stretch method is designed to optimize the filling of a text area, possibly multi-line, by inserting one or more separators (by default a space) between each character of the initial string.</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"insert_char","default_value":"' '","external_name":"insert_char","restriction":"Char"},{"name":"gap","default_value":"nil","external_name":"gap","restriction":"Int32 | ::Nil"},{"name":"left_margin","default_value":"\"\"","external_name":"left_margin","restriction":"String"},{"name":"right_margin","default_value":"\"\"","external_name":"right_margin","restriction":"String"}],"args_string":"(str : String, width : Int32, insert_char : Char = ' ', gap : Int32 | Nil = nil, left_margin : String = \"\", right_margin : String = \"\")","args_html":"(str : String, width : Int32, insert_char : Char = <span class=\"s\">&#39; &#39;</span>, gap : Int32 | Nil = <span class=\"n\">nil</span>, left_margin : String = <span class=\"s\">&quot;&quot;</span>, right_margin : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/util.cr","line_number":93,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L93"},"def":{"name":"stretch","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int32"},{"name":"insert_char","default_value":"' '","external_name":"insert_char","restriction":"Char"},{"name":"gap","default_value":"nil","external_name":"gap","restriction":"Int32 | ::Nil"},{"name":"left_margin","default_value":"\"\"","external_name":"left_margin","restriction":"String"},{"name":"right_margin","default_value":"\"\"","external_name":"right_margin","restriction":"String"}],"visibility":"Public","body":"stretched = ->(line : String, idgap : Int32) do\n  final_length = line.size + ((line.size - 1) * idgap)\n  ary_dest = Array(Char).new(final_length, insert_char)\n  pos = 0\n  line.chars.each.with_index do |c, i|\n    ary_dest[pos] = c\n    pos = pos + (1 + idgap)\n  end\n  ary_dest.join\nend\nrx = /^([^,;]+)*[,;]*(.+)*$/\nlm_first, lm_last = (((left_margin.match(rx)).as(Regex::MatchData)).to_a.map(&.to_s))[1, 2]\nrm_last, rm_first = (((right_margin.match(rx)).as(Regex::MatchData)).to_a.map(&.to_s))[1, 2]\nif rm_first.empty?\n  rm_last, rm_first = rm_first, rm_last\nend\nget_margins = -> do\n  ((lm_first.size + rm_first.size) + lm_last.size) + rm_last.size\nend\nincrease_stretching_width = -> do\n  first = false\n  if lm_first.size > 0\n    lm_first = lm_first[0..-2]\n    first = true\n  end\n  if rm_first.size > 0\n    rm_first = rm_first[1..-1]\n    first = true\n  end\n  last = false\n  if first\n  else\n    if lm_last.size > 0\n      lm_last = lm_last[1..-1]\n      last = true\n    end\n    if rm_last.size > 0\n      rm_last = rm_last[0..-2]\n      last = true\n    end\n  end\n  first | last\nend\nstretching_width = width - get_margins.call\nideal_gap = str.empty? ? 0 : Int32::MAX\nlargest_line = \"\"\nstr.each_line do |line|\n  if line.size > largest_line.size\n    largest_line = line\n  end\n  max_gap = line.size == 1 ? 0 : (stretching_width - line.size) // (line.size - 1)\n  if max_gap < 0\n    max_gap = 0\n  end\n  ideal_gap = [ideal_gap, max_gap].min\nend\nif gap.nil?\nelse\n  ideal_gap = ideal_gap > gap ? gap : ideal_gap\nend\nwhile ((stretched.call(largest_line, ideal_gap)).size + get_margins.call) > width\n  if increase_stretching_width.call\n  else\n    break\n  end\n  stretching_width = width - get_margins.call\nend\narrout = [] of String\nstr.each_line do |line|\n  if line =~ (/^\\s*$/)\n    xline = \"\"\n  else\n    if line.size == 1\n      xline = line\n    else\n      xline = stretched.call(line, ideal_gap)\n    end\n  end\n  lm = lm_first + lm_last\n  rm = rm_last + rm_first\n  arrout << ((lm + (xline.center((width - lm.size) - rm.size))) + rm)\nend\narrout.join(NEWLINE)\n"}},{"html_id":"update(dst:NamedTuple,fromsrc:NamedTuple)-class-method","name":"update","doc":"Update namedtuple (dst) fields from another namedtuple (src) fields\nFields existing in src and missing in dst are ignored\nReturns the updated dst as a new NamedTuple","summary":"<p>Update namedtuple (dst) fields from another namedtuple (src) fields Fields existing in src and missing in dst are ignored Returns the updated dst as a new NamedTuple</p>","abstract":false,"args":[{"name":"dst","external_name":"dst","restriction":"NamedTuple"},{"name":"src","external_name":"from","restriction":"NamedTuple"}],"args_string":"(dst : NamedTuple, from src : NamedTuple)","args_html":"(dst : NamedTuple, from src : NamedTuple)","location":{"filename":"src/util.cr","line_number":6,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L6"},"def":{"name":"update","args":[{"name":"dst","external_name":"dst","restriction":"NamedTuple"},{"name":"src","external_name":"from","restriction":"NamedTuple"}],"visibility":"Public","body":"update_impl(dst, src)"}}],"types":[{"html_id":"tablo/Tablo/Util/DotAlign","path":"Tablo/Util/DotAlign.html","kind":"enum","full_name":"Tablo::Util::DotAlign","name":"DotAlign","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/util.cr","line_number":192,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L192"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Empty","name":"Empty","value":"0"},{"id":"Blank","name":"Blank","value":"1"},{"id":"Dot","name":"Dot","value":"2"},{"id":"DotZero","name":"DotZero","value":"3"}],"namespace":{"html_id":"tablo/Tablo/Util","kind":"module","full_name":"Tablo::Util","name":"Util"},"instance_methods":[{"html_id":"blank?-instance-method","name":"blank?","abstract":false,"location":{"filename":"src/util.cr","line_number":194,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L194"},"def":{"name":"blank?","visibility":"Public","body":"self == Blank"}},{"html_id":"dot?-instance-method","name":"dot?","abstract":false,"location":{"filename":"src/util.cr","line_number":195,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L195"},"def":{"name":"dot?","visibility":"Public","body":"self == Dot"}},{"html_id":"dot_zero?-instance-method","name":"dot_zero?","abstract":false,"location":{"filename":"src/util.cr","line_number":196,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L196"},"def":{"name":"dot_zero?","visibility":"Public","body":"self == DotZero"}},{"html_id":"empty?-instance-method","name":"empty?","abstract":false,"location":{"filename":"src/util.cr","line_number":193,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/util.cr#L193"},"def":{"name":"empty?","visibility":"Public","body":"self == Empty"}}]}]},{"html_id":"tablo/Tablo/WrapMode","path":"Tablo/WrapMode.html","kind":"enum","full_name":"Tablo::WrapMode","name":"WrapMode","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":94,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L94"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Rune","name":"Rune","value":"0"},{"id":"Word","name":"Word","value":"1"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Line break settings :\n- Rune: allowed between characters\n- Word: allowed between words","summary":"<p>Line break settings : - Rune: allowed between characters - Word: allowed between words</p>","instance_methods":[{"html_id":"rune?-instance-method","name":"rune?","abstract":false,"location":{"filename":"src/types.cr","line_number":95,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L95"},"def":{"name":"rune?","visibility":"Public","body":"self == Rune"}},{"html_id":"word?-instance-method","name":"word?","abstract":false,"location":{"filename":"src/types.cr","line_number":96,"url":"https://github.com/hutou/tablo/blob/7a3c2d6003df35f6887544bd39ef7dc9fb6602e1/src/types.cr#L96"},"def":{"name":"word?","visibility":"Public","body":"self == Word"}}]}]}]}}