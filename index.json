{"repository_name":"tablo","body":"[<img src=\"assets/images/logo.png\" alt=\"Logo\"/>](https://github.com/hutou/tablo/tree/development?tab=readme-ov-file)\n\n## Table of contents\n\n- [Getting started](#getting-started)\n- [Borders](#borders)\n- [Row types](#row-types)\n  - [Header and Body](#header-and-body)\n  - [Group](#group)\n  - [Headings](#headings)\n- [Rules](#rules)\n- [Display frequency and repeated title](#display-frequency-and-repeated-title)\n- [Extracting - Formatting - Styling](#extracting---formatting---styling)\n  - [Extracting](#extracting)\n  - [Formatting](#formatting)\n  - [Styling](#styling)\n- [Packing](#packing)\n- [Summary](#summary)\n- [Transpose](#transpose)\n\n## Getting started\n\nIn this tutorial, we'll start with a very simple example, which we'll build on\nas we go along to gradually discover all the possibilities offered by the\nTablo library.\n\nHere's a first look at how to use Tablo to lay out a simple table from an array\nof integers.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\nend\n\nputs table\n```\n\nor\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3])\ntable.add_column(\"itself\", &.itself)\ntable.add_column(2, header: \"Double\") {|n| n * 2}\ntable.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n\nputs table\n```\n\noutput:\n\n```\n+--------------+--------------+--------------+\n|       itself |       Double | String       |\n+--------------+--------------+--------------+\n|            1 |            2 | A            |\n|            2 |            4 | BB           |\n|            3 |            6 | CCC          |\n+--------------+--------------+--------------+\n```\n\nA great deal of information can already be extracted from this simple example:\n\n- The only parameter required to create the table is the data source (the\n  array of integers), but to produce a result, you obviously need to add\n  columns.\n- Any number of columns can be defined, each requiring an identifier and\n  a proc for extracting data from the source and, if necessary, modifying\n  its type and value.\n- The column identifier can be of type `String`, `Integer` or `Symbol`. By default,\n  the column header takes the value of the identifier, unless the optional\n  `header` parameter is used.\n- Columns are the same width.\n- We can see two types of row: header and body.\n- Columns of numbers are aligned to the right, and columns of text to the left, for\n  both headers and body.\n- Default borders use the classic `Ascii` type.\n\n## Borders\n\nThe Border structure lets you create frames around rows and columns, using\nascii and/or graphic characters.\n\nA set of predefined borders is available, including `Ascii`,\n`ReducedAscii` and `Fancy`, but you can also define your own border\ntypes (see API for details).\n\nDefault border type is `Ascii`, but to change a table's border type,\nsimply assign the desired definition to the `border` parameter when\ninitializing the table. So, for example, to set the `ReducedAscii`\nborder type, you can do:\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(Tablo::BorderName::ReducedAscii) do |t|\n```\n\nor even:\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(:reduced_ascii)) do |t|\n```\n\n```text\n-------------- -------------- --------------\n       itself         Double   String\n-------------- -------------- --------------\n            1              2   A\n            2              4   BB\n            3              6   CCC\n-------------- -------------- --------------\n```\n\n## Row types\n\n### Header and Body\n\nThe Header and Body data row types form the basis of table formatting. Other\ntypes can be optionally added to establish the final layout: the Group row\ntype and Heading row types (Title, SubTitle and Footer).\n\n### Group\n\nAdjacent columns can share a common header, above the column headers\nthemselves. This common header constitutes a Group row type.\n\nTo create a Group row, simply define a common header after each set of\nadjacent columns to be grouped.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") {|n| n * 2}\n  t.add_group(\"Numbers\")\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n  t.add_group(\"Text\")\nend\n\nputs table\n```\n\nOutput:\n\n```\n+-----------------------------+--------------+\n|           Numbers           |     Text     |\n+--------------+--------------+--------------+\n|       itself |       Double | String       |\n+--------------+--------------+--------------+\n|            1 |            2 | A            |\n|            2 |            4 | BB           |\n|            3 |            6 | CCC          |\n+--------------+--------------+--------------+\n```\n\nBy default, Group headers are centered, but their alignment can be modified\nglobally at table initialization time with the `group_alignment` parameter,\nor locally for a given group with the `alignment` parameter.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        group_alignment: Tablo::Justify::Left) do |t|\n```\n\nOutput:\n\n```\n| Numbers                     | Text         |\n```\n\nor\n\n```crystal\nt.add_group(\"Text\", alignment: Tablo::Justify::Left)\n```\n\nOutput:\n\n```\n|           Numbers           | Text         |\n```\n\nNote that the group header can be empty, and that an empty group header is\nautomatically created if the last column group is not specified.\n\nGroup and header are intimately linked and only separated by a horizontal\nline. For custom rendering, this line can be omitted by setting the Table\n`omit_group_header_rule` parameter to `true`.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3],\n        omit_group_header_rule: true) do |t|\n    t.add_column(\"itself\", &.itself)\n    t.add_column(2, header: \"Double\") {|n| n * 2}\n    t.add_group(\"Numbers\")\n    t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n    t.add_column(:column_4, header: \"Boolean\") {|n| n.even?}\n    t.add_group(\"Other data types\")\nend\n\nputs table\n```\n\nOutput:\n\n```\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\n### Headings\n\nA formatted table can optionally include a title, subtitle and footer. Each of\nthese elements is of type Title, SubTitle or Footer, inherited from the\nabstract class Heading (see API).\n\nBy default, when the table is initialized, their value is `nil`, so nothing is\ndisplayed.\n\nTo display a title (or subtitle or footer), simply specify its value when\ninitializing the table.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        title: Tablo::Heading.new(\"Data types alignment\")) do |t|\n```\n\nOutput:\n\n```\n                     Data types alignment\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\nThese elements can also be framed, possibly with line breaks before and after\n(defined in the `Heading::Frame` struct initializer as `line_breaks_before` and\n`line_breaks_after` with a value of 0).\n\nThe number of line breaks between adjacent elements is equal to the highest\nvalue between the current element's `line_breaks_after` and the next element's\n`line_breaks_before`.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading.new(\"Data types alignment\",\n    frame: Tablo::Heading::Frame.new(line_breaks_before: 0, line_breaks_after: 2))) do |t|\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\nIn summary, we have 6 types of data rows :\n\n| Type     | Description                                                                                |\n| :------- | :----------------------------------------------------------------------------------------- |\n| Header   | Always displayed, unless `header_frequency:` is `nil` </br> or `masked_headers:` is `true` |\n| Body     | Always displayed                                                                           |\n| Group    | Optional                                                                                   |\n| Title    | Optional                                                                                   |\n| Subtitle | Optional                                                                                   |\n| Footer   | Optional                                                                                   |\n\n## Rules\n\nBetween the different types of rows, there are also different types of\nseparator lines, whose format varies according to the types of rows they\nseparate.\n\nIn the case of framed rows, for example, there may be a single dividing line,\nmaking the rows linked, or on the contrary, there may first be a closing line\nfor the top row, possibly followed by line breaks before the opening line of\nthe bottom row.\n\nThese horizontal rules are formatted by the `horizontal_rule` method of class\nBorder.\n\n## Display frequency and repeated title\n\nAn important parameter in table initialization is `header_frequency:`\n\n- By default, it is set to 0, i.e. rows of data other than body are displayed\n  only once, at the beginning for titles and headers, at the end for the footer.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: 0,\n        title: Tablo::Heading.new(\"Data types alignment\",\n          frame: Tablo::Heading::Frame.new(0, 2)),\n        subtitle: Tablo::Heading.new(\"Only Booleans are centered by default\"),\n        footer: Tablo::Heading.new(\"End of page\")) do |t|\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n                         End of page\n```\n\n- If set to `nil`, only body rows are displayed.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: nil,\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\n- If set to `n` (positive), group or column headers are repeated every `n`\n  rows, as are footers, but titles and subtitles are not repeated.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: 2,\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n+--------------+--------------+--------------+--------------+\n                         End of page\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            3 |            6 | CCC          |     false    |\n|              |              |              |              |\n+--------------+--------------+--------------+--------------+\n                         End of page\n```\n\nHowever, if the title `repeated` parameter is set to `true`, we obtain title and\nsubtitle repetition.\n\n```crystal\ntable = Tablo::Table.new([1, 2, 3],\n        header_frequency: 2,\n        title: Tablo::Heading.new(\"Data types alignment\",\n          frame: Tablo::Heading::Frame.new(0, 2), repeated: true),\n```\n\nOutput:\n\n```\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n+--------------+--------------+--------------+--------------+\n                         End of page\n+-----------------------------------------------------------+\n|                    Data types alignment                   |\n+-----------------------------------------------------------+\n\n            Only Booleans are centered by default\n+-----------------------------+-----------------------------+\n|           Numbers           |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            3 |            6 | CCC          |     false    |\n|              |              |              |              |\n+--------------+--------------+--------------+--------------+\n                         End of page\n```\n\n## Extracting - Formatting - Styling\n\nAt the heart of Tablo's operation lies the Cell, a data structure containing\nall the elements required for display.\n\nA cell, whether fed by data extracted from the source or directly from the\ncode, can span several lines. Even if it initially occupies a single line,\nreducing the column width can result in a cell being displayed over several\nlines.\n\nYou can limit the number of lines displayed by using the `header_wrap` or\n`body_wrap` parameters when initializing the table (These 2 parameters are\nglobal to the table, and cannot be set on individual columns). If the whole\ncell content cannot be displayed due to this restriction, a special character\n(tilde by default) is inserted in the right-hand padding area of the last line\nof the cell (unless right padding is set to 0 for the column).\n\nNote here the use of the `row_divider_frequency` parameter to separate body\nrows\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([\"abc\", \"def\\nghi\\njkl\\nmno\\npqr\", \"xyz\"],\n  border: Tablo::Border.new(\"+++++++++|||---.\"),\n  header_wrap: 2,\n  body_wrap: 3,\n  row_divider_frequency: 1) do |t|\n  t.add_column(\"A\\nfour\\nlines\\ncell\", &.itself)\nend\n\nputs table\n```\n\nOutput:\n\n```\n+--------------+\n| A            |\n| four        ~|\n+--------------+\n| abc          |\n+..............+\n| def          |\n| ghi          |\n| jkl         ~|\n+..............+\n| xyz          |\n+--------------+\n```\n\nIn addition, to have greater control over the line break, we can use the\n`wrap_mode` parameter to choose between `Rune` (Roughly equivalent to\na character) and `Word` when cutting a line.\n\nTo use Tablo with non-Romanic languages, it is mandatory to use the\n`naqviz/uni_char_width` shard so that the width of each grapheme is correctly\nmanaged, without impacting alignment.\n\nTo do this, you need to:\n\n- Add the dependencies to your shard.yml:\n\n```yaml\ndependencies:\n  tablo:\n    github: hutou/tablo\n  uniwidth:\n    github: naqvis/uni_char_width\n```\n\n- Run `shards install`\n- And insert the lines\n\n```crystal\nrequire \"tablo\"\nrequire \"uniwidth\"\n```\n\nat the beginning of your app.\n\n### Extracting\n\nThe cell `value` attribute contains the raw data.\n\nIf directly given as argument to Headings or Group, the cell is a `TextCell`\nas it is not related to source data.\n\nIf extracted from the source (body rows), the cell is of type `DataCell`, and\nthe corresponding column header is also a `DataCell` (as it depends on the\ntype of body `value` for alignment).\n\nThe `coords` attribute, specific to the `DataCell` type, provides access to\nthe cell's coordinates (`row_index` and `column_index`), as well as the\n`body_value`. This information is used to activate conditional formatting and\nstyling.\n\n```crystal\nstruct Cell::Data::Coords\ngetter body_value, row_index, column_index\n    def initialize(@body_value : CellType, @row_index : Int32, @column_index : Int32)\n    end\nend\n```\n\nThe type of `value` is `Tablo::CellType`, which is simply defined as an empty\nmodule restriction type:\n\n```crystal\nmodule Tablo::CellType\nend\n```\n\nThis module is already included in all Crystal main scalar types. To\nuse a (non or less used) scalar type or a user defined class or struct, it is\nmandatory to include it by reopening the class or struct.\n\nFor example, to allow a cell value to contain an array, we could do :\n\n```crystal\nclass Array\n    include Tablo::CellType\nend\n```\n\nand:\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([[1, 2], [3, 4]]) do |t|\n  t.add_column(\"itself\") { |n| n }\nend\n\nputs table\n```\n\nwould output:\n\n```\n+--------------+\n| itself       |\n+--------------+\n| [1, 2]       |\n| [3, 4]       |\n+--------------+\n```\n\n### Formatting\n\nFormatting consists in applying a transformation to the raw data (the `value`)\nto obtain a character string ready to be displayed. The simplest\ntransformation (which is also the one applied by default) is simply a call to\nthe `to_s` method.\n\nUsing a proc `formatter` allows you to customize formatting in a variety of\nways, from using `sprintf` formatting strings for numeric values to various\n`String` methods for text and specific `Tablo::Util` methods for both.\n\nA formatter proc can take four forms : the first two apply equally to TextCell\nand DataCell and are applied unconditionally on `value`.\n\nThe first form expects one parameter (`value`) and the second two: `value` and\n`width` (column width).\n\nHere is an example of the first form:\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(3, header: \"Float\",\n    header_formatter: ->(value : Tablo::CellType) { value.as(String).upcase },\n    body_formatter: ->(value : Tablo::CellType) {\n      \"%.3f\" % value.as(Float)\n    }) { |n| n ** 0.5 }\nend\n\nputs table\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+\n|       itself |       Double |        FLOAT |   <1>\n+--------------+--------------+--------------+\n|            1 |            2 |        1.000 |\n|            2 |            4 |        1.414 |\n|            3 |            6 |        1.732 |\n+--------------+--------------+--------------+\n```\n\n<1> Note that the FLOAT column is aligned to the right, as its alignment is\ngoverned by the type of `value`, which is a float.\n\nIf the formatting were done directly at the data extraction level, `value`\nwould be of type `String` and column would be aligned to the left.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(3, header: \"Float\",\n    header_formatter: ->(value : Tablo::CellType) {\n    value.as(String).upcase }) { |n| \"%.3f\" % (n ** 0.5)\n  }\nend\nputs table\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+\n|       itself |       Double | FLOAT        |\n+--------------+--------------+--------------+\n|            1 |            2 | 1.000        |\n|            2 |            4 | 1.414        |\n|            3 |            6 | 1.732        |\n+--------------+--------------+--------------+\n```\n\nTo illustrate the 2nd form, we will use the `Tablo::Util.stretch` method,\nwhich can be useful on groups or headings.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_group(\"Numbers\",\n    formatter: ->(value : Tablo::CellType, width : Int32) {\n      Tablo::Util.stretch(value.as(String), width, ' ')\n    })\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n  t.add_column(:column_4, header: \"Boolean\") { |n| n.even? }\n  t.add_group(\"Other data types\")\nend\n\nputs table\n```\n\nOutput:\n\n```\n+-----------------------------+-----------------------------+\n|  N   u   m   b   e   r   s  |       Other data types      |\n+--------------+--------------+--------------+--------------+\n|       itself |       Double | String       |    Boolean   |\n+--------------+--------------+--------------+--------------+\n|            1 |            2 | A            |     false    |\n|            2 |            4 | BB           |     true     |\n|            3 |            6 | CCC          |     false    |\n+--------------+--------------+--------------+--------------+\n```\n\nForm 3 and form 4 apply only on DataCell cell types, as they use the\n`coords` parameter to conditionnally format the `value`.\n\nHere is an exemple of form 3 with another method from `Tablo::Util`, which use\nthe `column_index` as formatting condition.\n\n```crystal\nrequire \"tablo\"\n\ntable = Tablo::Table.new([-30.00001, -3.14159, 0.0, 1.470001, 5.78707, 10.0],\n  body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n    case coords.column_index\n    when 1 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::Empty)\n    when 2 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::Blank)\n    when 3 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::Dot)\n    when 4 then Tablo::Util.dot_align(value.as(Float), 4, Tablo::Util::DotAlign::DotZero)\n    else        value.as(Float).to_s\n    end\n  }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"1 - Empty\", &.itself)\n  t.add_column(\"2 - Blank\", &.itself)\n  t.add_column(\"3 - Dot\", &.itself)\n  t.add_column(\"4 - DotZero\", &.itself)\nend\n\nputs table\n```\n\nOutput:\n\n```\n+--------------+--------------+--------------+--------------+--------------+\n|       itself |    1 - Empty |    2 - Blank |      3 - Dot |  4 - DotZero |\n+--------------+--------------+--------------+--------------+--------------+\n|    -30.00001 |     -30      |     -30      |     -30.     |     -30.0    |\n|     -3.14159 |      -3.1416 |      -3.1416 |      -3.1416 |      -3.1416 |\n|          0.0 |              |       0      |       0.     |       0.0    |\n|     1.470001 |       1.47   |       1.47   |       1.47   |       1.47   |\n|      5.78707 |       5.7871 |       5.7871 |       5.7871 |       5.7871 |\n|         10.0 |      10      |      10      |      10.     |      10.0    |\n+--------------+--------------+--------------+--------------+--------------+\n```\n\nIncidentally, this last example displays all the formatting possibilities of\nthe `Tablo::Util.dot_align` method.\n\nCompared to the third form, form 4 also allows the use of the width value. +\nIts usefulness seems less obvious, however.\n\nOverview of the 4 different forms of formatter procs:\n| Forms of formatter procs | Parameter and types, in order |\n| -- | -- |\n| 1st form | `value` : `Tablo::CellType` <br />used by: `TextCell` or `DataCell`|\n| 2nd form | `value` : `Tablo::CellType`, `width` : `Int32` <br />used by: `TextCell` or `DataCell` |\n| 3rd form | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords` <br />used by: `DataCell`|\n| 4th form | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords`, <br />`width` : `Int32` used by: `DataCell` |\n\n### Styling\n\nas they depend on the terminal's capabilities. There are therefore\n2 complementary ways of proceeding:\n\n- play with the mode (underlined, bold, italic...)\n- use color\n\nThis can be done using ANSI code sequences, or preferably, using the\n`colorize` module of the standard library.\n\nIn this section, we'll be using color, altered characters and graphic borders\nwith the Fancy border type. Output will therefore be presented as SVG images,\nso as to guarantee perfect rendering, whatever the medium used for display.\n\nFor styling, there are 5 forms of procs.\n\nThe first uses only the (formatted) content as a parameter, and therefore does not\nallow conditional styling.\n\nLet's look at a simple example, with yellow borders and blue headers.\n\n```crystal\nrequire \"tablo\"\nrequire \"colorize\"\n\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(:fancy, styler: ->(border_char : String) {\n    border_char.colorize(:yellow).to_s\n  }),\n  header_styler: ->(content : String) { content.colorize(:blue).to_s }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\n  t.add_column(:column_4, header: \"Boolean\") { |n| n.even? }\nend\n\nputs table\n```\n\n<p> <img src=\"assets/images/styling_first_form.svg\" width=460> </p>\n\nCool! Let's do now some conditional styling, painting in bold green all values\ngreater than 2 in all numeric columns and underlining the `true` boolean value\nin fourth column: this is the third form of styling.\nJust add, at the table level before `header_styler`, the following lines :\n\n```crystal\nbody_styler: ->(value : Tablo::CellType, content : String) {\n  case value\n  when Int32\n    value > 2 ? content.colorize.fore(:green).mode(:bold).to_s : content\n  else\n    value == true ? content.colorize.mode(:underline).to_s : content\n  end\n},\n```\n\n<p> <img src=\"assets/images/styling_third_form.svg\" width=460> </p>\n\nLet's end with a final example, with a black-and-white look: how do you\ndisplay rows alternately in light gray (with a bit of italics) and dark gray\nto make them easier to read?\n\nThis would be the 4th form.\n\n```crystal\nrequire \"tablo\"\nrequire \"colorize\"\n\ntable = Tablo::Table.new([1, 2, 3, 4, 5],\n  title: Tablo::Heading.new(\"My black and white fancy table\", frame: Tablo::Heading::Frame.new),\n  footer: Tablo::Heading.new(\"End of data\", frame: Tablo::Heading::Frame.new),\n  border: Tablo::Border.new(:fancy, ->(border_char : String) {\n    border_char.colorize(:light_gray).to_s\n  }),\n  body_styler: ->(_value : Tablo::CellType, coords : Tablo::Cell::Data::Coords, content : String) {\n    if coords.row_index.even?\n      \"\\e[3m\" + content.colorize(:light_gray).to_s + \"\\e[0m\"                      <1>\n    else\n      content.colorize.fore(:dark_gray).mode(:bold).to_s\n    end\n  },\n  header_styler: ->(content : String) { content.colorize.mode(:bold).to_s }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(2, header: \"Double\") { |n| n * 2 }\n  t.add_column(:column_3, header: \"String\") { |n| ('@'.ord + n).chr.to_s * n }\nend\n\nputs table\n```\n\n`<1>` From version 1.10 onwards, Crystal does support italic mode, and the use\nof ANSI sequences is given here simply as an example.\n\n<p> <img src=\"assets/images/styling_fourth_form.svg\" width=460> </p>\n\nOverview of the 5 different forms of styler procs:\n\n| Forms of styler procs | Parameter and types, in order                                                                                                                                   |\n| --------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1st form              | `(formatted) content` : `String` <br />used by: `Border`, `TextCell` or `DataCell`                                                                              |\n| 2nd form              | `(formatted) content` : `String`, `line_index` : `Int32` <br /> used by: `TextCell`                                                                             |\n| 3rd form              | `value` : `Tablo::CellType`, `(formatted) content` : `String` <br /> used by: `DataCell`                                                                        |\n| 4th form              | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords`, <br /> `(formatted) content` : `String` used by: `DataCell`                                |\n| 5th form              | `value` : `Tablo::CellType`, `coords` : `Tablo::Cell::Data::Coords`, <br /> `(formatted) content` : `String`, `line_index` : `Int32` <br /> used by: `DataCell` |\n\n## Packing\n\nIn the previous examples, the notion of column width was used. For a better\nunderstanding, the diagram below highlights the structure of a column.\n\n<p> <img src=\"assets/images/column_layout.svg\" width=460> </p>\n\nAs we saw at the start of this tutorial, by default, all columns have the same\nwidth, i.e. 12 characters.\n\nOf course, this value can be modified globally when initializing the table, or\nindividually when defining columns. The same applies to left and right\npadding, as well as to the padding character (a space, by default).\n\nThe border width is 1 character maximum, but can be 0 (i.e. no border) if the\nletter E is used in the border definition string.\n\nThe `pack` method is a welcome aid to table formatting. It accepts\n3 parameters, all optional:\n\n- `width`: total width required for the formatted table. If no `width` is\n  given and if the value of parameter `Config.terminal_capped_width` is true,\n  the value of `width` is read from the size of the terminal, otherwise its\n  value is `nil` and in that case, only `packing_mode == AutoSized` has an\n  effect.\n\n- `packing_mode` : column widths taken as starting point for resizing,\n  possible values are :\n  - `Current` : resizing starts from columns current width\n  - `Initial` : current values are reset to their initial values, at column\n    definition time\n  - `AutoSized` : current values are set to their 'best fit'\n    values, _ie_ they are automatically adapted to their largest content\n- `except` or `only` : (array of) column label(s) to be excluded from\n  being resized (`except`), or, on the contrary, to be selected for\n  packing (`only`).\n\nThe following examples will illustrate the behaviour of the different\nparameters values, starting from the 'standard' one, with all column widths to\ntheir default value : 12 characters.\n\n```crystal\nrequire \"tablo\"\n\ndata = [\n  [1, \"Box\", \"Orange\", \"Elephant\", \"Mont St Michel\"],\n]\ntable = Tablo::Table.new(data) do |t|\n  t.add_column(\"Primes\") { |n| n[0].as(Int32) }\n  t.add_column(2, header: \"Things\") { |n| n[1].as(String) }\n  t.add_column(:fruits, header: \"Fruits\") { |n| n[2].as(String) }\n  t.add_column(3, header: \"Animals\") { |n| n[3].as(String) }\n  t.add_column(\"Famous\\nSites\") { |n| n[4].as(String) }\nend\n\nputs table\nputs \"table width = #{table.total_table_width}\"\n```\n\nTable standard output, using default width values, without any packing:\n\n```\n puts table\n +--------------+--------------+--------------+--------------+--------------+\n |       Primes | Things       | Fruits       | Animals      | Famous       |\n |              |              |              |              | Sites        |\n +--------------+--------------+--------------+--------------+--------------+\n |            1 | Box          | Orange       | Elephant     | Mont St      |\n |              |              |              |              | Michel       |\n +--------------+--------------+--------------+--------------+--------------+\n table width = 76\n```\n\nUsing default `pack` parameters (ie: none !), we get an optimal packing\n\n```\n puts table.pack\n +--------+--------+--------+----------+----------------+\n | Primes | Things | Fruits | Animals  | Famous         |\n |        |        |        |          | Sites          |\n +--------+--------+--------+----------+----------------+\n |      1 | Box    | Orange | Elephant | Mont St Michel |\n +--------+--------+--------+----------+----------------+\n table width = 56\n```\n\nBut using `pack` with same table width (56) on initial widths values gives\na significantly poorer result\n\n```\n puts table.pack(56, packing_mode: Tablo::PackingMode::InitialWidths)\n +----------+----------+----------+----------+----------+\n |   Primes | Things   | Fruits   | Animals  | Famous   |\n |          |          |          |          | Sites    |\n +----------+----------+----------+----------+----------+\n |        1 | Box      | Orange   | Elephant | Mont St  |\n |          |          |          |          | Michel   |\n +----------+----------+----------+----------+----------+\n table width = 56\n```\n\nThis is due to the way Tablo reduces or increases column size. See the\ndescription of the algorithm in the releated section for `Table.pack` in\nAPI.\n\nUsing the `width` parameter, any table width can be obtained, by reducing or\nincreasing the width of each column progressively to reach the desired table\nwidth\n\n```\n puts table.pack(30)\n +-----+-----+-----+-----+----+\n | Pri | Thi | Fru | Ani | Fa |\n | mes | ngs | its | mal | mo |\n |     |     |     | s   | us |\n |     |     |     |     | Si |\n |     |     |     |     | te |\n |     |     |     |     | s  |\n +-----+-----+-----+-----+----+\n |   1 | Box | Ora | Ele | Mo |\n |     |     | nge | pha | nt |\n |     |     |     | nt  | St |\n |     |     |     |     | Mi |\n |     |     |     |     | el |\n +-----+-----+-----+-----+----+\n table width = 30\n```\n\nor\n\n```\n puts table.pack(90)\n +----------------+-----------------+-----------------+-----------------+-----------------+\n |         Primes | Things          | Fruits          | Animals         | Famous          |\n |                |                 |                 |                 | Sites           |\n +----------------+-----------------+-----------------+-----------------+-----------------+\n |              1 | Box             | Orange          | Elephant        | Mont St Michel  |\n +----------------+-----------------+-----------------+-----------------+-----------------+\n table width = 90\n```\n\nThere is, however, a limit to the reduction: each column must be able to\naccommodate at least one character. Here, we're asking for a table width of\n15, but the minimum size to respect this rule is 21!\n\n```\n puts table.pack(15)\n +---+---+---+---+---+\n | P | T | F | A | F |\n | r | h | r | n | a |\n | i | i | u | i | m |\n | m | n | i | m | o |\n | e | g | t | a | u |\n | s | s | s | l | s |\n |   |   |   | s | S |\n |   |   |   |   | i |\n |   |   |   |   | t |\n |   |   |   |   | e |\n |   |   |   |   | s |\n +---+---+---+---+---+\n | 1 | B | O | E | M |\n |   | o | r | l | o |\n |   | x | a | e | n |\n |   |   | n | p | t |\n |   |   | g | h | S |\n |   |   | e | a | t |\n |   |   |   | n | M |\n |   |   |   | t | i |\n |   |   |   |   | c |\n |   |   |   |   | h |\n |   |   |   |   | e |\n |   |   |   |   | l |\n +---+---+---+---+---+\n```\n\nIf, with the parameter `packing_mode == Startingwidths::AutoSized` by\ndefault (set by `Config.packing_mode`), the `pack` method automatically\nadapts the width of columns to their largest content (body or header) before\nresizing, this requires you to go through the entire source dataset, which can\nbe costly in terms of performance in some cases.\n\nThis behavior can be avoided, but possibly with a loss of quality, by changing\nthe value of `packing_mode` to `Current` or `Initial`. In this case,\nhowever, a value for `width` must be supplied, either directly or by reading\nthe terminal size, otherwise `pack` will become a non-operation.\n\nFinally, using the `except` parameter, you can temporarily freeze the size of\none or more columns at their current value, so that they are excluded from\nresizing.\n\nstored in 2 different attributes: the current value and the initial value\n(never subsequently modified).\n\nThe `pack` method simply modifies the current column width value, and the\n`to_s` method then takes care of the layout, and we can save the table in its\noutput layout in a string with :\n\n```crystal\nformatted_table = table.to_s\n```\n\nIt is therefore equivalent to write :\n\n```crystal\ntable.pack\nputs table\n```\n\nor\n\n```crystal\nputs table.pack\n```\n\nTo sum up:\n\n| Type of call                                               | Results, with `PackingMode::AutoSized` as default and no columns excluded                                                                                                                                   |\n| :--------------------------------------------------------- | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `table.pack`                                               | <ul><li>Automatically adapts columns to their largest content</li><li>Modifies current values of column width</li></ul>                                                                                     |\n| `table.pack(40)`                                           | <ul> <li>Automatically adapts columns to their largest content</li> <li>Modifies current values of column width</li> <li>Reduces or increases column widths to meet total table size requirements</li></ul> |\n| `table.pack(packing_mode: PackingMode::CurrentWidths`)     | <ul><li>No-op</li></ul>                                                                                                                                                                                     |\n| `table.pack(40, packing_mode: PackingMode::CurrentWidths`) | <ul><li>Reduces or increases column widths to meet total table size requirements</li></ul>                                                                                                                  |\n| `table.pack(packing_mode: PackingMode::InitialWidths`)     | <ul><li> Only resets current column values to their initial values, no packing is done</li></ul>                                                                                                            |\n| `table.pack(40, packing_mode: PackingMode::InitialWidths`) | <ul><li> Resets current column values to their initial values</li> <li>Reduces or increases column widths to meet total table size requirements</li></ul>                                                   |\n\n## Summary\n\nThe Tablo library offers a basic yet useful summary method.\n\nAt present, it can be used to perform calculations on individual columns of data\nand between columns.\n\nHere's an example of how it works now and what it can do for you:\n\n```crystal\nrequire \"tablo\"\nrequire \"colorize\"\n\nstruct InvoiceItem\n  include Tablo::CellType\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : Int32?)\n  end\nend\n\ninvoice = [\n  InvoiceItem.new(\"Laptop\", 3, 98000),\n  InvoiceItem.new(\"Printer\", 2, 15499),\n  InvoiceItem.new(\"Router\", 1, 9900),\n  InvoiceItem.new(\"Switch\", nil, 4500),\n  InvoiceItem.new(\"Accessories\", 5, 6450),\n]\n\ntable = Tablo::Table.new(invoice,\n  omit_last_rule: false,\n  border: Tablo::Border.new(Tablo::BorderName::Fancy),\n  title: Tablo::Heading.new(\"Invoice\")) do |t|\n  t.add_column(\"Product\",\n    &.product)\n  t.add_column(\"Quantity\",\n    body_formatter: ->(value : Tablo::CellType) {\n      (value.nil? ? \"N/A\" : value.to_s)\n    }, &.quantity)\n  t.add_column(\"Price\",\n    body_formatter: ->(value : Tablo::CellType) {\n      \"%.2f\" % (value.as(Int32) / 100)\n    }, &.price)\n  t.add_column(:total, header: \"Total\",\n    body_formatter: ->(value : Tablo::CellType) {\n      value.nil? ? \"\" : \"%.2f\" % (value.as(Int32) / 100)\n    }) { |n| n.price.nil? || n.quantity.nil? ? nil : (\n    n.price.as(Int32) * n.quantity.as(Int32)\n  ) }\nend\n\ninvoice_summary_definition = [\n  Tablo::Aggregation.new(:total, Tablo::Aggregate::Sum),\n  Tablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Right,\n    formatter: ->(value : Tablo::CellType) {\n      value.is_a?(String) ? value : (\n        value.nil? ? \"\" : \"%.2f\" % (value.as(Int32) / 100)\n      )\n    },\n    styler: ->(_value : Tablo::CellType, cd : Tablo::Cell::Data::Coords, fc : String) {\n      case cd.row_index\n      when 0, 2, 5\n        fc.colorize.mode(:bold).to_s\n      when 1\n        fc.colorize.mode(:italic).to_s\n      else\n        fc\n      end\n    }),\n  Tablo::Summary::BodyRow.new(\"Price\", 1, \"SubTotal\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 2, \"Discount 5%\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 3, \"S/T discount\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 4, \"Tax (20%)\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 6, \"Balance due\"),\n  Tablo::Summary::BodyRow.new(:total, 1, ->{ Tablo::Summary.use(:total,\n    Tablo::Aggregate::Sum) }),\n  Tablo::Summary::BodyRow.new(:total, 2, ->{ Tablo::Summary.keep(:discount,\n    (Tablo::Summary.use(:total, Tablo::Aggregate::Sum).as(Int32) * 0.05)\n      .to_i).as(Tablo::CellType) }),\n  Tablo::Summary::BodyRow.new(:total, 3, ->{ (Tablo::Summary.keep(:total_after_discount,\n    Tablo::Summary.use(:total, Tablo::Aggregate::Sum).as(Int32) -\n    Tablo::Summary.use(:discount).as(Int32))).as(Tablo::CellType) }),\n  Tablo::Summary::BodyRow.new(:total, 4, ->{ (Tablo::Summary.keep(:tax,\n    (Tablo::Summary.use(:total_after_discount).as(Int32) * 0.2)\n      .to_i)).as(Tablo::CellType) }),\n  Tablo::Summary::BodyRow.new(:total, 5, \"========\".as(Tablo::CellType)),\n  Tablo::Summary::BodyRow.new(:total, 6, ->{ (Tablo::Summary.use(:tax).as(Int32) +\n                                     Tablo::Summary.use(:total_after_discount)\n                                       .as(Int32)).as(Tablo::CellType) }),\n]\n\ntable.summary(invoice_summary_definition,\n  {\n    masked_headers: true,\n    border:         Tablo::Border.new(\"EEESSSSSSSSSESSS\"),\n  })\n\nputs table\nputs table.summary.as(Tablo::SummaryTable)\n```\n\n<p> <img src=\"assets/images/summary.svg\" width=460> </p>\n\nLet's take a closer look at the source code.\n\nIn the last lines of code, you can see two calls to the summary method. The\nfirst accepts two parameters and is used to define the layout of the summary,\nwhile the second, without parameters, simply returns the SummaryTable instance\ncreated, ready for display.\n\nThe layout is defined on the basis of several data type instances, grouped together in an array (`summary_definition` in this example):\n\n1. The Aggregation type, defined as follows:\n\n```crystal\n   record Aggregation, column : LabelType | Array(LabelType),\n          aggregate : Aggregate | Array(Aggregate)\n```\n\n- column, of type LabelType, identifies the column on which to perform\n  calculations\n- aggregate is an enum with 4 possible elements: Sum, Count, Min\n  and Max. Several Aggregate instances can be defined, or, if required,\n  combined into a single instance by setting the parameters in an array.\n\nThe layout is defined on the basis of several data type instances, grouped together in an array:\n\n1. the Aggregation type is used to define the various aggregation calculations (Sum, Count, Minimum and Maximum) on the table's data columns.\n\nNil values are ignored, and only numerical values are used for Sum, Minimum and Maximum calculations. Source data is read only once, regardless of the number of columns and aggregates used.\n\nrecord Aggregation, column : LabelType | Array(LabelType), aggregate : Aggregate | Array(Aggregate)\n\n2. column, of type LabelType, identifies the column on which to perform calculations\n   Aggregate is an enum with 4 possible elements: Sum, Count, Min and Max.\n   Several Aggregate instances can be defined, or, if required, combined into a single instance by setting the parameters in an array.\n\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\nTODO TODO TODO\n\nthe Summary::BodyRow type\nSummary::BodyColumn type\n\nThe first part - the creation of the main table - calls for no particular\ncomment (except perhaps the use of a more realistic data source than the\nprevious arrays of integers!)\n\nCalling the `summary` method, with its 2 parameters, creates a new `Table`\ninstance, and calling the same method without arguments returns this same\ninstance, ready to be displayed.\n\nThe first parameter (`summary_def`) defines all the calculations to be performed\non the data, as well as their layout.\n\nThe type of `summary_def` is : `Hash(LabelType, NamedTuple(...))`. The hash key is\ntherefore a column identifier (`LabelType` is an alias of `String | Symbol\n| Int32`).\n\nThe `NamedTuple` may have up to 8 entries, all optional except `proc`\n\n| Hash key           | Type of hash value   |\n| :----------------- | :------------------- |\n| `header`           | `String`             |\n| `header_alignment` | `Justify`            |\n| `header_formatter` | `DataCellFormatter`  |\n| `header_styler`    | `DataCellStyler`     |\n| `body_alignment`   | `Justify`            |\n| `body_formatter`   | `DataCellFormatter`  |\n| `body_styler`      | `DataCellStyler`     |\n| `proc`             | `Summary::UserProcs` |\n\n- `header` default value is the empty string\n- the next 6 entries default values are inherited from Table\n  initializers of same name\n- `proc` is a bit complex and has no default value. Its value type is\n  `Summary::UserProcs`, an alias whose definition is :\n\n```crystal\nalias SourcesCurrentColumn = Array(CellType)\nalias SourcesAllColumns = Hash(LabelType, Array(CellType))\nalias Summary::UserProcCurrent = Proc(SourcesCurrentColumn, CellType)\nalias Summary::UserProcAll = Proc(SourcesAllColumns, CellType)\n\nalias SummaryLineProcCurrent = {Int32, Summary::UserProcCurrent}\nalias SummaryLineProcAll = {Int32, Summary::UserProcAll}\nalias SummaryLineProcBoth = SummaryLineProcCurrent | SummaryLineProcAll\n\nalias Summary::UserProcs = {Int32, Proc(Array(CellType), CellType)} |\n{Int32, Proc(Hash(LabelType, Array(CellType)), CellType)} |\nArray({Int32, Proc(Array(CellType), CellType)}) |\nArray({Int32, Proc(Hash(LabelType, Array(CellType)), CellType)}) |\nArray({Int32, Proc(Array(CellType), CellType)} |\n{Int32, Proc(Hash(LabelType, Array(CellType)), CellType)})\nalias Summary::UserProcAll = Proc(Hash(LabelType, Array(CellType)), CellType)\nalias Summary::UserProcCurrent = Proc(Array(CellType), CellType)\n```\n\nThe latter - `Summary::UserProcs`- is a tad complex and can take several forms.\nBasically, it is a tuple of 2 elements :\n\n- An `Int32`, which indicates the position (line) of the proc result in the column\n- A `proc` or an array of procs, which performs the calculation and expects\n  as parameter either an `Array(CellType)` or a `Hash(LabelType,\nArray(CellType))`\n\nThe second parameter (`options`) ...\n\nOutch!\n\nLooking again at the source code, we see that :\n\n- The `:tax` column has 2 entries, of type `Tuple`:\n- `body_formatter:` and its associated proc which performs the\n  conversion from cents to currency units, and checks that the cell is\n  not nil (this is necessary, as of the 3 summary lines, the 1st and\n  3rd are not fed).\n- `proc:` a tuple defined by the number of the summary line to be fed,\n  and the proc performing the calculation. The latter takes as\n  parameter a `CellType` array (the \"Tax (20%)\" data column), converts\n  it to an array of integers before summing and converting the result\n\n## Transpose\n\n```text\n\n```\n","program":{"html_id":"tablo/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"tablo","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"tablo/Tablo","path":"Tablo.html","kind":"module","full_name":"Tablo","name":"Tablo","abstract":false,"locations":[{"filename":"src/border.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L4"},{"filename":"src/cell.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L3"},{"filename":"src/column.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/column.cr#L4"},{"filename":"src/config.cr","line_number":5,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L5"},{"filename":"src/heading.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/heading.cr#L4"},{"filename":"src/row.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/row.cr#L3"},{"filename":"src/rowgroup.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/rowgroup.cr#L4"},{"filename":"src/summary.cr","line_number":4,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L4"},{"filename":"src/table.cr","line_number":12,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L12"},{"filename":"src/tablo.cr","line_number":3,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L3"},{"filename":"src/types.cr","line_number":38,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L38"},{"filename":"src/types.cr","line_number":62,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L62"},{"filename":"src/util.cr","line_number":1,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/util.cr#L1"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT_FORMATTER","name":"DEFAULT_FORMATTER","value":"->(c : CellType) do\n  c.to_s\nend"},{"id":"DEFAULT_HEADING_ALIGNMENT","name":"DEFAULT_HEADING_ALIGNMENT","value":"Justify::Center"},{"id":"DEFAULT_STYLER","name":"DEFAULT_STYLER","value":"->(s : String) do\n  s\nend"},{"id":"NEWLINE","name":"NEWLINE","value":"{% if flag?(:windows) %}\n              \"\\r\\n\"\n            {% else %}\n              \"\\n\"\n            {% end %}","doc":"Constant initializers","summary":"<p>Constant initializers</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.90.0\""}],"class_methods":[{"html_id":"dot_align(value:Float,dec:Int32,mode:DotAlign=DotAlign::DotZero)-class-method","name":"dot_align","doc":"Method to align floats on decimal point, where non significant zeroes are\nreplaced by spaces (see `DotAlign`)\n\nMandatory parameters are:\n- `value` : type is a Float`\n- `dec` : type is Int32 : the number of decimals i<br />\n  (Valid range set in `Config::Controls.rounding_range`)\n- `mode` : a formatting enum DotAlign value (defaults to DotZero)\n\nExample with default `DotAlign::DotZero`\n```\nrequire \"tablo\"\n\nar = [423.14159, 2.0000345, 0.0000234, 42.21, 7.9]\ntable = Tablo::Table.new(ar) do |t|\n  t.add_column(\"Floats\",\n    body_formatter: ->(value : Tablo::CellType) {\n      Tablo.dot_align(value, 3, :dot_zero)\n    }, &.itself)\nend\nputs table\n```\n    +--------------+\n    |       Floats |\n    +--------------+\n    |      423.142 |\n    |        2.0   |\n    |        0.0   |\n    |       42.21  |\n    |        7.9   |\n    +--------------+","summary":"<p>Method to align floats on decimal point, where non significant zeroes are replaced by spaces (see <code><a href=\"Tablo/DotAlign.html\">DotAlign</a></code>)</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Float"},{"name":"dec","external_name":"dec","restriction":"Int32"},{"name":"mode","default_value":"DotAlign::DotZero","external_name":"mode","restriction":"DotAlign"}],"args_string":"(value : Float, dec : Int32, mode : DotAlign = DotAlign::DotZero)","args_html":"(value : Float, dec : Int32, mode : <a href=\"Tablo/DotAlign.html\">DotAlign</a> = <span class=\"t\">DotAlign</span><span class=\"t\">::</span><span class=\"t\">DotZero</span>)","location":{"filename":"src/tablo.cr","line_number":52,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L52"},"def":{"name":"dot_align","args":[{"name":"value","external_name":"value","restriction":"Float"},{"name":"dec","external_name":"dec","restriction":"Int32"},{"name":"mode","default_value":"DotAlign::DotZero","external_name":"mode","restriction":"DotAlign"}],"visibility":"Public","body":"if dec.in?(Config::Controls.rounding_range)\nelse\n  raise(Error::InvalidValue.new(\"dot_align: number of decimals must be in range \" + \"(#{Config::Controls.rounding_range})\"))\nend\nsnum = (value.round(dec)).to_s\nif dec <= 0\n  dec = 1\nend\nipart, fpart = snum.split(\".\")\nif fpart == \"0\"\n  case mode\n  in DotAlign::DotZero\n    (ipart + \".0\") + (\" \" * (dec - 1))\n  in DotAlign::DotOnly\n    (ipart + \".\") + (\" \" * dec)\n  in DotAlign::NoDot, DotAlign::Blank\n    if value.zero? && (mode == DotAlign::Blank)\n      \" \" * (dec + 1)\n    else\n      ipart + (\" \" * (dec + 1))\n    end\n  end\nelse\n  ((ipart + \".\") + fpart) + (\" \" * (dec - fpart.size))\nend\n"}},{"html_id":"stretch(text:String,target_width:Int32,prefix:String=\"\",suffix:String=\"\",justification:Justify=Justify::Center,fill_char:Char='',max_fill:Int32=Int32::MAX):String-class-method","name":"stretch","doc":"TODO Doc to be completed !!!\n\nThe stretch method is designed to optimize the filling of a text area,\npossibly multi-line, by inserting one or more separators (by default\na space) between each character of the initial string.\n\nIf the constraints cannot be met, return the text unchanged.\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"integer\", &.itself)\n  t.add_column(\"Float\", &.**(0.5).round(2))\n  t.add_group(\"Numbers\", formatter: ->(value : Tablo::CellType, width : Int32) {\n    Tablo.stretch(value.as(String), width, fill_char: '.', max_fill: 1,\n      prefix: \"<--{------} \", suffix: \" {------}-->\")\n  })\nend\nputs table\n```\nIn this exmaple, ....\n```\n+-----------------------------+\n| <----- N.u.m.b.e.r.s -----> |\n+--------------+--------------+\n|      integer |        Float |\n+--------------+--------------+\n|            1 |          1.0 |\n|            2 |         1.41 |\n|            3 |         1.73 |\n+--------------+--------------+\n```","summary":"<p><span class=\"flag orange\">TODO</span>  Doc to be completed !!!</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"target_width","external_name":"target_width","restriction":"Int32"},{"name":"prefix","default_value":"\"\"","external_name":"prefix","restriction":"String"},{"name":"suffix","default_value":"\"\"","external_name":"suffix","restriction":"String"},{"name":"justification","default_value":"Justify::Center","external_name":"justification","restriction":"Justify"},{"name":"fill_char","default_value":"' '","external_name":"fill_char","restriction":"Char"},{"name":"max_fill","default_value":"Int32::MAX","external_name":"max_fill","restriction":"Int32"}],"args_string":"(text : String, target_width : Int32, prefix : String = \"\", suffix : String = \"\", justification : Justify = Justify::Center, fill_char : Char = ' ', max_fill : Int32 = Int32::MAX) : String","args_html":"(text : String, target_width : Int32, prefix : String = <span class=\"s\">&quot;&quot;</span>, suffix : String = <span class=\"s\">&quot;&quot;</span>, justification : <a href=\"Tablo/Justify.html\">Justify</a> = <span class=\"t\">Justify</span><span class=\"t\">::</span><span class=\"t\">Center</span>, fill_char : Char = <span class=\"s\">&#39; &#39;</span>, max_fill : Int32 = <span class=\"t\">Int32</span><span class=\"t\">::</span><span class=\"t\">MAX</span>) : String","location":{"filename":"src/tablo.cr","line_number":109,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L109"},"def":{"name":"stretch","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"target_width","external_name":"target_width","restriction":"Int32"},{"name":"prefix","default_value":"\"\"","external_name":"prefix","restriction":"String"},{"name":"suffix","default_value":"\"\"","external_name":"suffix","restriction":"String"},{"name":"justification","default_value":"Justify::Center","external_name":"justification","restriction":"Justify"},{"name":"fill_char","default_value":"' '","external_name":"fill_char","restriction":"Char"},{"name":"max_fill","default_value":"Int32::MAX","external_name":"max_fill","restriction":"Int32"}],"return_type":"String","visibility":"Public","body":"stretched_text = [] of String\nif max_fill < 0\n  raise(Error::InvalidValue.new(\"stretch: filler size cannot be negative\"))\nend\nif (fb = prefix.index('{')) && (lb = prefix.rindex('}'))\n  prefix_fixed, prefix_variable, prefix_head = prefix[0..(fb - 1)], prefix[(fb + 1)..(lb - 1)], prefix[(lb + 1)..-1]\nelse\n  prefix_fixed, prefix_variable, prefix_head = prefix, \"\", \"\"\nend\nif (fb = suffix.index('{')) && (lb = suffix.rindex('}'))\n  suffix_head, suffix_variable, suffix_fixed = suffix[0..(fb - 1)], suffix[(fb + 1)..(lb - 1)], suffix[(lb + 1)..-1]\nelse\n  suffix_fixed, suffix_variable, suffix_head = suffix, \"\", \"\"\nend\nmax_line_size = text.lines.map() do |__arg0|\n  __arg0.strip.size\nend.max\nintervals = max_line_size - 1\nmargins_max = (((((prefix_fixed + prefix_variable) + prefix_head) + suffix_fixed) + suffix_variable) + suffix_head).size\nmargins_min = margins_max - (prefix_variable + suffix_variable).size\nspace_chars_avail_min = (target_width - margins_max) - max_line_size\nspace_chars_avail_max = (target_width - margins_min) - max_line_size\nif space_chars_avail_max < 0\n  return text\nend\nspaces_between_chars_max = space_chars_avail_max // intervals\nspaces_between_chars_min = space_chars_avail_min // intervals\nprefix_variable_size = prefix_variable.size\nsuffix_variable_size = suffix_variable.size\nvariable_size = prefix_variable_size + suffix_variable_size\nif spaces_between_chars_min < 0\n  spaces_between_chars_min = 0\nend\nspaces_between_chars = spaces_between_chars_min\nspaces_between_chars_max.downto([spaces_between_chars_min, max_fill].min) do |spaces_between|\n  if spaces_between > max_fill\n    next\n  end\n  reduce = (prefix_variable_size + suffix_variable_size) - ((((target_width - (prefix_fixed + prefix_head).size) - (suffix_fixed + suffix_head).size) - (spaces_between * intervals)) - max_line_size)\n  if reduce > 0\n    reduce_left = (reduce * prefix_variable_size) // variable_size\n    reduce_right = reduce - reduce_left\n    prefix_variable = prefix_variable[0..(-(1 + reduce_left))]\n    suffix_variable = suffix_variable[reduce_right..-1]\n  end\n  spaces_between_chars = spaces_between\n  break\nend\nmargin_left = (prefix_fixed + prefix_variable) + prefix_head\nmargin_right = (suffix_head + suffix_variable) + suffix_fixed\nmargins_size = (margin_left + margin_right).size\ntext.each_line do |line|\n  line = line.strip\n  central_part = line.chars.join(fill_char.to_s * spaces_between_chars)\n  central_part_justified = case justification\n  when Justify::Left\n    central_part.ljust(target_width - margins_size)\n  when Justify::Right\n    central_part.rjust(target_width - margins_size)\n  else\n    central_part.center(target_width - margins_size)\n  end\n  final_line = (margin_left + central_part_justified) + margin_right\n  stretched_text << final_line\nend\nstretched_text.join(\"\\n\")\n"}}],"types":[{"html_id":"tablo/Tablo/Border","path":"Tablo/Border.html","kind":"struct","full_name":"Tablo::Border","name":"Border","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/border.cr","line_number":104,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L104"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"PREDEFINED_BORDERS","name":"PREDEFINED_BORDERS","value":"{PreSet::Ascii => \"+++++++++|||----\", PreSet::ReducedAscii => \"ESEESEESEESE----\", PreSet::Modern => \"┌┬┐├┼┤└┴┘│││────\", PreSet::ReducedModern => \"ESEESEESEESE────\", PreSet::Markdown => \"SSS|||SSS|||SS-S\", PreSet::Fancy => \"╭┬╮├┼┤╰┴╯│:│─−-⋅\", PreSet::Blank => \"SSSSSSSSSSSSSSSS\", PreSet::Empty => \"EEEEEEEEEEEEEEEE\"}","doc":"`PreSet` border definition hash constant","summary":"<p><code><a href=\"../Tablo/Border/PreSet.html\">PreSet</a></code> border definition hash constant</p>"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The Border class enhances the layout of a data table by separating rows\nand columns with interconnected horizontal and vertical lines.\n\nVarious predefined line types are available, but you are free to create your own.\n\nA border can be styled by a user defined proc, of type `Styler` allowing\nfor colorized output, either by using ANSI sequences or the \"colorize\" module\nfrom the stdlib (default: no style).\n\nA `Border` is defined by a string of exactly 16 characters, which is\nthen converted into 16 strings of up to 1 character each. The definition\nstring can contain any character, but two of them have a special meaning:\nduring conversion, the uppercase E is replaced by an empty string, and the\nuppercase S character is replaced by a space (a simple space may also be used,\nof course).\n\n_Please note that using the capital E character may cause alignment\ndifficulties._\n\nExamples of text or graphic connectors:\n```\n| Name                           | 16 chars string  |\n| ------------------------------ | ---------------  |\n| CONNECTORS_SINGLE_ROUNDED      | ╭┬╮├┼┤╰┴╯│││──── |\n| CONNECTORS_SINGLE              | ┌┬┐├┼┤└┴┘│││──── |\n| CONNECTORS_DOUBLE              | ╔╦╗╠╬╣╚╩╝║║║════ |\n| CONNECTORS_SINGLE_DOUBLE       | ╒╤╕╞╪╡╘╧╛│││════ |\n| CONNECTORS_DOUBLE_SINGLE       | ╓╥╖╟╫╢╙╨╜║║║──── |\n| CONNECTORS_HEAVY               | ┏┳┓┣╋┫┗┻┛┃┃┃━━━━ |\n| CONNECTORS_LIGHT_HEAVY         | ┍┯┑┝┿┥┕┷┙│││━━━━ |\n| CONNECTORS_HEAVY_LIGHT         | ┎┰┒┠╂┨┖┸┚┃┃┃──── |\n| CONNECTORS_TEXT_CLASSIC        | +++++++++|||---- |\n\n```\nMixed graphic character sets, such as:\n```\n| Name                           | 16 chars string  |\n| ------------------------------ | ---------------  |\n| CONNECTORS_SINGLE_DOUBLE_MIXED | ╔╤╗╟┼╢╚╧╝║│║═─═- |\n```\nmay not be correctly rendered.\n\nBelow is a detailed representation of each ruletype and meaning:\n\nThe first 9 characters define the junction or intersection of horizontal and\nvertical border lines.\n\n```\nPos Connector name     Example (using Fancy border preset)\n--- --------------     -----------------------------------\n 0  top_left           \"┌\"\n 1  top_mid            \"┬\"\n 2  top_right          \"┐\"\n\n 3  mid_left           \"├\"\n 4  mid_mid            \"┼\"\n 5  mid_right          \"┤\"\n\n 6  bottom_left        \"└\"\n 7  bottom_mid         \"┴\"\n 8  bottom_right       \"┘\"\n```\n\nThe next three characters define vertical separators in data rows.\n\n```\n 9  vdiv_left          \"│\"\n10  vdiv_mid           \":\"\n11  vdiv_right         \"│\"\n```\n\nAnd finally, the last four characters define the different types of horizontal\nborder, depending on the type of data row or types of adjacent data rows.\n\n```\n12  hdiv_tbs           \"─\"     (title or top or bottom or summary)\n13  hdiv_grp           \"−\"     (group)\n14  hdiv_hdr           \"-\"     (header)\n15  hdiv_bdy           \"⋅\"     (body)\n```\n\nEight predefined borders, of type `PreSet`, can also be used instead of\na definition string.\n\n```\n| name          | 16 chars string  |\n| ------------- | ---------------- |\n| Ascii         | +++++++++|||---- |\n| ReducedAscii  | ESEESEESEESE---- |\n| ReducedModern | ESEESEESEESE──── |\n| Markdown      | SSS|||SSS|||SS-S |\n| Modern        | ┌┬┐├┼┤└┴┘│││──── |\n| Fancy         | ╭┬╮├┼┤╰┴╯│:│─−-⋅ |\n| Blank         | SSSSSSSSSSSSSSSS |\n| Empty         | EEEEEEEEEEEEEEEE |\n```\n\nFor example, the string `\"ESEESEESEESE───\"` is how the `ReducedModern`\nstyle is defined.","summary":"<p>The Border class enhances the layout of a data table by separating rows and columns with interconnected horizontal and vertical lines.</p>","constructors":[{"html_id":"new(definition:String|PreSet=Config::Defaults.border_definition,styler:Styler=Config::Defaults.border_styler)-class-method","name":"new","doc":"Border constructor, returning a Border instance.\n\n_Optional (named) parameters, with default values_:\n\n- `definition`: type is `String` | `PreSet`\n\n  Default value is set by `Config::Defaults.border_definition`\n\n- `styler`: type is `Styler`\n\n  Default value is set by `Config::Defaults.border_styler`\n\nExamples :\n```\nborder = Tablo::Border.new(Tablo::Border::PreSet::Fancy,\n  styler: ->(connector : String) { connector.colorize(:yellow).to_s })\n```\nor\n```\nborder = Tablo::Border.new(\"┌┬┐├┼┤└┴┘│││────\",\n  styler: ->(connector : String) { connector.colorize.fore(:blue).mode(:bold).to_s })\n```","summary":"<p>Border constructor, returning a Border instance.</p>","abstract":false,"args":[{"name":"definition","default_value":"Config::Defaults.border_definition","external_name":"definition","restriction":"String | PreSet"},{"name":"styler","default_value":"Config::Defaults.border_styler","external_name":"styler","restriction":"Styler"}],"args_string":"(definition : String | PreSet = Config::Defaults.border_definition, styler : Styler = Config::Defaults.border_styler)","args_html":"(definition : String | <a href=\"../Tablo/Border/PreSet.html\">PreSet</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.border_definition, styler : <a href=\"../Tablo/Border/Styler.html\">Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.border_styler)","location":{"filename":"src/border.cr","line_number":182,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L182"},"def":{"name":"new","args":[{"name":"definition","default_value":"Config::Defaults.border_definition","external_name":"definition","restriction":"String | PreSet"},{"name":"styler","default_value":"Config::Defaults.border_styler","external_name":"styler","restriction":"Styler"}],"visibility":"Public","body":"_ = allocate\n_.initialize(definition, styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"types":[{"html_id":"tablo/Tablo/Border/PreSet","path":"Tablo/Border/PreSet.html","kind":"enum","full_name":"Tablo::Border::PreSet","name":"PreSet","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/border.cr","line_number":107,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L107"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Ascii","name":"Ascii","value":"0"},{"id":"ReducedAscii","name":"ReducedAscii","value":"1"},{"id":"ReducedModern","name":"ReducedModern","value":"2"},{"id":"Markdown","name":"Markdown","value":"3"},{"id":"Modern","name":"Modern","value":"4"},{"id":"Fancy","name":"Fancy","value":"5"},{"id":"Empty","name":"Empty","value":"6"},{"id":"Blank","name":"Blank","value":"7"}],"namespace":{"html_id":"tablo/Tablo/Border","kind":"struct","full_name":"Tablo::Border","name":"Border"},"doc":" `PreSet` is an `enum` identifying a finite set of strings defining the most\n commonly used table layout templates (see `PREDEFINED_BORDERS`).","summary":"<p><code><a href=\"../../Tablo/Border/PreSet.html\">PreSet</a></code> is an <code>enum</code> identifying a finite set of strings defining the most  commonly used table layout templates (see <code><a href=\"../../Tablo/Border.html#PREDEFINED_BORDERS\">PREDEFINED_BORDERS</a></code>).</p>","instance_methods":[{"html_id":"ascii?-instance-method","name":"ascii?","abstract":false,"location":{"filename":"src/border.cr","line_number":108,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L108"},"def":{"name":"ascii?","visibility":"Public","body":"self == Ascii"}},{"html_id":"blank?-instance-method","name":"blank?","abstract":false,"location":{"filename":"src/border.cr","line_number":115,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L115"},"def":{"name":"blank?","visibility":"Public","body":"self == Blank"}},{"html_id":"empty?-instance-method","name":"empty?","abstract":false,"location":{"filename":"src/border.cr","line_number":114,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L114"},"def":{"name":"empty?","visibility":"Public","body":"self == Empty"}},{"html_id":"fancy?-instance-method","name":"fancy?","abstract":false,"location":{"filename":"src/border.cr","line_number":113,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L113"},"def":{"name":"fancy?","visibility":"Public","body":"self == Fancy"}},{"html_id":"markdown?-instance-method","name":"markdown?","abstract":false,"location":{"filename":"src/border.cr","line_number":111,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L111"},"def":{"name":"markdown?","visibility":"Public","body":"self == Markdown"}},{"html_id":"modern?-instance-method","name":"modern?","abstract":false,"location":{"filename":"src/border.cr","line_number":112,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L112"},"def":{"name":"modern?","visibility":"Public","body":"self == Modern"}},{"html_id":"reduced_ascii?-instance-method","name":"reduced_ascii?","abstract":false,"location":{"filename":"src/border.cr","line_number":109,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L109"},"def":{"name":"reduced_ascii?","visibility":"Public","body":"self == ReducedAscii"}},{"html_id":"reduced_modern?-instance-method","name":"reduced_modern?","abstract":false,"location":{"filename":"src/border.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L110"},"def":{"name":"reduced_modern?","visibility":"Public","body":"self == ReducedModern"}}]},{"html_id":"tablo/Tablo/Border/Styler","path":"Tablo/Border/Styler.html","kind":"alias","full_name":"Tablo::Border::Styler","name":"Styler","abstract":false,"locations":[{"filename":"src/border.cr","line_number":136,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/border.cr#L136"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"Proc(String, String)","aliased_html":"String -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Border","kind":"struct","full_name":"Tablo::Border","name":"Border"},"doc":"A border may be styled, either by using ANSI color sequences or using\nthe stdlib colorize module.\n\n `styler` default value is set by `Tablo::Config::Defaults.border_styler`\n\nExample, to colorize borders in blue :\n```\nrequire \"tablo\"\nrequire \"colorize\"\ntable = Tablo::Table.new([1, 2, 3],\n  border: Tablo::Border.new(Tablo::Border::PreSet::Ascii,\n    styler: ->(connector : String) { connector.colorize(:red).to_s })) do |t|\n  t.add_column(\"itself\", &.itself)\nend\nputs table\n```\n\n<img src=\"../../assets/images/api_border_styler.svg\" width=\"160\">\n","summary":"<p>A border may be styled, either by using ANSI color sequences or using the stdlib colorize module.</p>"}]},{"html_id":"tablo/Tablo/Cell","path":"Tablo/Cell.html","kind":"class","full_name":"Tablo::Cell","name":"Cell","abstract":true,"superclass":{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":15,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L15"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},{"html_id":"tablo/Tablo/Cell/Text","kind":"class","full_name":"Tablo::Cell::Text","name":"Text"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"In Tablo, the Cell class and its subclasses, along with the Table class\nitself, form the core of the library's functionality. <br /> However, methods\nand classes of the Cell type are mainly for internal use, and generally\nhave no public interface.\n\nCell is an abstract class representing a single cell inside a Table.<br />\nDerived concrete cells are : `Cell::Text` and `Cell::Data`\n\nIt is made up of several attributes and methods, including the `value`\nattribute, of type `CellType`, which holds the raw content of each element\nin the data source.","summary":"<p>In Tablo, the Cell class and its subclasses, along with the Table class itself, form the core of the library's functionality.</p>","types":[{"html_id":"tablo/Tablo/Cell/Data","path":"Tablo/Cell/Data.html","kind":"class","full_name":"Tablo::Cell::Data","name":"Data","abstract":false,"superclass":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"ancestors":[{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":419,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L419"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"doc":"The Data class, derived from Cell, is used to manage the source data\nitself (column body), or those that depend on it (column header).","summary":"<p>The Data class, derived from Cell, is used to manage the source data itself (column body), or those that depend on it (column header).</p>","types":[{"html_id":"tablo/Tablo/Cell/Data/Coords","path":"Tablo/Cell/Data/Coords.html","kind":"struct","full_name":"Tablo::Cell::Data::Coords","name":"Coords","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":426,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L426"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},"doc":"The `Coords` `struct` inherits from the `Cell::Data` class and is\nessentially intended to enable conditional formatting or styling.  It\nis managed internally, but its attributes (`body_value`, `row_index`,\n`column_index`), which define the current source data element, are used by\nthe `Cell::Data::Formatter` and `Cell:Data::Styler` procs, to be\ndefined by the user.","summary":"<p>The <code><a href=\"../../../Tablo/Cell/Data/Coords.html\">Coords</a></code> <code>struct</code> inherits from the <code><a href=\"../../../Tablo/Cell/Data.html\">Cell::Data</a></code> class and is essentially intended to enable conditional formatting or styling.</p>","constructors":[{"html_id":"new(body_value:CellType,row_index:Int32,column_index:Int32)-class-method","name":"new","doc":"Constructor with 3 mandatory parameters.","summary":"<p>Constructor with 3 mandatory parameters.</p>","abstract":false,"args":[{"name":"body_value","external_name":"body_value","restriction":"CellType"},{"name":"row_index","external_name":"row_index","restriction":"Int32"},{"name":"column_index","external_name":"column_index","restriction":"Int32"}],"args_string":"(body_value : CellType, row_index : Int32, column_index : Int32)","args_html":"(body_value : <a href=\"../../../Tablo/CellType.html\">CellType</a>, row_index : Int32, column_index : Int32)","location":{"filename":"src/cell.cr","line_number":437,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L437"},"def":{"name":"new","args":[{"name":"body_value","external_name":"body_value","restriction":"CellType"},{"name":"row_index","external_name":"row_index","restriction":"Int32"},{"name":"column_index","external_name":"column_index","restriction":"Int32"}],"visibility":"Public","body":"_ = allocate\n_.initialize(body_value, row_index, column_index)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"body_value:Tablo::CellType-instance-method","name":"body_value","doc":"Returns the raw value of the current `Cell::Data`","summary":"<p>Returns the raw value of the current <code><a href=\"../../../Tablo/Cell/Data.html\">Cell::Data</a></code></p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":428,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L428"},"def":{"name":"body_value","visibility":"Public","body":"@body_value"}},{"html_id":"column_index:Int32-instance-method","name":"column_index","doc":"Returns the index of the column (0..n)","summary":"<p>Returns the index of the column (0..n)</p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":434,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L434"},"def":{"name":"column_index","visibility":"Public","body":"@column_index"}},{"html_id":"row_index:Int32-instance-method","name":"row_index","doc":"Returns the index of the row (0..n)","summary":"<p>Returns the index of the row (0..n)</p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":431,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L431"},"def":{"name":"row_index","visibility":"Public","body":"@row_index"}}]},{"html_id":"tablo/Tablo/Cell/Data/Formatter","path":"Tablo/Cell/Data/Formatter.html","kind":"alias","full_name":"Tablo::Cell::Data::Formatter","name":"Formatter","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":532,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L532"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(Tablo::CellType, Int32, String) | Proc(Tablo::CellType, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, Int32, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, String))","aliased_html":"<a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a> -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a>, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a> -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},"doc":"The purpose of the formatter is to transform the raw value of a cell\ninto a formatted character string <br /> (A default formatter (`to_s`) is applied if\nnone is defined by the user).\n\nFor cells of type `Cell::Data`, the Formatter proc can take 4 different\nforms, as shown below by their commonly used parameter names  and types: <br />\n- 1st form : (value : `CellType`, coords : `Cell::Data::Coords`, column_width : `Int32`)\n- 2nd form : (value : `CellType`, coords : `Cell::Data::Coords`)\n- 3rd form : (value : `CellType`, column_width : `Int32`)\n- 4th form : (value : `CellType`) <br />\n  Default formatter, defined by`Tablo::Config::Defaults.body_formatter` (or\n                  `Tablo::Config::Defaults.header_formatter`)\n\nand the return type is `String` for all of them.\n\nThese different forms can be used for conditional formatting.\n\nFor example, to alternate case after each row, the 2nd form\ncan be used :\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"],\n  body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n    if value.is_a?(String)\n      coords.row_index % 2 == 0 ? value.as(String).upcase : value.as(String).downcase\n    else\n      value.to_s\n    end\n  }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\n\n```\n+--------------+--------------+--------------+\n| itself       | itself x 2   | itself x 3   |\n+--------------+--------------+--------------+\n| A            | AA           | AAA          |\n| b            | bb           | bbb          |\n| C            | CC           | CCC          |\n+--------------+--------------+--------------+\n```\nThis has an impact on all text columns. To limit formatting to the\nsecond column, for example, you could write:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"],\n  body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n    if value.is_a?(String) && coords.column_index == 1\n      coords.row_index % 2 == 0 ? value.as(String).upcase : value.as(String).downcase\n    else\n      value.to_s\n    end\n  }) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\nor, if formatting is done directly at the column level:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\",\n    body_formatter: ->(value : Tablo::CellType, coords : Tablo::Cell::Data::Coords) {\n      if value.is_a?(String)\n        coords.row_index % 2 == 0 ? value.as(String).upcase : value.as(String).downcase\n      else\n        value.to_s\n      end\n    }, &.*(2)\n  )\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\n\n```\n+--------------+--------------+--------------+\n| itself       | itself x 2   | itself x 3   |\n+--------------+--------------+--------------+\n| A            | AA           | AAA          |\n| B            | bb           | BBB          |\n| C            | CC           | CCC          |\n+--------------+--------------+--------------+\n```","summary":"<p>The purpose of the formatter is to transform the raw value of a cell into a formatted character string <br /> (A default formatter (<code>to_s</code>) is applied if none is defined by the user).</p>"},{"html_id":"tablo/Tablo/Cell/Data/Styler","path":"Tablo/Cell/Data/Styler.html","kind":"alias","full_name":"Tablo::Cell::Data::Styler","name":"Styler","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":621,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L621"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(String, Int32, String) | Proc(String, String) | Proc(Tablo::CellType, String, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, String, Int32, String) | Proc(Tablo::CellType, Tablo::Cell::Data::Coords, String, String))","aliased_html":"String, Int32 -> String | String -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, String -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a>, String, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, <a href=\"../../../Tablo/Cell/Data/Coords.html\">Tablo::Cell::Data::Coords</a>, String -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Data","kind":"class","full_name":"Tablo::Cell::Data","name":"Data"},"doc":"The purpose of the styler is to apply stylistic effects to a previously\nformatted character string. For a terminal without graphic capabilities,\nthese effects are limited to the use of color and/or character\nmodes (bold, italic, etc.).\n\nFor cells of type Cell::Data (header and body), the styler Proc can take\n5 different forms, as shown below by their commonly used parameter names and types:\n\n- 1st form : (value : `Tablo::CellType`, coords : `Tablo::Cell::Data::Coords`,\n             content : `String`, line_index : `Int32`)\n- 2nd form : (value : `Tablo::CellType`, coords : `Tablo::Cell::Data::Coords`,\n             content : `String`)\n- 3rd form : (value : `Tablo::CellType`, content : `String`)\n- 4th form : (content : `String`, line_index : `Int32`)\n- 5th form : (content : `String`) <br />\n  Default styler, defined by`Tablo::Config::Defaults.body_styler` (or\n                  `Tablo::Config::Defaults.header_styler`)\n\nand the return type is String for all of them.\n\n- *content* is the formatted value of the cell (after formatter\nhas been applied) <br />\n- *line_index* designates the line number in a (multi-line) cell (0..n).\n\nThese different forms can be used for conditional formatting.\n\nIn a somewhat contrived example, we could write, using the 1st form:\n```\nrequire \"tablo\"\nrequire \"colorize\"\n\ntable = Tablo::Table.new([\"A\", \"B\", \"C\"],\n  title: Tablo::Heading.new(\"My Title\",\n    frame: Tablo::Frame.new),\n  body_styler: ->(_value : Tablo::CellType, coords : Tablo::Cell::Data::Coords, content : String, line_index : Int32) {\n    if line_index > 0\n      content.colorize(:magenta).mode(:bold).to_s\n    else\n      if coords.row_index % 2 == 0\n        coords.column_index == 0 ? content.colorize(:red).to_s : content.colorize(:green).to_s\n      else\n        content.colorize(:blue).to_s\n      end\n    end\n  }\n) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3).chars.join(\"\\n\"))\nend\n\nputs table\n```\n\n<img src=\"../../../assets/images/api_cell_data_styler_1.svg\" width=\"400\">\n\nOr, more simply by using the 3rd form, to better differentiate between negative\nand positive values:\n```\nrequire \"tablo\"\nrequire \"colorize\"\n\ntable = Tablo::Table.new([3.14, 2.78, 3.5],\n  title: Tablo::Heading.new(\"My Title\",\n    frame: Tablo::Frame.new),\n  body_styler: ->(value : Tablo::CellType, content : String) {\n    if value.is_a?(Float64)\n      if value.as(Float64) < 0.0\n        content.colorize(:red).to_s\n      else\n        content.colorize(:green).to_s\n      end\n    else\n      content\n    end\n  }\n) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2).*(rand(10) < 5 ? -1 : 1))\n  t.add_column(\"itself x 3\", &.*(3).*(rand(10) < 5 ? -1 : 1))\nend\n```\n\n<img src=\"../../../assets/images/api_cell_data_styler_3.svg\" width=\"400\">","summary":"<p>The purpose of the styler is to apply stylistic effects to a previously formatted character string.</p>"}]},{"html_id":"tablo/Tablo/Cell/Text","path":"Tablo/Cell/Text.html","kind":"class","full_name":"Tablo::Cell::Text","name":"Text","abstract":false,"superclass":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"ancestors":[{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cell.cr","line_number":221,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L221"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Cell","kind":"class","full_name":"Tablo::Cell","name":"Cell"},"doc":"The Text class, derived from Cell, is used to manage Heading and\n Group cells","summary":"<p>The Text class, derived from Cell, is used to manage Heading and  Group cells</p>","instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":"Returns a copy of `self` with all instance variables cloned.","summary":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p>","abstract":false,"location":{"filename":"src/cell.cr","line_number":368,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L368"},"def":{"name":"clone","visibility":"Public","body":"{% if @type < Reference && (!@type.instance_vars.map(&.type).all? do |t|\n  ((((t == ::Bool) || (t == ::Char)) || (t == ::Symbol)) || (t == ::String)) || t < ::Number::Primitive\nend) %}\n        exec_recursive_clone do |hash|\n          clone = {{ @type }}.allocate\n          hash[object_id] = clone.object_id\n          clone.initialize_copy(self)\n          GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n          clone\n        end\n      {% else %}\n        clone = {{ @type }}.allocate\n        clone.initialize_copy(self)\n        GC.add_finalizer(clone) if clone.responds_to?(:finalize)\n        clone\n      {% end %}"}}],"types":[{"html_id":"tablo/Tablo/Cell/Text/Formatter","path":"Tablo/Cell/Text/Formatter.html","kind":"alias","full_name":"Tablo::Cell::Text::Formatter","name":"Formatter","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":293,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L293"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(Tablo::CellType, Int32, String) | Proc(Tablo::CellType, String))","aliased_html":"<a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a>, Int32 -> String | <a href=\"../../../Tablo/CellType.html\">Tablo::CellType</a> -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Text","kind":"class","full_name":"Tablo::Cell::Text","name":"Text"},"doc":"The purpose of the formatter is to transform the raw value of a cell\ninto a formatted character string <br /> (A default formatter (`to_s`) is applied if\nnone is defined by the user).\n\nFor cells of type `Cell::Text` (headings and group), the formatter Proc can\ntake 2 different forms, as shown below by their commonly used parameter\nnames  and types: <br />\n- 1st form : (value : `Tablo::CellType`, column_width : `Int32`)\n- 2nd form : (value : `Tablo::CellType`) <br />\n  Default formatter, defined by`Tablo::Config::Defaults.heading_formatter` (or\n                  `Tablo::Config::Defaults.group_formatter`)\n\nand the return type is `String` for both.\n\nAny processing can be done on cell value. For example, in a group, if the\nruntime cell value contains a `Time` type, we could format as :\n```\nrequire \"tablo\"\ntimestamp = \"15/1/2024 12:00:00\"\ntable = Tablo::Table.new([1, 2, 3]) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_group(:g1, header: \"Before\\n\" + timestamp)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\n  t.add_group(:g2, header: timestamp, formatter: ->(value : Tablo::CellType) {\n    parsed = Time.parse(value.as(String), \"%d/%m/%Y %H:%M:%S\", Time::Location.local)\n    \"After\\nDate = \" + parsed.to_s(\"%Y-%m-%d\") + \"\\nTime = \" + parsed.to_s(\"%H:%M:%S\")\n  }, alignment: Tablo::Justify::Left)\nend\nputs table\n ```\n\n```\n+--------------+-----------------------------+\n|    Before    | After                       |\n|   15/1/2024  | Date = 2024-01-15           |\n|   12:00:00   | Time = 12:00:00             |\n+--------------+--------------+--------------+\n|       itself |   itself x 2 |   itself x 3 |\n+--------------+--------------+--------------+\n|            1 |            2 |            3 |\n|            2 |            4 |            6 |\n|            3 |            6 |            9 |\n+--------------+--------------+--------------+\n```\nAnother example, to stretch contents of a cell to its maximum width:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading.new(\"My Title\",\n    frame: Tablo::Frame.new, formatter: ->(value : Tablo::CellType, column_width : Int32) {\n    Tablo::Util.stretch(value.as(String), width: column_width)\n  })) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\n\n```\n+--------------------------------------------+\n|    M    y         T    i    t    l    e    |\n+--------------+--------------+--------------+\n|       itself |   itself x 2 |   itself x 3 |\n+--------------+--------------+--------------+\n|            1 |            2 |            3 |\n|            2 |            4 |            6 |\n|            3 |            6 |            9 |\n+--------------+--------------+--------------+\n```","summary":"<p>The purpose of the formatter is to transform the raw value of a cell into a formatted character string <br /> (A default formatter (<code>to_s</code>) is applied if none is defined by the user).</p>"},{"html_id":"tablo/Tablo/Cell/Text/Styler","path":"Tablo/Cell/Text/Styler.html","kind":"alias","full_name":"Tablo::Cell::Text::Styler","name":"Styler","abstract":false,"locations":[{"filename":"src/cell.cr","line_number":364,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/cell.cr#L364"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Proc(String, Int32, String) | Proc(String, String))","aliased_html":"String, Int32 -> String | String -> String","const":false,"namespace":{"html_id":"tablo/Tablo/Cell/Text","kind":"class","full_name":"Tablo::Cell::Text","name":"Text"},"doc":"The purpose of the styler is to apply stylistic effects to\na previously formatted character string. For a terminal without\ngraphic capabilities, these effects are limited to the use of color\nand/or character modes (bold, italic, etc.).\n\nFor cells of type Cell::Text (heading and group), the styler Proc\ncan take 2 different forms, as shown below by their commonly used\nparameter names and types:\n\n- 1st form : (content : `String`, line : `Int32`)\n- 2nd form : (content : `String`) <br />\n  Default styler, defined by`Tablo::Config::Defaults.heading_styler` (or\n                  `Tablo::Config::Defaults.group_styler`)\n\nand the return type is String for both.\n\n`content` is the formatted cell value, after the formatter has been applied.<br />\n`line` designates the line number in a (multi-line) cell (0..n).\n\nThe first form allows easy conditional styling. For example, to colorize\ndifferently each line of multiline cell:\n```\nrequire \"tablo\"\nrequire \"colorize\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading.new(\"My\\nMultiline\\nTitle\",\n    frame: Tablo::Frame.new,\n    styler: ->(content : String, line : Int32) {\n      case line\n      when 0 then content.colorize(:blue).to_s\n      when 1 then content.colorize(:green).mode(:italic).mode(:bold).to_s\n      else        content.colorize(:red).to_s\n      end\n    })) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\nputs table\n```\n\n\n\n<img src=\"../../../assets/images/api_cell_text_styler_1.svg\" width=\"400\">\n\n\n or, more simply, to style the whole cell, we use the 2nd form:\n```\nrequire \"tablo\"\nrequire \"colorize\"\n\nCOLORS = [:blue, :red, :green, :magenta, :cyan]\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading.new(\"My MultiColor Title\",\n    frame: Tablo::Frame.new,\n    styler: ->(content : String) { content.chars.map { |c|\n      c.colorize.fore(COLORS[rand(5)]).mode(:bold).to_s\n    }.join })) do |t|\n  t.add_column(\"itself\", &.itself)\n  t.add_column(\"itself x 2\", &.*(2))\n  t.add_column(\"itself x 3\", &.*(3))\nend\n\nputs table\n```\n\n<img src=\"../../../assets/images/api_cell_text_styler_2.svg\" width=\"400\">\n","summary":"<p>The purpose of the styler is to apply stylistic effects to a previously formatted character string.</p>"}]}]},{"html_id":"tablo/Tablo/CellType","path":"Tablo/CellType.html","kind":"module","full_name":"Tablo::CellType","name":"CellType","abstract":false,"locations":[{"filename":"src/types.cr","line_number":38,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L38"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"In each Tablo cell, the `value` attribute contains a raw value, either read from\nthe data source or defined in the program body.\n\nThis attribute is of type `Tablo::CellType` and can therefore only store\nvalues of this type.  To make this possible, each type intended for use in\nTablo must include the CellType module, an empty module defined as follows:\n\n```\nmodule CellType\nend\n```\n\nIn Tablo, most scalar types already benefit from this addition, i.e.\n:\n- Signed integers: Int8, Int16, Int32, Int64, Int128\n- Unsigned integers: UInt8, UInt16, UInt32, UInt64, UInt128\n- Floats: Float32, Float64\n- Misc : Char, String, Bool, Nil, Symbol, Time\n\nIf another data type is to be used in Tablo, we need to reopen the type and\ninclude the `Tablo::CellType` module, as in the case of the `BigDecimal` type below:\n```\nstruct BigDecimal\n  include Tablo::CellType\nend\n```\n<span style=\"color:red\">__Important__:</span><br />\nAfter initialization of a Tablo table, when data is read for processing\nbefore being displayed, its type is therefore restricted to `Tablo::CellType`.\nSo, in most cases, a reverse casting is required when operations are performed\non it, such as:\n```\n- value.as(String)\n- value.as(Float64)\n- value.as(Int32)\n- ...\n```","summary":"<p>In each Tablo cell, the <code>value</code> attribute contains a raw value, either read from the data source or defined in the program body.</p>"},{"html_id":"tablo/Tablo/Column","path":"Tablo/Column.html","kind":"class","full_name":"Tablo::Column(T)","name":"Column","abstract":false,"superclass":{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/column.cr","line_number":12,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/column.cr#L12"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The Column class is used internally by the Tablo library and offers no\npublic interface to its attributes and methods.\n\nIts main function is to manage the creation of a table's various columns,\ndefined by the `Cell::Data` type (Header and body).\n\nIt is activated by the `Table#add_column` method.","summary":"<p>The Column class is used internally by the Tablo library and offers no public interface to its attributes and methods.</p>"},{"html_id":"tablo/Tablo/Config","path":"Tablo/Config.html","kind":"module","full_name":"Tablo::Config","name":"Config","abstract":false,"locations":[{"filename":"src/config.cr","line_number":8,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L8"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"STYLER_TTY_ONLY","name":"STYLER_TTY_ONLY","value":"true","doc":"Checks whether styling is allowed when output is redirected.\n- `true` : styling not allowed\n- `false` : styling allowed","summary":"<p>Checks whether styling is allowed when output is redirected.</p>"},{"id":"TERMINAL_CAPPED_WIDTH","name":"TERMINAL_CAPPED_WIDTH","value":"false","doc":"Checks whether terminal size is used as table total width when packing is\ncalled without a specified width.\n- `true` : table width is capped to terminal size\n- `false` : terminal size is ignored <br />","summary":"<p>Checks whether terminal size is used as table total width when packing is called without a specified width.</p>"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The `Config` module define global getters and setters, to be used as default values\nfor all class instantiation parameters.","summary":"<p>The <code><a href=\"../Tablo/Config.html\">Config</a></code> module define global getters and setters, to be used as default values for all class instantiation parameters.</p>","class_methods":[{"html_id":"styler_tty_only=(styler_tty_only:Bool)-class-method","name":"styler_tty_only=","abstract":false,"args":[{"name":"styler_tty_only","external_name":"styler_tty_only","restriction":"Bool"}],"args_string":"(styler_tty_only : Bool)","args_html":"(styler_tty_only : Bool)","location":{"filename":"src/config.cr","line_number":13,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L13"},"def":{"name":"styler_tty_only=","args":[{"name":"styler_tty_only","external_name":"styler_tty_only","restriction":"Bool"}],"visibility":"Public","body":"@@styler_tty_only = styler_tty_only"}},{"html_id":"styler_tty_only?:Bool-class-method","name":"styler_tty_only?","abstract":false,"location":{"filename":"src/config.cr","line_number":13,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L13"},"def":{"name":"styler_tty_only?","return_type":"Bool","visibility":"Public","body":"@@styler_tty_only"}},{"html_id":"terminal_capped_width=(terminal_capped_width:Bool)-class-method","name":"terminal_capped_width=","abstract":false,"args":[{"name":"terminal_capped_width","external_name":"terminal_capped_width","restriction":"Bool"}],"args_string":"(terminal_capped_width : Bool)","args_html":"(terminal_capped_width : Bool)","location":{"filename":"src/config.cr","line_number":20,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L20"},"def":{"name":"terminal_capped_width=","args":[{"name":"terminal_capped_width","external_name":"terminal_capped_width","restriction":"Bool"}],"visibility":"Public","body":"@@terminal_capped_width = terminal_capped_width"}},{"html_id":"terminal_capped_width?:Bool-class-method","name":"terminal_capped_width?","abstract":false,"location":{"filename":"src/config.cr","line_number":20,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L20"},"def":{"name":"terminal_capped_width?","return_type":"Bool","visibility":"Public","body":"@@terminal_capped_width"}}],"types":[{"html_id":"tablo/Tablo/Config/Controls","path":"Tablo/Config/Controls.html","kind":"module","full_name":"Tablo::Config::Controls","name":"Controls","abstract":false,"locations":[{"filename":"src/config.cr","line_number":24,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L24"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BODY_WRAP_RANGE","name":"BODY_WRAP_RANGE","value":"1..8","doc":"Default range of allowable values for `body_wrap`  <br />\nCheck is done by the `Table#check_body_wrap` private method, when\ninitializing a Table.","summary":"<p>Default range of allowable values for <code>body_wrap</code>  <br /> Check is done by the <code>Table#check_body_wrap</code> private method, when initializing a Table.</p>"},{"id":"COLUMN_WIDTH_RANGE","name":"COLUMN_WIDTH_RANGE","value":"1..128","doc":"Default range of allowable values for column `width`  <br />\nCheck is done by the `Table#check_width` private method, when\ninitializing a Table.","summary":"<p>Default range of allowable values for column <code>width</code>  <br /> Check is done by the <code>Table#check_width</code> private method, when initializing a Table.</p>"},{"id":"HEADER_FREQUENCY_RANGE","name":"HEADER_FREQUENCY_RANGE","value":"0..64","doc":"Default range of allowable values for header frequency<br />\nCheck is done by the `Table#check_header_frequency` private method, when\ninitializing a Table.","summary":"<p>Default range of allowable values for header frequency<br /> Check is done by the <code>Table#check_header_frequency</code> private method, when initializing a Table.</p>"},{"id":"HEADER_WRAP_RANGE","name":"HEADER_WRAP_RANGE","value":"1..8","doc":"Default range of allowable values for `header_wrap`  <br />\nCheck is done by the `Table#check_header_wrap` private method, when\ninitializing a Table.","summary":"<p>Default range of allowable values for <code>header_wrap</code>  <br /> Check is done by the <code>Table#check_header_wrap</code> private method, when initializing a Table.</p>"},{"id":"LINE_BREAKS_RANGE","name":"LINE_BREAKS_RANGE","value":"0..8","doc":"Default range of allowable values for `line_breaks_before` and\n`line_breaks_after` attributes <br />\n Check is done in 'Tablo::Frame` struct","summary":"<p>Default range of allowable values for <code>line_breaks_before</code> and <code>line_breaks_after</code> attributes <br />  Check is done in 'Tablo::Frame` struct</p>"},{"id":"PADDING_WIDTH_RANGE","name":"PADDING_WIDTH_RANGE","value":"0..8","doc":"Default range of allowable values for paddings (left or right)<br />\nCheck is done by the `Table#check_padding` private method, when\ninitializing a Table or Column.","summary":"<p>Default range of allowable values for paddings (left or right)<br /> Check is done by the <code>Table#check_padding</code> private method, when initializing a Table or Column.</p>"},{"id":"ROUNDING_RANGE","name":"ROUNDING_RANGE","value":"-8..8","doc":"Default range of allowable values for rounding in `Tablo.dot_align` <br />\n Check is done inside `Tablo.dot_align` method","summary":"<p>Default range of allowable values for rounding in <code><a href=\"../../Tablo.html#dot_align%28value%3AFloat%2Cdec%3AInt32%2Cmode%3ADotAlign%3DDotAlign%3A%3ADotZero%29-class-method\">Tablo.dot_align</a></code> <br />  Check is done inside <code><a href=\"../../Tablo.html#dot_align%28value%3AFloat%2Cdec%3AInt32%2Cmode%3ADotAlign%3DDotAlign%3A%3ADotZero%29-class-method\">Tablo.dot_align</a></code> method</p>"},{"id":"ROW_DIVIDER_FREQUENCY_RANGE","name":"ROW_DIVIDER_FREQUENCY_RANGE","value":"1..8","doc":"Default range of allowable values for `row_divider_frequency`  <br />\nCheck is done by the `Table#check_row_divider_frequency` private method, when\ninitializing a Table.","summary":"<p>Default range of allowable values for <code>row_divider_frequency</code>  <br /> Check is done by the <code>Table#check_row_divider_frequency</code> private method, when initializing a Table.</p>"}],"namespace":{"html_id":"tablo/Tablo/Config","kind":"module","full_name":"Tablo::Config","name":"Config"},"doc":"Default control values for Table and/or Column initialization,\nwith associated getters and setters.","summary":"<p>Default control values for Table and/or Column initialization, with associated getters and setters.</p>","class_methods":[{"html_id":"body_wrap_range:Range(Int32,Int32)-class-method","name":"body_wrap_range","doc":"See `BODY_WRAP_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#BODY_WRAP_RANGE\">BODY_WRAP_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":58,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L58"},"def":{"name":"body_wrap_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@body_wrap_range"}},{"html_id":"body_wrap_range=(body_wrap_range:Range(Int32,Int32))-class-method","name":"body_wrap_range=","doc":"See `BODY_WRAP_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#BODY_WRAP_RANGE\">BODY_WRAP_RANGE</a></code></p>","abstract":false,"args":[{"name":"body_wrap_range","external_name":"body_wrap_range","restriction":"Range(Int32, Int32)"}],"args_string":"(body_wrap_range : Range(Int32, Int32))","args_html":"(body_wrap_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":58,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L58"},"def":{"name":"body_wrap_range=","args":[{"name":"body_wrap_range","external_name":"body_wrap_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@body_wrap_range = body_wrap_range"}},{"html_id":"column_width_range:Range(Int32,Int32)-class-method","name":"column_width_range","doc":"See `COLUMN_WIDTH_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#COLUMN_WIDTH_RANGE\">COLUMN_WIDTH_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":65,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L65"},"def":{"name":"column_width_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@column_width_range"}},{"html_id":"column_width_range=(column_width_range:Range(Int32,Int32))-class-method","name":"column_width_range=","doc":"See `COLUMN_WIDTH_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#COLUMN_WIDTH_RANGE\">COLUMN_WIDTH_RANGE</a></code></p>","abstract":false,"args":[{"name":"column_width_range","external_name":"column_width_range","restriction":"Range(Int32, Int32)"}],"args_string":"(column_width_range : Range(Int32, Int32))","args_html":"(column_width_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":65,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L65"},"def":{"name":"column_width_range=","args":[{"name":"column_width_range","external_name":"column_width_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@column_width_range = column_width_range"}},{"html_id":"header_frequency_range:Range(Int32,Int32)-class-method","name":"header_frequency_range","doc":"See `HEADER_FREQUENCY_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#HEADER_FREQUENCY_RANGE\">HEADER_FREQUENCY_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":37,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L37"},"def":{"name":"header_frequency_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@header_frequency_range"}},{"html_id":"header_frequency_range=(header_frequency_range:Range(Int32,Int32))-class-method","name":"header_frequency_range=","doc":"See `HEADER_FREQUENCY_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#HEADER_FREQUENCY_RANGE\">HEADER_FREQUENCY_RANGE</a></code></p>","abstract":false,"args":[{"name":"header_frequency_range","external_name":"header_frequency_range","restriction":"Range(Int32, Int32)"}],"args_string":"(header_frequency_range : Range(Int32, Int32))","args_html":"(header_frequency_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":37,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L37"},"def":{"name":"header_frequency_range=","args":[{"name":"header_frequency_range","external_name":"header_frequency_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@header_frequency_range = header_frequency_range"}},{"html_id":"header_wrap_range:Range(Int32,Int32)-class-method","name":"header_wrap_range","doc":"See `HEADER_WRAP_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#HEADER_WRAP_RANGE\">HEADER_WRAP_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":51,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L51"},"def":{"name":"header_wrap_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@header_wrap_range"}},{"html_id":"header_wrap_range=(header_wrap_range:Range(Int32,Int32))-class-method","name":"header_wrap_range=","doc":"See `HEADER_WRAP_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#HEADER_WRAP_RANGE\">HEADER_WRAP_RANGE</a></code></p>","abstract":false,"args":[{"name":"header_wrap_range","external_name":"header_wrap_range","restriction":"Range(Int32, Int32)"}],"args_string":"(header_wrap_range : Range(Int32, Int32))","args_html":"(header_wrap_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":51,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L51"},"def":{"name":"header_wrap_range=","args":[{"name":"header_wrap_range","external_name":"header_wrap_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@header_wrap_range = header_wrap_range"}},{"html_id":"line_breaks_range:Range(Int32,Int32)-class-method","name":"line_breaks_range","doc":"See `LINE_BREAKS_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#LINE_BREAKS_RANGE\">LINE_BREAKS_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":72,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L72"},"def":{"name":"line_breaks_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@line_breaks_range"}},{"html_id":"line_breaks_range=(line_breaks_range:Range(Int32,Int32))-class-method","name":"line_breaks_range=","doc":"See `LINE_BREAKS_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#LINE_BREAKS_RANGE\">LINE_BREAKS_RANGE</a></code></p>","abstract":false,"args":[{"name":"line_breaks_range","external_name":"line_breaks_range","restriction":"Range(Int32, Int32)"}],"args_string":"(line_breaks_range : Range(Int32, Int32))","args_html":"(line_breaks_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":72,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L72"},"def":{"name":"line_breaks_range=","args":[{"name":"line_breaks_range","external_name":"line_breaks_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@line_breaks_range = line_breaks_range"}},{"html_id":"padding_width_range:Range(Int32,Int32)-class-method","name":"padding_width_range","doc":"See `PADDING_WIDTH_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#PADDING_WIDTH_RANGE\">PADDING_WIDTH_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":30,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L30"},"def":{"name":"padding_width_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@padding_width_range"}},{"html_id":"padding_width_range=(padding_width_range:Range(Int32,Int32))-class-method","name":"padding_width_range=","doc":"See `PADDING_WIDTH_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#PADDING_WIDTH_RANGE\">PADDING_WIDTH_RANGE</a></code></p>","abstract":false,"args":[{"name":"padding_width_range","external_name":"padding_width_range","restriction":"Range(Int32, Int32)"}],"args_string":"(padding_width_range : Range(Int32, Int32))","args_html":"(padding_width_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":30,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L30"},"def":{"name":"padding_width_range=","args":[{"name":"padding_width_range","external_name":"padding_width_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@padding_width_range = padding_width_range"}},{"html_id":"rounding_range:Range(Int32,Int32)-class-method","name":"rounding_range","doc":"see `ROUNDING_RANGE`","summary":"<p>see <code><a href=\"../../Tablo/Config/Controls.html#ROUNDING_RANGE\">ROUNDING_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":78,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L78"},"def":{"name":"rounding_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@rounding_range"}},{"html_id":"rounding_range=(rounding_range:Range(Int32,Int32))-class-method","name":"rounding_range=","doc":"see `ROUNDING_RANGE`","summary":"<p>see <code><a href=\"../../Tablo/Config/Controls.html#ROUNDING_RANGE\">ROUNDING_RANGE</a></code></p>","abstract":false,"args":[{"name":"rounding_range","external_name":"rounding_range","restriction":"Range(Int32, Int32)"}],"args_string":"(rounding_range : Range(Int32, Int32))","args_html":"(rounding_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":78,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L78"},"def":{"name":"rounding_range=","args":[{"name":"rounding_range","external_name":"rounding_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@rounding_range = rounding_range"}},{"html_id":"row_divider_frequency_range:Range(Int32,Int32)-class-method","name":"row_divider_frequency_range","doc":"See `ROW_DIVIDER_FREQUENCY_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#ROW_DIVIDER_FREQUENCY_RANGE\">ROW_DIVIDER_FREQUENCY_RANGE</a></code></p>","abstract":false,"location":{"filename":"src/config.cr","line_number":44,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L44"},"def":{"name":"row_divider_frequency_range","return_type":"Range(Int32, Int32)","visibility":"Public","body":"@@row_divider_frequency_range"}},{"html_id":"row_divider_frequency_range=(row_divider_frequency_range:Range(Int32,Int32))-class-method","name":"row_divider_frequency_range=","doc":"See `ROW_DIVIDER_FREQUENCY_RANGE`","summary":"<p>See <code><a href=\"../../Tablo/Config/Controls.html#ROW_DIVIDER_FREQUENCY_RANGE\">ROW_DIVIDER_FREQUENCY_RANGE</a></code></p>","abstract":false,"args":[{"name":"row_divider_frequency_range","external_name":"row_divider_frequency_range","restriction":"Range(Int32, Int32)"}],"args_string":"(row_divider_frequency_range : Range(Int32, Int32))","args_html":"(row_divider_frequency_range : Range(Int32, Int32))","location":{"filename":"src/config.cr","line_number":44,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L44"},"def":{"name":"row_divider_frequency_range=","args":[{"name":"row_divider_frequency_range","external_name":"row_divider_frequency_range","restriction":"Range(Int32, Int32)"}],"visibility":"Public","body":"@@row_divider_frequency_range = row_divider_frequency_range"}}]},{"html_id":"tablo/Tablo/Config/Defaults","path":"Tablo/Config/Defaults.html","kind":"module","full_name":"Tablo::Config::Defaults","name":"Defaults","abstract":false,"locations":[{"filename":"src/config.cr","line_number":83,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L83"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BODY_ALIGNMENT","name":"BODY_ALIGNMENT","value":"nil","doc":"A default value of `nil` makes alignment dependent on data source type","summary":"<p>A default value of <code>nil</code> makes alignment dependent on data source type</p>"},{"id":"BODY_FORMATTER","name":"BODY_FORMATTER","value":"DEFAULT_FORMATTER","doc":"(see `DEFAULT_FORMATTER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_FORMATTER\">DEFAULT_FORMATTER</a></code>)</p>"},{"id":"BODY_STYLER","name":"BODY_STYLER","value":"DEFAULT_STYLER","doc":"(see `DEFAULT_STYLER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_STYLER\">DEFAULT_STYLER</a></code>)</p>"},{"id":"BODY_WRAP","name":"BODY_WRAP","value":"nil","doc":"Defaut wrapping value for multiline bodies\nnil = no limit, n = limit to n lines","summary":"<p>Defaut wrapping value for multiline bodies nil = no limit, n = limit to n lines</p>"},{"id":"BORDER_DEFINITION","name":"BORDER_DEFINITION","value":"Border::PreSet::Ascii","doc":"Default value for Border definition","summary":"<p>Default value for Border definition</p>"},{"id":"BORDER_STYLER","name":"BORDER_STYLER","value":"DEFAULT_STYLER","doc":"(see `DEFAULT_STYLER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_STYLER\">DEFAULT_STYLER</a></code>)</p>"},{"id":"COLUMN_WIDTH","name":"COLUMN_WIDTH","value":"12","doc":"Defaut column width","summary":"<p>Defaut column width</p>"},{"id":"FOOTER","name":"FOOTER","value":"Heading.new","doc":"Creates an instance of `Heading` struct with default parameters <br />\n(Default `Heading` `value` attribute is `nil`, so nothing to display)","summary":"<p>Creates an instance of <code><a href=\"../../Tablo/Heading.html\">Heading</a></code> struct with default parameters <br /> (Default <code><a href=\"../../Tablo/Heading.html\">Heading</a></code> <code>value</code> attribute is <code>nil</code>, so nothing to display)</p>"},{"id":"GROUP_ALIGNMENT","name":"GROUP_ALIGNMENT","value":"DEFAULT_HEADING_ALIGNMENT","doc":"Default group alignment","summary":"<p>Default group alignment</p>"},{"id":"GROUP_FORMATTER","name":"GROUP_FORMATTER","value":"DEFAULT_FORMATTER","doc":"(see `DEFAULT_FORMATTER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_FORMATTER\">DEFAULT_FORMATTER</a></code>)</p>"},{"id":"GROUP_STYLER","name":"GROUP_STYLER","value":"DEFAULT_STYLER","doc":"(see `DEFAULT_STYLER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_STYLER\">DEFAULT_STYLER</a></code>)</p>"},{"id":"HEADER_ALIGNMENT","name":"HEADER_ALIGNMENT","value":"nil","doc":"Default header alignment <br />\nA default value of `nil` makes alignment dependent on data source type","summary":"<p>Default header alignment <br /> A default value of <code>nil</code> makes alignment dependent on data source type</p>"},{"id":"HEADER_FORMATTER","name":"HEADER_FORMATTER","value":"DEFAULT_FORMATTER","doc":"(see `DEFAULT_FORMATTER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_FORMATTER\">DEFAULT_FORMATTER</a></code>)</p>"},{"id":"HEADER_FREQUENCY","name":"HEADER_FREQUENCY","value":"0","doc":"Defaut header frequency","summary":"<p>Defaut header frequency</p>"},{"id":"HEADER_STYLER","name":"HEADER_STYLER","value":"DEFAULT_STYLER","doc":"(see `DEFAULT_STYLER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_STYLER\">DEFAULT_STYLER</a></code>)</p>"},{"id":"HEADER_WRAP","name":"HEADER_WRAP","value":"nil","doc":"Defaut wrapping value for multiline headers\nnil = no limit, n = limit to n lines","summary":"<p>Defaut wrapping value for multiline headers nil = no limit, n = limit to n lines</p>"},{"id":"HEADING_ALIGNMENT","name":"HEADING_ALIGNMENT","value":"DEFAULT_HEADING_ALIGNMENT","doc":"Default heading alignment","summary":"<p>Default heading alignment</p>"},{"id":"HEADING_FORMATTER","name":"HEADING_FORMATTER","value":"DEFAULT_FORMATTER","doc":"(see `DEFAULT_FORMATTER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_FORMATTER\">DEFAULT_FORMATTER</a></code>)</p>"},{"id":"HEADING_STYLER","name":"HEADING_STYLER","value":"DEFAULT_STYLER","doc":"(see `DEFAULT_STYLER`)","summary":"<p>(see <code><a href=\"../../Tablo.html#DEFAULT_STYLER\">DEFAULT_STYLER</a></code>)</p>"},{"id":"LEFT_PADDING","name":"LEFT_PADDING","value":"1","doc":"Default left padding","summary":"<p>Default left padding</p>"},{"id":"MASKED_HEADERS","name":"MASKED_HEADERS","value":"false","doc":"Defaut value for masked headers","summary":"<p>Defaut value for masked headers</p>"},{"id":"OMIT_GROUP_HEADER_RULE","name":"OMIT_GROUP_HEADER_RULE","value":"false","doc":"Defaut value for omit_group_header_rule","summary":"<p>Defaut value for omit_group_header_rule</p>"},{"id":"OMIT_LAST_RULE","name":"OMIT_LAST_RULE","value":"false","doc":"Defaut value for omit_last_rule\nOmitting last rule allows joiniing of parent and child tables","summary":"<p>Defaut value for omit_last_rule Omitting last rule allows joiniing of parent and child tables</p>"},{"id":"PADDING_CHARACTER","name":"PADDING_CHARACTER","value":"\" \"","doc":"Default padding character (a String.size of 1 !)","summary":"<p>Default padding character (a String.size of 1 !)</p>"},{"id":"RIGHT_PADDING","name":"RIGHT_PADDING","value":"1","doc":"Default right padding","summary":"<p>Default right padding</p>"},{"id":"ROW_DIVIDER_FREQUENCY","name":"ROW_DIVIDER_FREQUENCY","value":"nil","doc":"Defaut row divider frequency","summary":"<p>Defaut row divider frequency</p>"},{"id":"SUBTITLE","name":"SUBTITLE","value":"Heading.new","doc":"Creates an instance of `Heading` struct with default parameters <br />\n(Default `Heading` `value` attribute is `nil`, so nothing to display)","summary":"<p>Creates an instance of <code><a href=\"../../Tablo/Heading.html\">Heading</a></code> struct with default parameters <br /> (Default <code><a href=\"../../Tablo/Heading.html\">Heading</a></code> <code>value</code> attribute is <code>nil</code>, so nothing to display)</p>"},{"id":"TITLE","name":"TITLE","value":"Heading.new","doc":"Creates an instance of `Heading` struct with default parameters <br />\n(Default `Heading` `value` attribute is `nil`, so nothing to display)","summary":"<p>Creates an instance of <code><a href=\"../../Tablo/Heading.html\">Heading</a></code> struct with default parameters <br /> (Default <code><a href=\"../../Tablo/Heading.html\">Heading</a></code> <code>value</code> attribute is <code>nil</code>, so nothing to display)</p>"},{"id":"TRUNCATION_INDICATOR","name":"TRUNCATION_INDICATOR","value":"\"~\"","doc":"Defaut truncation indicator","summary":"<p>Defaut truncation indicator</p>"},{"id":"WRAP_MODE","name":"WRAP_MODE","value":"WrapMode::Word","doc":"Defaut wrap mode (cut line at word boundary, see `WrapMode`)","summary":"<p>Defaut wrap mode (cut line at word boundary, see <code><a href=\"../../Tablo/WrapMode.html\">WrapMode</a></code>)</p>"}],"namespace":{"html_id":"tablo/Tablo/Config","kind":"module","full_name":"Tablo::Config","name":"Config"},"doc":"Default values for Table and/or Column initialization,\nwith associated getters and setters.","summary":"<p>Default values for Table and/or Column initialization, with associated getters and setters.</p>","class_methods":[{"html_id":"body_alignment:Justify|Nil-class-method","name":"body_alignment","abstract":false,"location":{"filename":"src/config.cr","line_number":86,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L86"},"def":{"name":"body_alignment","return_type":"Justify | ::Nil","visibility":"Public","body":"@@body_alignment"}},{"html_id":"body_alignment=(body_alignment:Justify|Nil)-class-method","name":"body_alignment=","abstract":false,"args":[{"name":"body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"}],"args_string":"(body_alignment : Justify | Nil)","args_html":"(body_alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> | Nil)","location":{"filename":"src/config.cr","line_number":86,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L86"},"def":{"name":"body_alignment=","args":[{"name":"body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"}],"visibility":"Public","body":"@@body_alignment = body_alignment"}},{"html_id":"body_formatter:Cell::Data::Formatter-class-method","name":"body_formatter","doc":"Default formatter for Body (see `BODY_FORMATTER`)","summary":"<p>Default formatter for Body (see <code><a href=\"../../Tablo/Config/Defaults.html#BODY_FORMATTER\">BODY_FORMATTER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":143,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L143"},"def":{"name":"body_formatter","return_type":"Cell::Data::Formatter","visibility":"Public","body":"@@body_formatter"}},{"html_id":"body_formatter=(body_formatter:Cell::Data::Formatter)-class-method","name":"body_formatter=","doc":"Default formatter for Body (see `BODY_FORMATTER`)","summary":"<p>Default formatter for Body (see <code><a href=\"../../Tablo/Config/Defaults.html#BODY_FORMATTER\">BODY_FORMATTER</a></code>)</p>","abstract":false,"args":[{"name":"body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"}],"args_string":"(body_formatter : Cell::Data::Formatter)","args_html":"(body_formatter : <a href=\"../../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a>)","location":{"filename":"src/config.cr","line_number":143,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L143"},"def":{"name":"body_formatter=","args":[{"name":"body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"}],"visibility":"Public","body":"@@body_formatter = body_formatter"}},{"html_id":"body_styler:Cell::Data::Styler-class-method","name":"body_styler","doc":"Default styler for Body (see `BODY_STYLER`)","summary":"<p>Default styler for Body (see <code><a href=\"../../Tablo/Config/Defaults.html#BODY_STYLER\">BODY_STYLER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":163,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L163"},"def":{"name":"body_styler","return_type":"Cell::Data::Styler","visibility":"Public","body":"@@body_styler"}},{"html_id":"body_styler=(body_styler:Cell::Data::Styler)-class-method","name":"body_styler=","doc":"Default styler for Body (see `BODY_STYLER`)","summary":"<p>Default styler for Body (see <code><a href=\"../../Tablo/Config/Defaults.html#BODY_STYLER\">BODY_STYLER</a></code>)</p>","abstract":false,"args":[{"name":"body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"}],"args_string":"(body_styler : Cell::Data::Styler)","args_html":"(body_styler : <a href=\"../../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a>)","location":{"filename":"src/config.cr","line_number":163,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L163"},"def":{"name":"body_styler=","args":[{"name":"body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"}],"visibility":"Public","body":"@@body_styler = body_styler"}},{"html_id":"body_wrap:Int32|Nil-class-method","name":"body_wrap","abstract":false,"location":{"filename":"src/config.cr","line_number":205,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L205"},"def":{"name":"body_wrap","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@body_wrap"}},{"html_id":"body_wrap=(body_wrap:Int32|Nil)-class-method","name":"body_wrap=","abstract":false,"args":[{"name":"body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"}],"args_string":"(body_wrap : Int32 | Nil)","args_html":"(body_wrap : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":205,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L205"},"def":{"name":"body_wrap=","args":[{"name":"body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@body_wrap = body_wrap"}},{"html_id":"border_definition:String|Border::PreSet-class-method","name":"border_definition","abstract":false,"location":{"filename":"src/config.cr","line_number":105,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L105"},"def":{"name":"border_definition","return_type":"String | Border::PreSet","visibility":"Public","body":"@@border_definition"}},{"html_id":"border_definition=(border_definition:String|Border::PreSet)-class-method","name":"border_definition=","abstract":false,"args":[{"name":"border_definition","external_name":"border_definition","restriction":"String | Border::PreSet"}],"args_string":"(border_definition : String | Border::PreSet)","args_html":"(border_definition : String | <a href=\"../../Tablo/Border/PreSet.html\">Border::PreSet</a>)","location":{"filename":"src/config.cr","line_number":105,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L105"},"def":{"name":"border_definition=","args":[{"name":"border_definition","external_name":"border_definition","restriction":"String | Border::PreSet"}],"visibility":"Public","body":"@@border_definition = border_definition"}},{"html_id":"border_styler:Border::Styler-class-method","name":"border_styler","doc":"Default styler for Border (see `BORDER_STYLER`)","summary":"<p>Default styler for Border (see <code><a href=\"../../Tablo/Config/Defaults.html#BORDER_STYLER\">BORDER_STYLER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L110"},"def":{"name":"border_styler","return_type":"Border::Styler","visibility":"Public","body":"@@border_styler"}},{"html_id":"border_styler=(border_styler:Border::Styler)-class-method","name":"border_styler=","doc":"Default styler for Border (see `BORDER_STYLER`)","summary":"<p>Default styler for Border (see <code><a href=\"../../Tablo/Config/Defaults.html#BORDER_STYLER\">BORDER_STYLER</a></code>)</p>","abstract":false,"args":[{"name":"border_styler","external_name":"border_styler","restriction":"Border::Styler"}],"args_string":"(border_styler : Border::Styler)","args_html":"(border_styler : <a href=\"../../Tablo/Border/Styler.html\">Border::Styler</a>)","location":{"filename":"src/config.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L110"},"def":{"name":"border_styler=","args":[{"name":"border_styler","external_name":"border_styler","restriction":"Border::Styler"}],"visibility":"Public","body":"@@border_styler = border_styler"}},{"html_id":"column_width:Int32-class-method","name":"column_width","abstract":false,"location":{"filename":"src/config.cr","line_number":183,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L183"},"def":{"name":"column_width","return_type":"Int32","visibility":"Public","body":"@@column_width"}},{"html_id":"column_width=(column_width:Int32)-class-method","name":"column_width=","abstract":false,"args":[{"name":"column_width","external_name":"column_width","restriction":"Int32"}],"args_string":"(column_width : Int32)","args_html":"(column_width : Int32)","location":{"filename":"src/config.cr","line_number":183,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L183"},"def":{"name":"column_width=","args":[{"name":"column_width","external_name":"column_width","restriction":"Int32"}],"visibility":"Public","body":"@@column_width = column_width"}},{"html_id":"footer:Heading-class-method","name":"footer","abstract":false,"location":{"filename":"src/config.cr","line_number":101,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L101"},"def":{"name":"footer","return_type":"Heading","visibility":"Public","body":"@@footer"}},{"html_id":"footer=(footer:Heading)-class-method","name":"footer=","abstract":false,"args":[{"name":"footer","external_name":"footer","restriction":"Heading"}],"args_string":"(footer : Heading)","args_html":"(footer : <a href=\"../../Tablo/Heading.html\">Heading</a>)","location":{"filename":"src/config.cr","line_number":101,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L101"},"def":{"name":"footer=","args":[{"name":"footer","external_name":"footer","restriction":"Heading"}],"visibility":"Public","body":"@@footer = footer"}},{"html_id":"group_alignment:Justify-class-method","name":"group_alignment","abstract":false,"location":{"filename":"src/config.cr","line_number":118,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L118"},"def":{"name":"group_alignment","return_type":"Justify","visibility":"Public","body":"@@group_alignment"}},{"html_id":"group_alignment=(group_alignment:Justify)-class-method","name":"group_alignment=","abstract":false,"args":[{"name":"group_alignment","external_name":"group_alignment","restriction":"Justify"}],"args_string":"(group_alignment : Justify)","args_html":"(group_alignment : <a href=\"../../Tablo/Justify.html\">Justify</a>)","location":{"filename":"src/config.cr","line_number":118,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L118"},"def":{"name":"group_alignment=","args":[{"name":"group_alignment","external_name":"group_alignment","restriction":"Justify"}],"visibility":"Public","body":"@@group_alignment = group_alignment"}},{"html_id":"group_formatter:Cell::Text::Formatter-class-method","name":"group_formatter","doc":"Default formatter for Group (see `GROUP_FORMATTER`)","summary":"<p>Default formatter for Group (see <code><a href=\"../../Tablo/Config/Defaults.html#GROUP_FORMATTER\">GROUP_FORMATTER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":133,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L133"},"def":{"name":"group_formatter","return_type":"Cell::Text::Formatter","visibility":"Public","body":"@@group_formatter"}},{"html_id":"group_formatter=(group_formatter:Cell::Text::Formatter)-class-method","name":"group_formatter=","doc":"Default formatter for Group (see `GROUP_FORMATTER`)","summary":"<p>Default formatter for Group (see <code><a href=\"../../Tablo/Config/Defaults.html#GROUP_FORMATTER\">GROUP_FORMATTER</a></code>)</p>","abstract":false,"args":[{"name":"group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"}],"args_string":"(group_formatter : Cell::Text::Formatter)","args_html":"(group_formatter : <a href=\"../../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a>)","location":{"filename":"src/config.cr","line_number":133,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L133"},"def":{"name":"group_formatter=","args":[{"name":"group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"}],"visibility":"Public","body":"@@group_formatter = group_formatter"}},{"html_id":"group_styler:Cell::Text::Styler-class-method","name":"group_styler","doc":"Default styler for Group (see `GROUP_STYLER`)","summary":"<p>Default styler for Group (see <code><a href=\"../../Tablo/Config/Defaults.html#GROUP_STYLER\">GROUP_STYLER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":153,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L153"},"def":{"name":"group_styler","return_type":"Cell::Text::Styler","visibility":"Public","body":"@@group_styler"}},{"html_id":"group_styler=(group_styler:Cell::Text::Styler)-class-method","name":"group_styler=","doc":"Default styler for Group (see `GROUP_STYLER`)","summary":"<p>Default styler for Group (see <code><a href=\"../../Tablo/Config/Defaults.html#GROUP_STYLER\">GROUP_STYLER</a></code>)</p>","abstract":false,"args":[{"name":"group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"}],"args_string":"(group_styler : Cell::Text::Styler)","args_html":"(group_styler : <a href=\"../../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a>)","location":{"filename":"src/config.cr","line_number":153,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L153"},"def":{"name":"group_styler=","args":[{"name":"group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"}],"visibility":"Public","body":"@@group_styler = group_styler"}},{"html_id":"header_alignment:Justify|Nil-class-method","name":"header_alignment","abstract":false,"location":{"filename":"src/config.cr","line_number":123,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L123"},"def":{"name":"header_alignment","return_type":"Justify | ::Nil","visibility":"Public","body":"@@header_alignment"}},{"html_id":"header_alignment=(header_alignment:Justify|Nil)-class-method","name":"header_alignment=","abstract":false,"args":[{"name":"header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"}],"args_string":"(header_alignment : Justify | Nil)","args_html":"(header_alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> | Nil)","location":{"filename":"src/config.cr","line_number":123,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L123"},"def":{"name":"header_alignment=","args":[{"name":"header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"}],"visibility":"Public","body":"@@header_alignment = header_alignment"}},{"html_id":"header_formatter:Cell::Data::Formatter-class-method","name":"header_formatter","doc":"Default formatter for Header (see `HEADER_FORMATTER`)","summary":"<p>Default formatter for Header (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADER_FORMATTER\">HEADER_FORMATTER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":138,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L138"},"def":{"name":"header_formatter","return_type":"Cell::Data::Formatter","visibility":"Public","body":"@@header_formatter"}},{"html_id":"header_formatter=(header_formatter:Cell::Data::Formatter)-class-method","name":"header_formatter=","doc":"Default formatter for Header (see `HEADER_FORMATTER`)","summary":"<p>Default formatter for Header (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADER_FORMATTER\">HEADER_FORMATTER</a></code>)</p>","abstract":false,"args":[{"name":"header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"}],"args_string":"(header_formatter : Cell::Data::Formatter)","args_html":"(header_formatter : <a href=\"../../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a>)","location":{"filename":"src/config.cr","line_number":138,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L138"},"def":{"name":"header_formatter=","args":[{"name":"header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"}],"visibility":"Public","body":"@@header_formatter = header_formatter"}},{"html_id":"header_frequency:Int32|Nil-class-method","name":"header_frequency","abstract":false,"location":{"filename":"src/config.cr","line_number":187,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L187"},"def":{"name":"header_frequency","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@header_frequency"}},{"html_id":"header_frequency=(header_frequency:Int32|Nil)-class-method","name":"header_frequency=","abstract":false,"args":[{"name":"header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"}],"args_string":"(header_frequency : Int32 | Nil)","args_html":"(header_frequency : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":187,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L187"},"def":{"name":"header_frequency=","args":[{"name":"header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@header_frequency = header_frequency"}},{"html_id":"header_styler:Cell::Data::Styler-class-method","name":"header_styler","doc":"Default styler for Header (see `HEADER_STYLER`)","summary":"<p>Default styler for Header (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADER_STYLER\">HEADER_STYLER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":158,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L158"},"def":{"name":"header_styler","return_type":"Cell::Data::Styler","visibility":"Public","body":"@@header_styler"}},{"html_id":"header_styler=(header_styler:Cell::Data::Styler)-class-method","name":"header_styler=","doc":"Default styler for Header (see `HEADER_STYLER`)","summary":"<p>Default styler for Header (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADER_STYLER\">HEADER_STYLER</a></code>)</p>","abstract":false,"args":[{"name":"header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"}],"args_string":"(header_styler : Cell::Data::Styler)","args_html":"(header_styler : <a href=\"../../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a>)","location":{"filename":"src/config.cr","line_number":158,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L158"},"def":{"name":"header_styler=","args":[{"name":"header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"}],"visibility":"Public","body":"@@header_styler = header_styler"}},{"html_id":"header_wrap:Int32|Nil-class-method","name":"header_wrap","abstract":false,"location":{"filename":"src/config.cr","line_number":200,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L200"},"def":{"name":"header_wrap","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@header_wrap"}},{"html_id":"header_wrap=(header_wrap:Int32|Nil)-class-method","name":"header_wrap=","abstract":false,"args":[{"name":"header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"}],"args_string":"(header_wrap : Int32 | Nil)","args_html":"(header_wrap : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":200,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L200"},"def":{"name":"header_wrap=","args":[{"name":"header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@header_wrap = header_wrap"}},{"html_id":"heading_alignment:Justify-class-method","name":"heading_alignment","abstract":false,"location":{"filename":"src/config.cr","line_number":114,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L114"},"def":{"name":"heading_alignment","return_type":"Justify","visibility":"Public","body":"@@heading_alignment"}},{"html_id":"heading_alignment=(heading_alignment:Justify)-class-method","name":"heading_alignment=","abstract":false,"args":[{"name":"heading_alignment","external_name":"heading_alignment","restriction":"Justify"}],"args_string":"(heading_alignment : Justify)","args_html":"(heading_alignment : <a href=\"../../Tablo/Justify.html\">Justify</a>)","location":{"filename":"src/config.cr","line_number":114,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L114"},"def":{"name":"heading_alignment=","args":[{"name":"heading_alignment","external_name":"heading_alignment","restriction":"Justify"}],"visibility":"Public","body":"@@heading_alignment = heading_alignment"}},{"html_id":"heading_formatter:Cell::Text::Formatter-class-method","name":"heading_formatter","doc":"Default formatter for Heading (see `HEADING_FORMATTER`)","summary":"<p>Default formatter for Heading (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADING_FORMATTER\">HEADING_FORMATTER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":128,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L128"},"def":{"name":"heading_formatter","return_type":"Cell::Text::Formatter","visibility":"Public","body":"@@heading_formatter"}},{"html_id":"heading_formatter=(heading_formatter:Cell::Text::Formatter)-class-method","name":"heading_formatter=","doc":"Default formatter for Heading (see `HEADING_FORMATTER`)","summary":"<p>Default formatter for Heading (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADING_FORMATTER\">HEADING_FORMATTER</a></code>)</p>","abstract":false,"args":[{"name":"heading_formatter","external_name":"heading_formatter","restriction":"Cell::Text::Formatter"}],"args_string":"(heading_formatter : Cell::Text::Formatter)","args_html":"(heading_formatter : <a href=\"../../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a>)","location":{"filename":"src/config.cr","line_number":128,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L128"},"def":{"name":"heading_formatter=","args":[{"name":"heading_formatter","external_name":"heading_formatter","restriction":"Cell::Text::Formatter"}],"visibility":"Public","body":"@@heading_formatter = heading_formatter"}},{"html_id":"heading_styler:Cell::Text::Styler-class-method","name":"heading_styler","doc":"Default styler for Heading (see `HEADING_STYLER`)","summary":"<p>Default styler for Heading (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADING_STYLER\">HEADING_STYLER</a></code>)</p>","abstract":false,"location":{"filename":"src/config.cr","line_number":148,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L148"},"def":{"name":"heading_styler","return_type":"Cell::Text::Styler","visibility":"Public","body":"@@heading_styler"}},{"html_id":"heading_styler=(heading_styler:Cell::Text::Styler)-class-method","name":"heading_styler=","doc":"Default styler for Heading (see `HEADING_STYLER`)","summary":"<p>Default styler for Heading (see <code><a href=\"../../Tablo/Config/Defaults.html#HEADING_STYLER\">HEADING_STYLER</a></code>)</p>","abstract":false,"args":[{"name":"heading_styler","external_name":"heading_styler","restriction":"Cell::Text::Styler"}],"args_string":"(heading_styler : Cell::Text::Styler)","args_html":"(heading_styler : <a href=\"../../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a>)","location":{"filename":"src/config.cr","line_number":148,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L148"},"def":{"name":"heading_styler=","args":[{"name":"heading_styler","external_name":"heading_styler","restriction":"Cell::Text::Styler"}],"visibility":"Public","body":"@@heading_styler = heading_styler"}},{"html_id":"left_padding:Int32-class-method","name":"left_padding","abstract":false,"location":{"filename":"src/config.cr","line_number":167,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L167"},"def":{"name":"left_padding","return_type":"Int32","visibility":"Public","body":"@@left_padding"}},{"html_id":"left_padding=(left_padding:Int32)-class-method","name":"left_padding=","abstract":false,"args":[{"name":"left_padding","external_name":"left_padding","restriction":"Int32"}],"args_string":"(left_padding : Int32)","args_html":"(left_padding : Int32)","location":{"filename":"src/config.cr","line_number":167,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L167"},"def":{"name":"left_padding=","args":[{"name":"left_padding","external_name":"left_padding","restriction":"Int32"}],"visibility":"Public","body":"@@left_padding = left_padding"}},{"html_id":"masked_headers=(masked_headers:Bool)-class-method","name":"masked_headers=","abstract":false,"args":[{"name":"masked_headers","external_name":"masked_headers","restriction":"Bool"}],"args_string":"(masked_headers : Bool)","args_html":"(masked_headers : Bool)","location":{"filename":"src/config.cr","line_number":209,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L209"},"def":{"name":"masked_headers=","args":[{"name":"masked_headers","external_name":"masked_headers","restriction":"Bool"}],"visibility":"Public","body":"@@masked_headers = masked_headers"}},{"html_id":"masked_headers?:Bool-class-method","name":"masked_headers?","abstract":false,"location":{"filename":"src/config.cr","line_number":209,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L209"},"def":{"name":"masked_headers?","return_type":"Bool","visibility":"Public","body":"@@masked_headers"}},{"html_id":"omit_group_header_rule=(omit_group_header_rule:Bool)-class-method","name":"omit_group_header_rule=","abstract":false,"args":[{"name":"omit_group_header_rule","external_name":"omit_group_header_rule","restriction":"Bool"}],"args_string":"(omit_group_header_rule : Bool)","args_html":"(omit_group_header_rule : Bool)","location":{"filename":"src/config.cr","line_number":213,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L213"},"def":{"name":"omit_group_header_rule=","args":[{"name":"omit_group_header_rule","external_name":"omit_group_header_rule","restriction":"Bool"}],"visibility":"Public","body":"@@omit_group_header_rule = omit_group_header_rule"}},{"html_id":"omit_group_header_rule?:Bool-class-method","name":"omit_group_header_rule?","abstract":false,"location":{"filename":"src/config.cr","line_number":213,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L213"},"def":{"name":"omit_group_header_rule?","return_type":"Bool","visibility":"Public","body":"@@omit_group_header_rule"}},{"html_id":"omit_last_rule=(omit_last_rule:Bool)-class-method","name":"omit_last_rule=","abstract":false,"args":[{"name":"omit_last_rule","external_name":"omit_last_rule","restriction":"Bool"}],"args_string":"(omit_last_rule : Bool)","args_html":"(omit_last_rule : Bool)","location":{"filename":"src/config.cr","line_number":218,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L218"},"def":{"name":"omit_last_rule=","args":[{"name":"omit_last_rule","external_name":"omit_last_rule","restriction":"Bool"}],"visibility":"Public","body":"@@omit_last_rule = omit_last_rule"}},{"html_id":"omit_last_rule?:Bool-class-method","name":"omit_last_rule?","abstract":false,"location":{"filename":"src/config.cr","line_number":218,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L218"},"def":{"name":"omit_last_rule?","return_type":"Bool","visibility":"Public","body":"@@omit_last_rule"}},{"html_id":"padding_character:String-class-method","name":"padding_character","abstract":false,"location":{"filename":"src/config.cr","line_number":175,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L175"},"def":{"name":"padding_character","return_type":"String","visibility":"Public","body":"@@padding_character"}},{"html_id":"padding_character=(padding_character:String)-class-method","name":"padding_character=","abstract":false,"args":[{"name":"padding_character","external_name":"padding_character","restriction":"String"}],"args_string":"(padding_character : String)","args_html":"(padding_character : String)","location":{"filename":"src/config.cr","line_number":175,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L175"},"def":{"name":"padding_character=","args":[{"name":"padding_character","external_name":"padding_character","restriction":"String"}],"visibility":"Public","body":"@@padding_character = padding_character"}},{"html_id":"right_padding:Int32-class-method","name":"right_padding","abstract":false,"location":{"filename":"src/config.cr","line_number":171,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L171"},"def":{"name":"right_padding","return_type":"Int32","visibility":"Public","body":"@@right_padding"}},{"html_id":"right_padding=(right_padding:Int32)-class-method","name":"right_padding=","abstract":false,"args":[{"name":"right_padding","external_name":"right_padding","restriction":"Int32"}],"args_string":"(right_padding : Int32)","args_html":"(right_padding : Int32)","location":{"filename":"src/config.cr","line_number":171,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L171"},"def":{"name":"right_padding=","args":[{"name":"right_padding","external_name":"right_padding","restriction":"Int32"}],"visibility":"Public","body":"@@right_padding = right_padding"}},{"html_id":"row_divider_frequency:Int32|Nil-class-method","name":"row_divider_frequency","abstract":false,"location":{"filename":"src/config.cr","line_number":191,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L191"},"def":{"name":"row_divider_frequency","return_type":"Int32 | ::Nil","visibility":"Public","body":"@@row_divider_frequency"}},{"html_id":"row_divider_frequency=(row_divider_frequency:Int32|Nil)-class-method","name":"row_divider_frequency=","abstract":false,"args":[{"name":"row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"}],"args_string":"(row_divider_frequency : Int32 | Nil)","args_html":"(row_divider_frequency : Int32 | Nil)","location":{"filename":"src/config.cr","line_number":191,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L191"},"def":{"name":"row_divider_frequency=","args":[{"name":"row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"@@row_divider_frequency = row_divider_frequency"}},{"html_id":"subtitle:Heading-class-method","name":"subtitle","abstract":false,"location":{"filename":"src/config.cr","line_number":96,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L96"},"def":{"name":"subtitle","return_type":"Heading","visibility":"Public","body":"@@subtitle"}},{"html_id":"subtitle=(subtitle:Heading)-class-method","name":"subtitle=","abstract":false,"args":[{"name":"subtitle","external_name":"subtitle","restriction":"Heading"}],"args_string":"(subtitle : Heading)","args_html":"(subtitle : <a href=\"../../Tablo/Heading.html\">Heading</a>)","location":{"filename":"src/config.cr","line_number":96,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L96"},"def":{"name":"subtitle=","args":[{"name":"subtitle","external_name":"subtitle","restriction":"Heading"}],"visibility":"Public","body":"@@subtitle = subtitle"}},{"html_id":"title:Heading-class-method","name":"title","abstract":false,"location":{"filename":"src/config.cr","line_number":91,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L91"},"def":{"name":"title","return_type":"Heading","visibility":"Public","body":"@@title"}},{"html_id":"title=(title:Heading)-class-method","name":"title=","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"Heading"}],"args_string":"(title : Heading)","args_html":"(title : <a href=\"../../Tablo/Heading.html\">Heading</a>)","location":{"filename":"src/config.cr","line_number":91,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L91"},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"Heading"}],"visibility":"Public","body":"@@title = title"}},{"html_id":"truncation_indicator:String-class-method","name":"truncation_indicator","abstract":false,"location":{"filename":"src/config.cr","line_number":179,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L179"},"def":{"name":"truncation_indicator","return_type":"String","visibility":"Public","body":"@@truncation_indicator"}},{"html_id":"truncation_indicator=(truncation_indicator:String)-class-method","name":"truncation_indicator=","abstract":false,"args":[{"name":"truncation_indicator","external_name":"truncation_indicator","restriction":"String"}],"args_string":"(truncation_indicator : String)","args_html":"(truncation_indicator : String)","location":{"filename":"src/config.cr","line_number":179,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L179"},"def":{"name":"truncation_indicator=","args":[{"name":"truncation_indicator","external_name":"truncation_indicator","restriction":"String"}],"visibility":"Public","body":"@@truncation_indicator = truncation_indicator"}},{"html_id":"wrap_mode:WrapMode-class-method","name":"wrap_mode","abstract":false,"location":{"filename":"src/config.cr","line_number":195,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L195"},"def":{"name":"wrap_mode","return_type":"WrapMode","visibility":"Public","body":"@@wrap_mode"}},{"html_id":"wrap_mode=(wrap_mode:WrapMode)-class-method","name":"wrap_mode=","abstract":false,"args":[{"name":"wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"}],"args_string":"(wrap_mode : WrapMode)","args_html":"(wrap_mode : <a href=\"../../Tablo/WrapMode.html\">WrapMode</a>)","location":{"filename":"src/config.cr","line_number":195,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/config.cr#L195"},"def":{"name":"wrap_mode=","args":[{"name":"wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"}],"visibility":"Public","body":"@@wrap_mode = wrap_mode"}}]}]},{"html_id":"tablo/Tablo/DotAlign","path":"Tablo/DotAlign.html","kind":"enum","full_name":"Tablo::DotAlign","name":"DotAlign","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/tablo.cr","line_number":14,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L14"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Blank","name":"Blank","value":"0"},{"id":"NoDot","name":"NoDot","value":"1"},{"id":"DotOnly","name":"DotOnly","value":"2"},{"id":"DotZero","name":"DotZero","value":"3"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Used by `Tablo.dot_align` class method for floats formatting, where\nall trailing decimal zeroes are replaced by spaces. <br />\n\nspecial formatting is further applied depending on enum values:\n- `Blank`   = whole field is blank if value == 0\n- `NoDot`   = decimal part of field (including dot) is blank if all decimals are zeroes\n- `DotOnly` = decimal part of field is blank if all decimals are zeroes\n- `DotZero` = decimal part of field is blank if all decimals are zeroes, except first (.0)","summary":"<p>Used by <code><a href=\"../Tablo.html#dot_align%28value%3AFloat%2Cdec%3AInt32%2Cmode%3ADotAlign%3DDotAlign%3A%3ADotZero%29-class-method\">Tablo.dot_align</a></code> class method for floats formatting, where all trailing decimal zeroes are replaced by spaces.</p>","instance_methods":[{"html_id":"blank?-instance-method","name":"blank?","abstract":false,"location":{"filename":"src/tablo.cr","line_number":15,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L15"},"def":{"name":"blank?","visibility":"Public","body":"self == Blank"}},{"html_id":"dot_only?-instance-method","name":"dot_only?","abstract":false,"location":{"filename":"src/tablo.cr","line_number":17,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L17"},"def":{"name":"dot_only?","visibility":"Public","body":"self == DotOnly"}},{"html_id":"dot_zero?-instance-method","name":"dot_zero?","abstract":false,"location":{"filename":"src/tablo.cr","line_number":18,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L18"},"def":{"name":"dot_zero?","visibility":"Public","body":"self == DotZero"}},{"html_id":"no_dot?-instance-method","name":"no_dot?","abstract":false,"location":{"filename":"src/tablo.cr","line_number":16,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/tablo.cr#L16"},"def":{"name":"no_dot?","visibility":"Public","body":"self == NoDot"}}]},{"html_id":"tablo/Tablo/Error","path":"Tablo/Error.html","kind":"class","full_name":"Tablo::Error","name":"Error","abstract":false,"superclass":{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":169,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L169"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"tablo/Tablo/Error/DuplicateLabel","kind":"class","full_name":"Tablo::Error::DuplicateLabel","name":"DuplicateLabel"},{"html_id":"tablo/Tablo/Error/GroupEmpty","kind":"class","full_name":"Tablo::Error::GroupEmpty","name":"GroupEmpty"},{"html_id":"tablo/Tablo/Error/InvalidBorderDefinition","kind":"class","full_name":"Tablo::Error::InvalidBorderDefinition","name":"InvalidBorderDefinition"},{"html_id":"tablo/Tablo/Error/InvalidColumnIndex","kind":"class","full_name":"Tablo::Error::InvalidColumnIndex","name":"InvalidColumnIndex"},{"html_id":"tablo/Tablo/Error/InvalidValue","kind":"class","full_name":"Tablo::Error::InvalidValue","name":"InvalidValue"},{"html_id":"tablo/Tablo/Error/LabelNotFound","kind":"class","full_name":"Tablo::Error::LabelNotFound","name":"LabelNotFound"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The class Error contains all the error cases specific to the Tablo library\n\nIts subclasses return the precise type of error","summary":"<p>The class Error contains all the error cases specific to the Tablo library</p>","types":[{"html_id":"tablo/Tablo/Error/DuplicateLabel","path":"Tablo/Error/DuplicateLabel.html","kind":"class","full_name":"Tablo::Error::DuplicateLabel","name":"DuplicateLabel","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":172,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L172"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the column (or group) identifier (LabelType)\nis used more than once in a given situation","summary":"<p>This exception is raised when the column (or group) identifier (LabelType) is used more than once in a given situation</p>"},{"html_id":"tablo/Tablo/Error/GroupEmpty","path":"Tablo/Error/GroupEmpty.html","kind":"class","full_name":"Tablo::Error::GroupEmpty","name":"GroupEmpty","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":185,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L185"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when there is no column to group","summary":"<p>This exception is raised when there is no column to group</p>"},{"html_id":"tablo/Tablo/Error/InvalidBorderDefinition","path":"Tablo/Error/InvalidBorderDefinition.html","kind":"class","full_name":"Tablo::Error::InvalidBorderDefinition","name":"InvalidBorderDefinition","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":190,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L190"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the border definition string is invalid,\nie when its size is not exactly 16.","summary":"<p>This exception is raised when the border definition string is invalid, ie when its size is not exactly 16.</p>"},{"html_id":"tablo/Tablo/Error/InvalidColumnIndex","path":"Tablo/Error/InvalidColumnIndex.html","kind":"class","full_name":"Tablo::Error::InvalidColumnIndex","name":"InvalidColumnIndex","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":181,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L181"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the column index is out of bounds","summary":"<p>This exception is raised when the column index is out of bounds</p>"},{"html_id":"tablo/Tablo/Error/InvalidValue","path":"Tablo/Error/InvalidValue.html","kind":"class","full_name":"Tablo::Error::InvalidValue","name":"InvalidValue","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":195,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L195"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the given value is not expected\n(This is a generic error, covering various cases)","summary":"<p>This exception is raised when the given value is not expected (This is a generic error, covering various cases)</p>"},{"html_id":"tablo/Tablo/Error/LabelNotFound","path":"Tablo/Error/LabelNotFound.html","kind":"class","full_name":"Tablo::Error::LabelNotFound","name":"LabelNotFound","abstract":false,"superclass":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"ancestors":[{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},{"html_id":"tablo/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":177,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L177"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Error","kind":"class","full_name":"Tablo::Error","name":"Error"},"doc":"This exception is raised when the column (or group) identifier (`LabelType`)\ndoes not exist","summary":"<p>This exception is raised when the column (or group) identifier (<code><a href=\"../../Tablo/LabelType.html\">LabelType</a></code>) does not exist</p>"}]},{"html_id":"tablo/Tablo/Heading","path":"Tablo/Heading.html","kind":"struct","full_name":"Tablo::Heading","name":"Heading","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/heading.cr","line_number":10,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/heading.cr#L10"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The purpose of the Heading struct is to manage page titles, subtitles and\nfooters. It will therefore be used to initialize the corresponding\nattributes in Tablo::Table, ie: title, subtitle and footer. <br />\n*(Please note, however, that the display of a subtitle is dependent on the\nexistence of a title).*","summary":"<p>The purpose of the Heading struct is to manage page titles, subtitles and footers.</p>","constructors":[{"html_id":"new(value:CellType=nil,*,framed:Bool=false,line_breaks_before:Int32=0,line_breaks_after:Int32=0,alignment:Justify=Config::Defaults.heading_alignment,formatter:Cell::Text::Formatter=Config::Defaults.heading_formatter,styler:Cell::Text::Styler=Config::Defaults.heading_styler,repeated:Bool=false,page_break:Bool=false)-class-method","name":"new","doc":"The struct Heading instantiation can accept up to 9 parameters, all of\nwhich have a default value.\n\n- `value`: type is `CellType` <br />\n  Default value is `nil`, which means nothing is displayed <br />\n  This is the heading's display content.\n\n- `framed`: type is `Bool` <br />\n  Default value is `false` <br />\n  If true, the heading's content is framed.\n\n- `line_breaks_before`: type is `Int32`<br />\n  Default value is 0\n\n- `line_breaks_after`: type is `Int32`<br />\n  Default value is 0\n\n  Permitted range of values for these last 2 parameters is governed by\n  `Config::Controls.line_breaks_range`. <br />\n  (an `Error::InvalidValue` exception  is raised if not in range. <br />\n  (see explanations below for their usage)\n\n- `alignment`: type is `Justify` <br />\n  Default:  defined in `Config::Defaults.heading_alignment`\n\n- `formatter`:  a Proc whose type is `Cell::Text::Formatter` <br />\n  Default: set by `Config::Defaults.heading_formatter`\n\n- `styler`:  a Proc whose type is `Cell::Text::Styler` <br />\n  Default: set by `Config::Defaults.heading_styler`\n\n- `repeated`: type is `Bool` <br />\n  Default value is `false` <br />\n  This attribute governs the repetition of title and subtitle when the\n  `header_frequency` attribute of `Table` is greater than 0 (if `true`, title and subtitle\n  are inserted before the repeated group and header rows). <br />\n  *-> only applicable to the title attribute*\n\n- `page_break`: type is `Bool` <br />\n   Default value is `false` <br />\n   If true, a page break is inserted after the footer content (or after the\n   footer frame, but note that in this case, it prevents the join with the\n   frame that follows when the value of the `omit_last_rule` parameter of\n   `Table` is `true`). <br />\n  *-> only applicable to the footer attribute*\n\nA minimal example could be:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading.new(\"My title\", framed: true)) do |t|\n  t.add_column(\"itself\", &.itself)\nend\nputs table\n```\n\n```\n+--------------+\n|   My title   |\n+--------------+\n|       itself |\n+--------------+\n|            1 |\n|            2 |\n|            3 |\n+--------------+\n```\n\n__Use of `line_breaks_before` and `line_breaks_after` parameters__\n\nThese 2 parameters help define the number of line breaks between adjacent\nframed rows.  The value of this number is the greater of the values\nbetween the `line_breaks_after` value of one row and the\n`line_breaks_before` value of the next, bearing in mind that for Group,\nHeader and Body row types, or unframed Heading types, these values are always equal to 0.\n\nIn the following example:\n\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([1, 2, 3],\n  title: Tablo::Heading.new(\"My title\", framed: true,\n    line_breaks_after: 2),\n  footer: Tablo::Heading.new(\"My footer\", framed: true,\n    line_breaks_before: 1)) do |t|\n  t.add_column(\"itself\", &.itself)\nend\nputs table\n```\nwe see that the framed title is separated from the table body by one blank line,\nbut two line breaks have been issued. We can also see that the footer is not\njoined to the last body row because of the `line_breaks_before` parameter set to 1.\n\n```\n+--------------+\n|   My title   |\n+--------------+\n\n+--------------+\n|       itself |\n+--------------+\n|            1 |\n|            2 |\n|            3 |\n+--------------+\n+--------------+\n|   My footer  |\n+--------------+\n```\nCompare this with the previous example, where no line breaks were generated.","summary":"<p>The struct Heading instantiation can accept up to 9 parameters, all of which have a default value.</p>","abstract":false,"args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"","external_name":"","restriction":""},{"name":"framed","default_value":"false","external_name":"framed","restriction":"Bool"},{"name":"line_breaks_before","default_value":"0","external_name":"line_breaks_before","restriction":"Int32"},{"name":"line_breaks_after","default_value":"0","external_name":"line_breaks_after","restriction":"Int32"},{"name":"alignment","default_value":"Config::Defaults.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config::Defaults.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config::Defaults.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"},{"name":"repeated","default_value":"false","external_name":"repeated","restriction":"Bool"},{"name":"page_break","default_value":"false","external_name":"page_break","restriction":"Bool"}],"args_string":"(value : CellType = nil, *, framed : Bool = false, line_breaks_before : Int32 = 0, line_breaks_after : Int32 = 0, alignment : Justify = Config::Defaults.heading_alignment, formatter : Cell::Text::Formatter = Config::Defaults.heading_formatter, styler : Cell::Text::Styler = Config::Defaults.heading_styler, repeated : Bool = false, page_break : Bool = false)","args_html":"(value : <a href=\"../Tablo/CellType.html\">CellType</a> = <span class=\"n\">nil</span>, *, framed : Bool = <span class=\"n\">false</span>, line_breaks_before : Int32 = <span class=\"n\">0</span>, line_breaks_after : Int32 = <span class=\"n\">0</span>, alignment : <a href=\"../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.heading_alignment, formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.heading_formatter, styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.heading_styler, repeated : Bool = <span class=\"n\">false</span>, page_break : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/heading.cr","line_number":143,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/heading.cr#L143"},"def":{"name":"new","args":[{"name":"value","default_value":"nil","external_name":"value","restriction":"CellType"},{"name":"","external_name":"","restriction":""},{"name":"framed","default_value":"false","external_name":"framed","restriction":"Bool"},{"name":"line_breaks_before","default_value":"0","external_name":"line_breaks_before","restriction":"Int32"},{"name":"line_breaks_after","default_value":"0","external_name":"line_breaks_after","restriction":"Int32"},{"name":"alignment","default_value":"Config::Defaults.heading_alignment","external_name":"alignment","restriction":"Justify"},{"name":"formatter","default_value":"Config::Defaults.heading_formatter","external_name":"formatter","restriction":"Cell::Text::Formatter"},{"name":"styler","default_value":"Config::Defaults.heading_styler","external_name":"styler","restriction":"Cell::Text::Styler"},{"name":"repeated","default_value":"false","external_name":"repeated","restriction":"Bool"},{"name":"page_break","default_value":"false","external_name":"page_break","restriction":"Bool"}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(value, framed: framed, line_breaks_before: line_breaks_before, line_breaks_after: line_breaks_after, alignment: alignment, formatter: formatter, styler: styler, repeated: repeated, page_break: page_break)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Justify","path":"Tablo/Justify.html","kind":"enum","full_name":"Tablo::Justify","name":"Justify","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":160,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L160"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Left","name":"Left","value":"0"},{"id":"Center","name":"Center","value":"1"},{"id":"Right","name":"Right","value":"2"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Cell contents can be justified in 3 ways: to the left, to the right or centered.\n\nJustification can be explicit, defined by a dedicated attribute, or\nimplicit, depending on the cell data type.\n\nIn the latter case, in Tablo, the justification is as follows:\n- Right for cells containing numeric data\n- Centered for cells containing Boolean data\n- Left for all other cases","summary":"<p>Cell contents can be justified in 3 ways: to the left, to the right or centered.</p>","instance_methods":[{"html_id":"center?-instance-method","name":"center?","abstract":false,"location":{"filename":"src/types.cr","line_number":162,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L162"},"def":{"name":"center?","visibility":"Public","body":"self == Center"}},{"html_id":"left?-instance-method","name":"left?","abstract":false,"location":{"filename":"src/types.cr","line_number":161,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L161"},"def":{"name":"left?","visibility":"Public","body":"self == Left"}},{"html_id":"right?-instance-method","name":"right?","abstract":false,"location":{"filename":"src/types.cr","line_number":163,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L163"},"def":{"name":"right?","visibility":"Public","body":"self == Right"}}]},{"html_id":"tablo/Tablo/LabelType","path":"Tablo/LabelType.html","kind":"alias","full_name":"Tablo::LabelType","name":"LabelType","abstract":false,"locations":[{"filename":"src/types.cr","line_number":79,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L79"}],"repository_name":"tablo","program":false,"enum":false,"alias":true,"aliased":"(Int32 | String | Symbol)","aliased_html":"Int32 | String | Symbol","const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"LabelType is an union of allowed types for a column label.","summary":"<p>LabelType is an union of allowed types for a column label.</p>"},{"html_id":"tablo/Tablo/Summary","path":"Tablo/Summary.html","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary","abstract":false,"superclass":{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":7,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L7"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The purpose of the Summary class is to calculate and format aggregated\nsource data in a dedicated table, closely linked to the main table.","summary":"<p>The purpose of the Summary class is to calculate and format aggregated source data in a dedicated table, closely linked to the main table.</p>","class_methods":[{"html_id":"use(key)-class-method","name":"use","doc":"Class method to retrieve and use results of saved calculations\nby key (which is of type Symbol).<br />\n(see `Summary::UserProc`)\n\nFor example, to populate row 1 of column `:total` with the result of\na previous calculation identified by `:total_sum`:\n```\nTablo::Summary::BodyRow.new(:total, 1, ->{ Tablo::Summary.use(:total_sum) })\n```","summary":"<p>Class method to retrieve and use results of saved calculations by key (which is of type Symbol).<br /> (see <code><a href=\"../Tablo/Summary/UserProc.html\">Summary::UserProc</a></code>)</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/summary.cr","line_number":183,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L183"},"def":{"name":"use","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"proc_results[key]"}}],"constructors":[{"html_id":"new(table:Table(T),summary_definition:U,summary_options:V)-class-method","name":"new","doc":"Summary class constructor\n\n_Mandatory parameters:_\n\n- `table`: type is Table(T) <br />\n  This parameter references the main table\n\n- `summary_definition`: its type is U, as it depends on a user defined\narray containing `n` instances of `Summary::UserProc`, `Summary::HeaderColumn`,\n`Summary::BodyColumn`, `Summary::BodyRow` structs)\n\n- `summary_options`: its type is V, a NamedTuple of Table initializers (may be\nempty)\n\nHere is a complete and functional example of Detail and Summary tables\n\"working\" together (See relevant infos on usage in structs listed above)\n\n```\nrequire \"tablo\"\nrequire \"colorize\"\nrequire \"big\"\n\nTablo::Config.styler_tty_only = false\n\nstruct BigDecimal\n  include Tablo::CellType\nend\n\nstruct InvoiceItem\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : BigDecimal?)\n  end\nend\n\ninvoice = [\n  InvoiceItem.new(\"Laptop\", 3, BigDecimal.new(980)),\n  InvoiceItem.new(\"Printer\", 2, BigDecimal.new(154.99)),\n  InvoiceItem.new(\"Router\", 1, BigDecimal.new(99)),\n  InvoiceItem.new(\"Switch\", nil, BigDecimal.new(45)),\n  InvoiceItem.new(\"Accessories\", 5, BigDecimal.new(64.50)),\n]\n\ninvoice_summary_definition = [\n  Tablo::Summary::UserProc.new(\n    proc: ->(tbl : Tablo::Table(InvoiceItem)) {\n      total_sum = BigDecimal.new(0)\n      tbl.column_data(:total).each do |tot|\n        total_sum += tot.as(BigDecimal) unless tot.nil?\n      end\n      discount = total_sum * 0.05\n      total_after_discount = total_sum - discount\n      tax = total_after_discount * 0.2\n      total_due = total_after_discount + tax\n      {\n        :total_sum            => total_sum.as(Tablo::CellType),\n        :discount             => discount.as(Tablo::CellType),\n        :total_after_discount => total_after_discount.as(Tablo::CellType),\n        :tax                  => tax.as(Tablo::CellType),\n        :total_due            => total_due.as(Tablo::CellType),\n      }\n    }),\n  Tablo::Summary::BodyColumn.new(\"Price\", alignment: Tablo::Justify::Right),\n  Tablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Right,\n    formatter: ->(value : Tablo::CellType) {\n      value.is_a?(String) ? value : (\n        value.nil? ? \"\" : \"%.2f\" % value.as(BigDecimal)\n      )\n    },\n    styler: ->(_value : Tablo::CellType, coords : Tablo::Cell::Data::Coords, content : String) {\n      case coords.row_index\n      when 0, 2, 5 then content.colorize.mode(:bold).to_s\n      when 1       then content.colorize.mode(:italic).to_s\n      else              content\n      end\n    }),\n  Tablo::Summary::HeaderColumn.new(\"Product\", content: \"\"),\n  Tablo::Summary::HeaderColumn.new(\"Quantity\", content: \"\"),\n  Tablo::Summary::HeaderColumn.new(\"Price\", content: \"Total Invoice\",\n    alignment: Tablo::Justify::Right),\n  Tablo::Summary::HeaderColumn.new(:total, content: \"Amounts\"),\n\n  Tablo::Summary::BodyRow.new(\"Price\", 10, \"SubTotal\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 20, \"Discount 5%\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 30, \"S/T after discount\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 40, \"Tax (20%)\"),\n  Tablo::Summary::BodyRow.new(\"Price\", 60, \"Balance due\"),\n\n  Tablo::Summary::BodyRow.new(:total, 10, ->{ Tablo::Summary.use(:total_sum) }),\n  Tablo::Summary::BodyRow.new(:total, 20, ->{ Tablo::Summary.use(:discount) }),\n  Tablo::Summary::BodyRow.new(:total, 30, ->{ Tablo::Summary.use(:total_after_discount) }),\n  Tablo::Summary::BodyRow.new(:total, 40, ->{ Tablo::Summary.use(:tax) }),\n  Tablo::Summary::BodyRow.new(:total, 50, \"========\"),\n  Tablo::Summary::BodyRow.new(:total, 60, ->{ Tablo::Summary.use(:total_due) }),\n]\n\ntable = Tablo::Table.new(invoice,\n  omit_last_rule: true,\n  border: Tablo::Border.new(Tablo::Border::PreSet::Fancy),\n  title: Tablo::Heading.new(\"\\nInvoice\\n=======\\n\"),\n  subtitle: Tablo::Heading.new(\"Details\", framed: true)) do |t|\n  t.add_column(\"Product\",\n    &.product)\n  t.add_column(\"Quantity\",\n    body_formatter: ->(value : Tablo::CellType) {\n      (value.nil? ? \"N/A\" : value.to_s)\n    }, &.quantity)\n  t.add_column(\"Price\",\n    body_formatter: ->(value : Tablo::CellType) {\n      \"%.2f\" % value.as(BigDecimal)\n    }, &.price.as(Tablo::CellType))\n  t.add_column(:total, header: \"Total\",\n    body_formatter: ->(value : Tablo::CellType) {\n      value.nil? ? \"\" : \"%.2f\" % value.as(BigDecimal)\n    }) { |n| n.price.nil? || n.quantity.nil? ? nil : (\n    n.price.as(BigDecimal) *\n      n.quantity.as(Int32)\n  ).as(Tablo::CellType) }\nend\n\ntable.pack\ntable.add_summary(invoice_summary_definition,\n  title: Tablo::Heading.new(\"Summary\", framed: true))\ntable.summary.pack\nputs table\nputs table.summary\n```\n\n<img src=\"../assets/images/api_summary.svg\" width=\"540\">\n\nA few points of note: <br />\n- Use of the `BigDecimal` type (not included in Tablo by default, but made\n  possible by reopening the `BigDecimal` struct and adding the `include CellType`\n  statement).\n- Joining of the summary table to the main table, with the main table's\n`omit_last_rule` parameter set to `true`.\n- Row numbers need not be consecutive. What's important is that their\norder is well defined, as they will ultimately be replaced by their index\nin a sorted array of row values.\n- To obtain optimal result in packing, the main table must be packed\n  before summary table definition.","summary":"<p>Summary class constructor</p>","abstract":false,"args":[{"name":"table","external_name":"table","restriction":"Table(T)"},{"name":"summary_definition","external_name":"summary_definition","restriction":"U"},{"name":"summary_options","external_name":"summary_options","restriction":"V"}],"args_string":"(table : Table(T), summary_definition : U, summary_options : V)","args_html":"(table : <a href=\"../Tablo/Table.html\">Table</a>(T), summary_definition : U, summary_options : V)","location":{"filename":"src/summary.cr","line_number":164,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L164"},"def":{"name":"new","args":[{"name":"table","external_name":"table","restriction":"Table(T)"},{"name":"summary_definition","external_name":"summary_definition","restriction":"U"},{"name":"summary_options","external_name":"summary_options","restriction":"V"}],"visibility":"Public","body":"_ = Summary(T, U, V).allocate\n_.initialize(table, summary_definition, summary_options)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"types":[{"html_id":"tablo/Tablo/Summary/BodyColumn","path":"Tablo/Summary/BodyColumn.html","kind":"struct","full_name":"Tablo::Summary::BodyColumn","name":"BodyColumn","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":542,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L542"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::BodyColumn` struct lets you define specific\nalignment, formatting and styling on body columns.","summary":"<p>The <code><a href=\"../../Tablo/Summary/BodyColumn.html\">Summary::BodyColumn</a></code> struct lets you define specific alignment, formatting and styling on body columns.</p>","constructors":[{"html_id":"new(column:LabelType|Array(LabelType),*,alignment:Justify|Nil=nil,formatter:Cell::Data::Formatter|Nil=nil,styler:Cell::Data::Styler|Nil=nil)-class-method","name":"new","doc":"The constructor expects up to 4 parameters, of which the first, the\ncolumn identifier, is the only mandatory one (but it goes without saying\nthat at least one of the 3 optional parameters must be defined!)\n\n- `column` : type is `LabelType` (or `Array(LabelType)`, useful if\n   several columns have same parameter values)\n\n- The last three optional parameters are `alignment`,\n  `formatter` and `styler`\n\nExample:\n```\nTablo::Summary::BodyColumn.new(:total, alignment: Tablo::Justify::Right,\n  formatter: ->(value : Tablo::CellType) {\n    value.is_a?(String) ? value : (\n      value.nil? ? \"\" : \"%.2f\" % value.as(BigDecimal)\n    )\n  },\n  styler: ->(_value : Tablo::CellType, cd : Tablo::Cell::Data::Coords, fc : String) {\n    case cd.row_index\n    when 0, 2, 5 then fc.colorize.mode(:bold).to_s\n    when 1       then fc.colorize.mode(:italic).to_s\n    else              fc\n    end\n  }),\n```","summary":"<p>The constructor expects up to 4 parameters, of which the first, the column identifier, is the only mandatory one (but it goes without saying that at least one of the 3 optional parameters must be defined!)</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"","external_name":"","restriction":""},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"args_string":"(column : LabelType | Array(LabelType), *, alignment : Justify | Nil = nil, formatter : Cell::Data::Formatter | Nil = nil, styler : Cell::Data::Styler | Nil = nil)","args_html":"(column : <a href=\"../../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../../Tablo/LabelType.html\">LabelType</a>), *, alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"n\">nil</span>, formatter : <a href=\"../../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> | Nil = <span class=\"n\">nil</span>, styler : <a href=\"../../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/summary.cr","line_number":571,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L571"},"def":{"name":"new","args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"","external_name":"","restriction":""},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(column, alignment: alignment, formatter: formatter, styler: styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Summary/BodyRow","path":"Tablo/Summary/BodyRow.html","kind":"struct","full_name":"Tablo::Summary::BodyRow","name":"BodyRow","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":579,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L579"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::BodyRow` struct lets you define body rows content","summary":"<p>The <code><a href=\"../../Tablo/Summary/BodyRow.html\">Summary::BodyRow</a></code> struct lets you define body rows content</p>","constructors":[{"html_id":"new(column:LabelType,row:Int32,content:CellType|Proc(CellType))-class-method","name":"new","doc":"The constructor expects 3 mandatory parameters.\n\n- `column` : type is `LabelType`, the column identifier\n\n- `row` : type is `Int32`, the row number\n\n- `content` : type is `CellType` or a Proc returning a `CellType`\n\n`column` and `row` define the precise location of the aggregated value in the\nSummary table. Row numbers need not be contiguous; what's important is that\nthey allow results to be displayed in the desired row order.\n\nExample of `content` directly fed by a literal string:\n```\nTablo::Summary::BodyRow.new(\"Price\", 40, \"Tax (20%)\")\nTablo::Summary::BodyRow.new(\"Price\", 60, \"Balance due\"),\n```\n Example of `content` fed by a proc returning a `CellType` value:\n```\nTablo::Summary::BodyRow.new(:total, 40, ->{ Tablo::Summary.use(:tax) }),\nTablo::Summary::BodyRow.new(:total, 60, ->{ Tablo::Summary.use(:total_due) }),\n```\n\n**Important**:\nNote here the use of the `Summary.use` class method, which retrieves, via\na Symbol key, an aggregated value previously calculated in\na `Summary::UserProc`  instance.","summary":"<p>The constructor expects 3 mandatory parameters.</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"LabelType"},{"name":"row","external_name":"row","restriction":"Int32"},{"name":"content","external_name":"content","restriction":"CellType | Proc(CellType)"}],"args_string":"(column : LabelType, row : Int32, content : CellType | Proc(CellType))","args_html":"(column : <a href=\"../../Tablo/LabelType.html\">LabelType</a>, row : Int32, content : <a href=\"../../Tablo/CellType.html\">CellType</a> | Proc(<a href=\"../../Tablo/CellType.html\">CellType</a>))","location":{"filename":"src/summary.cr","line_number":609,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L609"},"def":{"name":"new","args":[{"name":"column","external_name":"column","restriction":"LabelType"},{"name":"row","external_name":"row","restriction":"Int32"},{"name":"content","external_name":"content","restriction":"CellType | Proc(CellType)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(column, row, content)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Summary/HeaderColumn","path":"Tablo/Summary/HeaderColumn.html","kind":"struct","full_name":"Tablo::Summary::HeaderColumn","name":"HeaderColumn","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":510,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L510"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::HeaderColumn` struct lets you define header content and specific\nalignment, formatting and styling","summary":"<p>The <code><a href=\"../../Tablo/Summary/HeaderColumn.html\">Summary::HeaderColumn</a></code> struct lets you define header content and specific alignment, formatting and styling</p>","constructors":[{"html_id":"new(column:LabelType|Array(LabelType),content:String,alignment:Justify|Nil=nil,formatter:Cell::Data::Formatter|Nil=nil,styler:Cell::Data::Styler|Nil=nil)-class-method","name":"new","doc":"The constructor expects up to 5 parameters, the first 2 being mandatory\n\n- `column` : type if `LabelType` <br />\n   It is the column identifier.\n\n- `content` : type is String <br />\n   (may be empty)\n\n- The last three are optional (`alignment`, `formatter` and `styler`)\n\nExamples:\n```\nTablo::Summary::HeaderColumn.new(\"Price\",\n  content: \"Total Invoice\",\n  alignment: Tablo::Justify::Right),\nTablo::Summary::HeaderColumn.new(:total,\n  content: \"Amounts\",\n  styler: ->(s : String) {s.colorize(:red).to_s}),\n```","summary":"<p>The constructor expects up to 5 parameters, the first 2 being mandatory</p>","abstract":false,"args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"content","external_name":"content","restriction":"String"},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"args_string":"(column : LabelType | Array(LabelType), content : String, alignment : Justify | Nil = nil, formatter : Cell::Data::Formatter | Nil = nil, styler : Cell::Data::Styler | Nil = nil)","args_html":"(column : <a href=\"../../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../../Tablo/LabelType.html\">LabelType</a>), content : String, alignment : <a href=\"../../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"n\">nil</span>, formatter : <a href=\"../../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> | Nil = <span class=\"n\">nil</span>, styler : <a href=\"../../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/summary.cr","line_number":532,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L532"},"def":{"name":"new","args":[{"name":"column","external_name":"column","restriction":"LabelType | Array(LabelType)"},{"name":"content","external_name":"content","restriction":"String"},{"name":"alignment","default_value":"nil","external_name":"alignment","restriction":"Justify | ::Nil"},{"name":"formatter","default_value":"nil","external_name":"formatter","restriction":"Cell::Data::Formatter | ::Nil"},{"name":"styler","default_value":"nil","external_name":"styler","restriction":"Cell::Data::Styler | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(column, content, alignment, formatter, styler)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"tablo/Tablo/Summary/UserProc","path":"Tablo/Summary/UserProc.html","kind":"struct","full_name":"Tablo::Summary::UserProc(T)","name":"UserProc","abstract":false,"superclass":{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"tablo/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/summary.cr","line_number":392,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L392"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"tablo/Tablo/Summary","kind":"class","full_name":"Tablo::Summary(T, U, V)","name":"Summary"},"doc":"The `Summary::UserProc` struct lets you define specific functions to be applied\nto source data, accessible either by column or directly from the source,\nin order to provide aggregated results.","summary":"<p>The <code><a href=\"../../Tablo/Summary/UserProc.html\">Summary::UserProc</a></code> struct lets you define specific functions to be applied to source data, accessible either by column or directly from the source, in order to provide aggregated results.</p>","constructors":[{"html_id":"new(proc:Proc(Table(T),Hash(Symbol,CellType)))-class-method","name":"new","doc":"The constructor's only parameter is a Proc, which in turn expects\na Table(T) as its only parameter.\n\n The `table` parameter allows the user to access detailed data in two ways:\n1. by directly accessing the data source (`table.sources.each ...`)\n2. by accessing data via column definition: `table.column_data(column_label).each....`\n\nNote that access via column definition allows access to data not\ndirectly present in the source, but has the disadvantage of indirect\naccess to source data via the user defined `extractor`.\n\nThe Proc must return a hash of results (of type `Tablo::CellType`), which, when\nused inside a Summary table definition, are automatically saved for\nfuture use (see the `Summary.use` method in `Summary::BodyRow`).\n\nExample of accessing data directly from source (note that, in this\nreduced example, we don't even need to define any columns):\n```\nrequire \"tablo\"\n\nstruct InvoiceItem\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : Int32?)\n  end\nend\n\ninvoice = [\n  InvoiceItem.new(\"Laptop\", 3, 98000),\n  InvoiceItem.new(\"Printer\", 2, 15499),\n  InvoiceItem.new(\"Router\", 1, 9900),\n  InvoiceItem.new(\"Switch\", nil, 4500),\n  InvoiceItem.new(\"Accessories\", 5, 6450),\n]\n\ntable = Tablo::Table.new(invoice)\n\nuserproc = Tablo::Summary::UserProc.new(\n  proc: ->(tbl : Tablo::Table(InvoiceItem)) {\n    total_sum = total_count = max_price = 0\n    tbl.sources.each do |row|\n      next unless row.quantity.is_a?(Int32) && row.price.is_a?(Int32)\n      total_count += 1\n      max_price = [max_price, row.price.as(Int32)].max\n      total_sum += row.quantity.as(Int32) * row.price.as(Int32)\n    end\n    {\n      :total_count => total_count.as(Tablo::CellType),\n      :total_sum   => total_sum.as(Tablo::CellType),\n      :max_price   => max_price.as(Tablo::CellType),\n    }\n  })\n\nhash = userproc.proc.call(table)\n\nputs hash[:total_sum]   # => 367148\nputs hash[:total_count] # => 4\nputs hash[:max_price]   # => 98000\n```\nAnother example, this time using column access via `Table#column_data`, with iterators:\n```\nrequire \"tablo\"\n\nstruct InvoiceItem\n  getter product, quantity, price\n\n  def initialize(@product : String, @quantity : Int32?, @price : Int32?)\n  end\nend\n\ninvoice = [\n  InvoiceItem.new(\"Laptop\", 3, 98000),\n  InvoiceItem.new(\"Printer\", 2, 15499),\n  InvoiceItem.new(\"Router\", 1, 9900),\n  InvoiceItem.new(\"Switch\", nil, 4500),\n  InvoiceItem.new(\"Accessories\", 5, 6450),\n]\n\ntable = Tablo::Table.new(invoice) do |t|\n  t.add_column(\"Quantity\", &.quantity)\n  t.add_column(\"Price\", &.price)\nend\n\nuserproc = Tablo::Summary::UserProc.new(\n  proc: ->(tbl : Tablo::Table(InvoiceItem)) {\n    total_sum = total_count = max_price = 0\n    iter_quantity = tbl.column_data(\"Quantity\").each\n    iter_price = tbl.column_data(\"Price\").each\n    iter = iter_quantity.zip(iter_price)\n    iter.each do |q, p|\n      next unless q.is_a?(Int32) && p.is_a?(Int32)\n      total_sum += q * p\n      total_count += 1\n      max_price = [max_price, p].max\n    end\n    {\n      :total_count => total_count.as(Tablo::CellType),\n      :total_sum   => total_sum.as(Tablo::CellType),\n      :max_price   => max_price.as(Tablo::CellType),\n    }\n  })\n\nhash = userproc.proc.call(table)\n\nputs hash[:total_sum]   # => 367148\nputs hash[:total_count] # => 4\nputs hash[:max_price]   # => 98000\n```\nNote that column access is about 3 times slower.","summary":"<p>The constructor's only parameter is a Proc, which in turn expects a Table(T) as its only parameter.</p>","abstract":false,"args":[{"name":"proc","external_name":"proc","restriction":"Proc(Table(T), Hash(Symbol, CellType))"}],"args_string":"(proc : Proc(Table(T), Hash(Symbol, CellType)))","args_html":"(proc : Proc(<a href=\"../../Tablo/Table.html\">Table</a>(T), Hash(Symbol, <a href=\"../../Tablo/CellType.html\">CellType</a>)))","location":{"filename":"src/summary.cr","line_number":504,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/summary.cr#L504"},"def":{"name":"new","args":[{"name":"proc","external_name":"proc","restriction":"Proc(Table(T), Hash(Symbol, CellType))"}],"visibility":"Public","body":"_ = UserProc(T).allocate\n_.initialize(proc)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"tablo/Tablo/Table","path":"Tablo/Table.html","kind":"class","full_name":"Tablo::Table(T)","name":"Table","abstract":false,"superclass":{"html_id":"tablo/Tablo/ATable","kind":"class","full_name":"Tablo::ATable","name":"ATable"},"ancestors":[{"html_id":"tablo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"tablo/Tablo/ATable","kind":"class","full_name":"Tablo::ATable","name":"ATable"},{"html_id":"tablo/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/table.cr","line_number":23,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L23"}],"repository_name":"tablo","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"tablo/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"The Table class is Tablo's main class. Its initialization defines the main\nparameters governing the overall operation of the Tablo library, in particular\nthe data source and column definitions.","summary":"<p>The Table class is Tablo's main class.</p>","constructors":[{"html_id":"new(sources:Enumerable(T),*,title:Heading=Config::Defaults.title,subtitle:Heading=Config::Defaults.subtitle,footer:Heading=Config::Defaults.footer,border:Border=Border.new(Config::Defaults.border_definition,Config::Defaults.border_styler),group_alignment:Justify=Config::Defaults.group_alignment,group_formatter:Cell::Text::Formatter=Config::Defaults.group_formatter,group_styler:Cell::Text::Styler=Config::Defaults.group_styler,header_alignment:Justify|Nil=Config::Defaults.header_alignment,header_formatter:Cell::Data::Formatter=Config::Defaults.header_formatter,header_styler:Cell::Data::Styler=Config::Defaults.header_styler,body_alignment:Justify|Nil=Config::Defaults.body_alignment,body_formatter:Cell::Data::Formatter=Config::Defaults.body_formatter,body_styler:Cell::Data::Styler=Config::Defaults.body_styler,left_padding:Int32=Config::Defaults.left_padding,right_padding:Int32=Config::Defaults.right_padding,padding_character:String=Config::Defaults.padding_character,truncation_indicator:String=Config::Defaults.truncation_indicator,width:Int32=Config::Defaults.column_width,header_frequency:Int32|Nil=Config::Defaults.header_frequency,row_divider_frequency:Int32|Nil=Config::Defaults.row_divider_frequency,wrap_mode:WrapMode=Config::Defaults.wrap_mode,header_wrap:Int32|Nil=Config::Defaults.header_wrap,body_wrap:Int32|Nil=Config::Defaults.body_wrap,masked_headers:Bool=Config::Defaults.masked_headers?,omit_group_header_rule:Bool=Config::Defaults.omit_group_header_rule?,omit_last_rule:Bool=Config::Defaults.omit_last_rule?)-class-method","name":"new","doc":"First constructor : Table constructor has two versions to initialize a new Table\ninstance, depending on whether a block is given or not.\n\n ```text\n Used constants                | Default values\n ----------------------------- | ------------------------------------\n DEFAULT_HEADING_ALIGNMENT     | Justify::Center\n DEFAULT_FORMATTER             | ->(c : CellType) { c.to_s }\n DEFAULT_STYLER                | ->(s : String) { s }\n DEFAULT_DATA_DEPENDENT_STYLER | ->(_c : CellType, s : String) { s }\n```\n\n_Mandatory parameters:_\n\n- `sources`: type is Enumerable(T)<br />\n  Can be any Enumerable data type _(`Range` is currently (Crystal 1.9.2)\n  not correctly supported in this context: use `Range.to_a` instead)_\n\n_Optional named parameters, with default values_\n\n- `title`: type is `Title`<br />\n  Default set by `Config::Defaults.title`<br />\n  Initializing this class without any argument set its value to `nil`,\n  so there is nothing to display\n\n- `subtitle`: type is `SubTitle`<br />\n  Default set by `Config::Defaults.subtitle`<br />\n  (Initialization: see `title`)\n\n- `footer`: type is `Footer`<br />\n  Default set by `Config::Defaults.footer`<br />\n  (Initialization: see `title`)\n\n- `border`: type is struct`Border`<br />\n  Initalized by 2 parameters :\n  - `border_definition` (default = `Config::Defaults.border_definition`,\n    which itself defaults to `Border::PreSet::Ascii`) <br />\n  Other `Border::PreSet` are: `ReducedAscii`, `Modern`,\n  `ReducedModern`, `Markdown`, `Fancy`, `Blank` and `Empty`. <br />\n  `border_definition` may also be initialized directly by a string of 16 characters.\n   - `border_styler` (default = `Config::Defaults.border_styler`)\n\n- `group_alignment`: type is `Justify`<br />\n  Default value is `Config::Defaults.group_alignment`\n\n- `group_formatter`: type is `Cell::Text::Formatter`<br />\n  Default value is `Config::Defaults.group_formatter`\n\n- `group_styler`: type is `Cell::Text::Styler` <br />\n  Default value is `Config::Defaults.group_styler`\n\n- `header_alignment`: type is `Justify?` <br />\n  Default value is `Config::Defaults.header_alignment`\n\n- `header_formatter`: type is `Cell::Data::Formatter` <br />\n  Default value is `Config::Defaults.header_formatter,`\n\n- `header_styler`: type is `Cell::Data::Styler` <br />\n  Defaut value is `Config::Defaults.header_styler`\n\n- `body_alignment`: type is `Justify?` <br />\n  Default value is `Config::Defaults.body_alignment`\n\n- `body_formatter`: type id `Cell::Data::Formatter` <br />\n  Default value is `Config::Defaults.body_formatter`\n\n- `body_styler`: type is `Cell::Data::Styler` <br />\n  Default value is `Config::Defaults.body_styler`\n\n- `left_padding`: type is `Int32`<br />\n  Default value is `Config::Defaults.left_padding` <br />\n  Permitted range of values is governed by `Config::Controls.padding_width_range` in\n  the `check_padding` method<br />\n  (raises `Error::InvalidValue` runtime exception if value not in range)\n\n- `right_padding`: type is `Int32` <br />\n  Default value is `Config::Defaults.right_padding` <br />\n  Permitted range of values is governed by `Config::Controls.padding_width_range` in\n  the `check_padding` method<br />\n  (raises `Error::InvalidValue` runtime exception if value not in range)\n\n- `padding_character`: type is `String`<br />\n  Default value is `Config::Defaults.padding_character` <br />\n  The `check_padding_character` auxiliairy method ensures the `padding_character`\n  string size is only one <br />\n  (raises an `Error::InvalidValue` runtime exception otherwise)\n\n- `truncation_indicator`: type is `String` <br />\n  Defaut value is `Config::Defaults.truncation_indicator` <br />\n  The `check_truncation_indicator` auxiliairy method ensures the\n  `truncation_indicator` string size\n  is only one (raises an `Error::InvalidValue` runtime exception otherwise)\n\n- `width`: type is `Int32` <br />\n  Default value is `Config::Defaults.column_width`<br />\n  Permitted range of values is governed by `Config::Controls.column_width_range` in the\n  `check_width` auxiliary method (raises `Error::InvalidValue` runtime exception\n  unless value in range)\n\n- `header_frequency`: type is `Int32?` <br />\n  Default value is `Config::Defaults.header_frequency` <br />\n  Permitted range of values is governed by `Config::Controls.header_frequency_range` in the\n  `check_header_frequency` auxiliary method (raises `Error::InvalidValue`\n  runtime exception\n  unless value in range or `nil`)\n\n  - If set to `0`, rows of data other than body are displayed\n    only once, at the beginning for titles and headers, at the end for the footer.\n  - If set to `n` (positive), group or column headers are repeated every `n`\n    rows, as are footers, but titles and subtitles are not repeated (unless\n    title `repeated` attribute is set to `true`)\n  - If set to `nil`, only body rows are displayed.\n\n- `row_divider_frequency`: type is `Int32?` <br />\n  Default value is `Config::Defaults.row_divider_frequency` <br />\n  Permitted range of values is governed by `Config::Controls.row_divider_frequency_range`\n  in the `check_row_divider_frequency` auxiliary method (raises `Error::InvalidValue`\n  runtime exception unless value in range or `nil`)\n\n- `wrap_mode`: type is `WrapMode` <br />\n  Default value is `Config::Defaults.wrap_mode`<br />\n  The `WrapMode` enum defines 2 modes :\n\n  - `Rune` : long lines can be cut between characters (graphemes)\n  - `Word` : long lines can be cut between words only\n\n- `header_wrap`: type is `Int32?` <br />\n  Default value is `Config::Defaults.header_wrap` <br />\n  Permitted range of values is governed by\n  `Config::Controls.header_wrap_range` in the `check_header_wrap` auxiliary method\n  (raises `Error::InvalidValue` runtime exception unless value in range or `nil`)\n\n- `body_wrap` | `Int32?`<br />\n  Default value is `Config::Defaults.body_wrap` <br />\n  Permitted range of values is governed by\n  `Config::Controls.body_wrap_range` in the `check_body_wrap` auxiliary method (raises\n  `Error::InvalidValue` runtime exception unless value in range or `nil`)\n\n- `masked_headers`: type is `Bool` <br />\n  Default value is `Config::Defaults.masked_headers?` <br />\n  If `true`, groups and column headers are not displayed <br />\n  (this does not prevent display of title, subtitle and footer)\n\n- `omit_group_header_rule`: type is `Bool` <br />\n  Default value is `Config::Defaults.omit_group_header_rule?` <br />\n  If `true`, the rule between Group and Header rows is not displayed.\n  This is useful for headers custom rendering.\n\n- `omit_last_rule`: type is `Bool` <br />\n  Default value is `Config::Defaults.omit_last_rule?` <br />\n  If `true`, the closing rule of table is not displayed.\n  This is useful for custom rendering (and notably for Detail and Summary\n  tables joining)\n\nReturns an instance of `Table(T)`","summary":"<p>First constructor : Table constructor has two versions to initialize a new Table instance, depending on whether a block is given or not.</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config::Defaults.title","external_name":"title","restriction":"Heading"},{"name":"subtitle","default_value":"Config::Defaults.subtitle","external_name":"subtitle","restriction":"Heading"},{"name":"footer","default_value":"Config::Defaults.footer","external_name":"footer","restriction":"Heading"},{"name":"border","default_value":"Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config::Defaults.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config::Defaults.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config::Defaults.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config::Defaults.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config::Defaults.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config::Defaults.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config::Defaults.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config::Defaults.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config::Defaults.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config::Defaults.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config::Defaults.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config::Defaults.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config::Defaults.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config::Defaults.column_width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config::Defaults.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config::Defaults.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config::Defaults.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config::Defaults.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config::Defaults.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config::Defaults.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config::Defaults.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config::Defaults.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"args_string":"(sources : Enumerable(T), *, title : Heading = Config::Defaults.title, subtitle : Heading = Config::Defaults.subtitle, footer : Heading = Config::Defaults.footer, border : Border = Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler), group_alignment : Justify = Config::Defaults.group_alignment, group_formatter : Cell::Text::Formatter = Config::Defaults.group_formatter, group_styler : Cell::Text::Styler = Config::Defaults.group_styler, header_alignment : Justify | Nil = Config::Defaults.header_alignment, header_formatter : Cell::Data::Formatter = Config::Defaults.header_formatter, header_styler : Cell::Data::Styler = Config::Defaults.header_styler, body_alignment : Justify | Nil = Config::Defaults.body_alignment, body_formatter : Cell::Data::Formatter = Config::Defaults.body_formatter, body_styler : Cell::Data::Styler = Config::Defaults.body_styler, left_padding : Int32 = Config::Defaults.left_padding, right_padding : Int32 = Config::Defaults.right_padding, padding_character : String = Config::Defaults.padding_character, truncation_indicator : String = Config::Defaults.truncation_indicator, width : Int32 = Config::Defaults.column_width, header_frequency : Int32 | Nil = Config::Defaults.header_frequency, row_divider_frequency : Int32 | Nil = Config::Defaults.row_divider_frequency, wrap_mode : WrapMode = Config::Defaults.wrap_mode, header_wrap : Int32 | Nil = Config::Defaults.header_wrap, body_wrap : Int32 | Nil = Config::Defaults.body_wrap, masked_headers : Bool = Config::Defaults.masked_headers?, omit_group_header_rule : Bool = Config::Defaults.omit_group_header_rule?, omit_last_rule : Bool = Config::Defaults.omit_last_rule?)","args_html":"(sources : Enumerable(T), *, title : <a href=\"../Tablo/Heading.html\">Heading</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.title, subtitle : <a href=\"../Tablo/Heading.html\">Heading</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.subtitle, footer : <a href=\"../Tablo/Heading.html\">Heading</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.footer, border : <a href=\"../Tablo/Border.html\">Border</a> = <span class=\"t\">Border</span>.new(<span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.border_definition, <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.border_styler), group_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.group_alignment, group_formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.group_formatter, group_styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.group_styler, header_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_alignment, header_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_formatter, header_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_styler, body_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_alignment, body_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_formatter, body_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_styler, left_padding : Int32 = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.left_padding, right_padding : Int32 = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.right_padding, padding_character : String = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.padding_character, truncation_indicator : String = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.truncation_indicator, width : Int32 = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.column_width, header_frequency : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_frequency, row_divider_frequency : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.row_divider_frequency, wrap_mode : <a href=\"../Tablo/WrapMode.html\">WrapMode</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.wrap_mode, header_wrap : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_wrap, body_wrap : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_wrap, masked_headers : Bool = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.masked_headers?, omit_group_header_rule : Bool = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.omit_group_header_rule?, omit_last_rule : Bool = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.omit_last_rule?)","location":{"filename":"src/table.cr","line_number":284,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L284"},"def":{"name":"new","args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config::Defaults.title","external_name":"title","restriction":"Heading"},{"name":"subtitle","default_value":"Config::Defaults.subtitle","external_name":"subtitle","restriction":"Heading"},{"name":"footer","default_value":"Config::Defaults.footer","external_name":"footer","restriction":"Heading"},{"name":"border","default_value":"Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config::Defaults.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config::Defaults.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config::Defaults.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config::Defaults.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config::Defaults.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config::Defaults.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config::Defaults.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config::Defaults.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config::Defaults.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config::Defaults.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config::Defaults.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config::Defaults.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config::Defaults.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config::Defaults.column_width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config::Defaults.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config::Defaults.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config::Defaults.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config::Defaults.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config::Defaults.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config::Defaults.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config::Defaults.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config::Defaults.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"splat_index":1,"visibility":"Public","body":"_ = Table(T).allocate\n_.initialize(sources, title: title, subtitle: subtitle, footer: footer, border: border, group_alignment: group_alignment, group_formatter: group_formatter, group_styler: group_styler, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, width: width, header_frequency: header_frequency, row_divider_frequency: row_divider_frequency, wrap_mode: wrap_mode, header_wrap: header_wrap, body_wrap: body_wrap, masked_headers: masked_headers, omit_group_header_rule: omit_group_header_rule, omit_last_rule: omit_last_rule)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(sources:Enumerable(T),*,title:Heading=Config::Defaults.title,subtitle:Heading=Config::Defaults.subtitle,footer:Heading=Config::Defaults.footer,border:Border=Border.new(Config::Defaults.border_definition,Config::Defaults.border_styler),group_alignment:Justify=Config::Defaults.group_alignment,group_formatter:Cell::Text::Formatter=Config::Defaults.group_formatter,group_styler:Cell::Text::Styler=Config::Defaults.group_styler,header_alignment:Justify|Nil=Config::Defaults.header_alignment,header_formatter:Cell::Data::Formatter=Config::Defaults.header_formatter,header_styler:Cell::Data::Styler=Config::Defaults.header_styler,body_alignment:Justify|Nil=Config::Defaults.body_alignment,body_formatter:Cell::Data::Formatter=Config::Defaults.body_formatter,body_styler:Cell::Data::Styler=Config::Defaults.body_styler,left_padding:Int32=Config::Defaults.left_padding,right_padding:Int32=Config::Defaults.right_padding,padding_character:String=Config::Defaults.padding_character,truncation_indicator:String=Config::Defaults.truncation_indicator,width:Int32=Config::Defaults.column_width,header_frequency:Int32|Nil=Config::Defaults.header_frequency,row_divider_frequency:Int32|Nil=Config::Defaults.row_divider_frequency,wrap_mode:WrapMode=Config::Defaults.wrap_mode,header_wrap:Int32|Nil=Config::Defaults.header_wrap,body_wrap:Int32|Nil=Config::Defaults.body_wrap,masked_headers:Bool=Config::Defaults.masked_headers?,omit_group_header_rule:Bool=Config::Defaults.omit_group_header_rule?,omit_last_rule:Bool=Config::Defaults.omit_last_rule?,&)-class-method","name":"new","doc":"Second constructor, with same parameters as the first one, but with a block given","summary":"<p>Second constructor, with same parameters as the first one, but with a block given</p>","abstract":false,"args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config::Defaults.title","external_name":"title","restriction":"Heading"},{"name":"subtitle","default_value":"Config::Defaults.subtitle","external_name":"subtitle","restriction":"Heading"},{"name":"footer","default_value":"Config::Defaults.footer","external_name":"footer","restriction":"Heading"},{"name":"border","default_value":"Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config::Defaults.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config::Defaults.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config::Defaults.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config::Defaults.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config::Defaults.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config::Defaults.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config::Defaults.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config::Defaults.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config::Defaults.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config::Defaults.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config::Defaults.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config::Defaults.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config::Defaults.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config::Defaults.column_width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config::Defaults.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config::Defaults.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config::Defaults.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config::Defaults.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config::Defaults.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config::Defaults.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config::Defaults.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config::Defaults.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"args_string":"(sources : Enumerable(T), *, title : Heading = Config::Defaults.title, subtitle : Heading = Config::Defaults.subtitle, footer : Heading = Config::Defaults.footer, border : Border = Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler), group_alignment : Justify = Config::Defaults.group_alignment, group_formatter : Cell::Text::Formatter = Config::Defaults.group_formatter, group_styler : Cell::Text::Styler = Config::Defaults.group_styler, header_alignment : Justify | Nil = Config::Defaults.header_alignment, header_formatter : Cell::Data::Formatter = Config::Defaults.header_formatter, header_styler : Cell::Data::Styler = Config::Defaults.header_styler, body_alignment : Justify | Nil = Config::Defaults.body_alignment, body_formatter : Cell::Data::Formatter = Config::Defaults.body_formatter, body_styler : Cell::Data::Styler = Config::Defaults.body_styler, left_padding : Int32 = Config::Defaults.left_padding, right_padding : Int32 = Config::Defaults.right_padding, padding_character : String = Config::Defaults.padding_character, truncation_indicator : String = Config::Defaults.truncation_indicator, width : Int32 = Config::Defaults.column_width, header_frequency : Int32 | Nil = Config::Defaults.header_frequency, row_divider_frequency : Int32 | Nil = Config::Defaults.row_divider_frequency, wrap_mode : WrapMode = Config::Defaults.wrap_mode, header_wrap : Int32 | Nil = Config::Defaults.header_wrap, body_wrap : Int32 | Nil = Config::Defaults.body_wrap, masked_headers : Bool = Config::Defaults.masked_headers?, omit_group_header_rule : Bool = Config::Defaults.omit_group_header_rule?, omit_last_rule : Bool = Config::Defaults.omit_last_rule?, &)","args_html":"(sources : Enumerable(T), *, title : <a href=\"../Tablo/Heading.html\">Heading</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.title, subtitle : <a href=\"../Tablo/Heading.html\">Heading</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.subtitle, footer : <a href=\"../Tablo/Heading.html\">Heading</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.footer, border : <a href=\"../Tablo/Border.html\">Border</a> = <span class=\"t\">Border</span>.new(<span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.border_definition, <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.border_styler), group_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.group_alignment, group_formatter : <a href=\"../Tablo/Cell/Text/Formatter.html\">Cell::Text::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.group_formatter, group_styler : <a href=\"../Tablo/Cell/Text/Styler.html\">Cell::Text::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.group_styler, header_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_alignment, header_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_formatter, header_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_styler, body_alignment : <a href=\"../Tablo/Justify.html\">Justify</a> | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_alignment, body_formatter : <a href=\"../Tablo/Cell/Data/Formatter.html\">Cell::Data::Formatter</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_formatter, body_styler : <a href=\"../Tablo/Cell/Data/Styler.html\">Cell::Data::Styler</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_styler, left_padding : Int32 = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.left_padding, right_padding : Int32 = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.right_padding, padding_character : String = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.padding_character, truncation_indicator : String = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.truncation_indicator, width : Int32 = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.column_width, header_frequency : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_frequency, row_divider_frequency : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.row_divider_frequency, wrap_mode : <a href=\"../Tablo/WrapMode.html\">WrapMode</a> = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.wrap_mode, header_wrap : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.header_wrap, body_wrap : Int32 | Nil = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.body_wrap, masked_headers : Bool = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.masked_headers?, omit_group_header_rule : Bool = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.omit_group_header_rule?, omit_last_rule : Bool = <span class=\"t\">Config</span><span class=\"t\">::</span><span class=\"t\">Defaults</span>.omit_last_rule?, &)","location":{"filename":"src/table.cr","line_number":287,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L287"},"def":{"name":"new","args":[{"name":"sources","external_name":"sources","restriction":"Enumerable(T)"},{"name":"","external_name":"","restriction":""},{"name":"title","default_value":"Config::Defaults.title","external_name":"title","restriction":"Heading"},{"name":"subtitle","default_value":"Config::Defaults.subtitle","external_name":"subtitle","restriction":"Heading"},{"name":"footer","default_value":"Config::Defaults.footer","external_name":"footer","restriction":"Heading"},{"name":"border","default_value":"Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler)","external_name":"border","restriction":"Border"},{"name":"group_alignment","default_value":"Config::Defaults.group_alignment","external_name":"group_alignment","restriction":"Justify"},{"name":"group_formatter","default_value":"Config::Defaults.group_formatter","external_name":"group_formatter","restriction":"Cell::Text::Formatter"},{"name":"group_styler","default_value":"Config::Defaults.group_styler","external_name":"group_styler","restriction":"Cell::Text::Styler"},{"name":"header_alignment","default_value":"Config::Defaults.header_alignment","external_name":"header_alignment","restriction":"Justify | ::Nil"},{"name":"header_formatter","default_value":"Config::Defaults.header_formatter","external_name":"header_formatter","restriction":"Cell::Data::Formatter"},{"name":"header_styler","default_value":"Config::Defaults.header_styler","external_name":"header_styler","restriction":"Cell::Data::Styler"},{"name":"body_alignment","default_value":"Config::Defaults.body_alignment","external_name":"body_alignment","restriction":"Justify | ::Nil"},{"name":"body_formatter","default_value":"Config::Defaults.body_formatter","external_name":"body_formatter","restriction":"Cell::Data::Formatter"},{"name":"body_styler","default_value":"Config::Defaults.body_styler","external_name":"body_styler","restriction":"Cell::Data::Styler"},{"name":"left_padding","default_value":"Config::Defaults.left_padding","external_name":"left_padding","restriction":"Int32"},{"name":"right_padding","default_value":"Config::Defaults.right_padding","external_name":"right_padding","restriction":"Int32"},{"name":"padding_character","default_value":"Config::Defaults.padding_character","external_name":"padding_character","restriction":"String"},{"name":"truncation_indicator","default_value":"Config::Defaults.truncation_indicator","external_name":"truncation_indicator","restriction":"String"},{"name":"width","default_value":"Config::Defaults.column_width","external_name":"width","restriction":"Int32"},{"name":"header_frequency","default_value":"Config::Defaults.header_frequency","external_name":"header_frequency","restriction":"Int32 | ::Nil"},{"name":"row_divider_frequency","default_value":"Config::Defaults.row_divider_frequency","external_name":"row_divider_frequency","restriction":"Int32 | ::Nil"},{"name":"wrap_mode","default_value":"Config::Defaults.wrap_mode","external_name":"wrap_mode","restriction":"WrapMode"},{"name":"header_wrap","default_value":"Config::Defaults.header_wrap","external_name":"header_wrap","restriction":"Int32 | ::Nil"},{"name":"body_wrap","default_value":"Config::Defaults.body_wrap","external_name":"body_wrap","restriction":"Int32 | ::Nil"},{"name":"masked_headers","default_value":"Config::Defaults.masked_headers?","external_name":"masked_headers","restriction":"Bool"},{"name":"omit_group_header_rule","default_value":"Config::Defaults.omit_group_header_rule?","external_name":"omit_group_header_rule","restriction":"Bool"},{"name":"omit_last_rule","default_value":"Config::Defaults.omit_last_rule?","external_name":"omit_last_rule","restriction":"Bool"}],"splat_index":1,"yields":1,"block_arity":1,"visibility":"Public","body":"_ = Table(T).allocate\n_.initialize(sources, title: title, subtitle: subtitle, footer: footer, border: border, group_alignment: group_alignment, group_formatter: group_formatter, group_styler: group_styler, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, width: width, header_frequency: header_frequency, row_divider_frequency: row_divider_frequency, wrap_mode: wrap_mode, header_wrap: header_wrap, body_wrap: body_wrap, masked_headers: masked_headers, omit_group_header_rule: omit_group_header_rule, omit_last_rule: omit_last_rule) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_column(label:LabelType,*,header=label.to_s,header_alignment=header_alignment,header_formatter=header_formatter,header_styler=header_styler,body_alignment=body_alignment,body_formatter=body_formatter,body_styler=body_styler,left_padding=left_padding,right_padding=right_padding,padding_character=padding_character,width=width,truncation_indicator=truncation_indicator,wrap_mode=wrap_mode,&extractor:T,Int32->CellType)-instance-method","name":"add_column","doc":"Returns an instance of `Column(T)`\n\n_Mandatory positional parameter:_\n\n- `label`: type is `LabelType`<br />\n  The label identifies the column\n\n_Optional named parameters, with default values_\n\n- `header`: type is `String` <br />\n  Default value is `label.to_s`<br />\n  Can be an empty string\n\n- `header_alignment`: type is `Justify?`<br />\n  By default, inherits from table `header_alignment` initializer\n\n- `header_formatter`: type is `Cell::Data::Formatter` <br />\n  By default, inherits from table `header_formatter` initializer\n\n- `header_styler`: type is `Cell::Data::Styler` <br />\n  By default, inherits from table `header_styler` initializer\n\n- `body_alignment`: type is `Justify?` <br />\n  By default, inherits from table `body_alignment` initializer\n\n- `body_formatter`: type is `Cell::Data::Formatter` <br />\n  By default, inherits from table `body_formatter` initializer\n\n- `body_styler`: type is `Cell::Data::Styler` <br />\n  By default, inherits from table `body_styler` initializer\n\n- `left_padding`: type is `Int32` <br />\n  By default, inherits from table `left_padding` initializer\n\n- `right_padding`: type is `Int32` <br />\n  By default, inherits from table `right_padding` initializer\n\n- `padding_character`: type is `String` <br />\n  By default, inherits from table `padding_character` initializer\n\n- `width`: type is `Int32` <br />\n  By default, inherits from table `width` initializer\n\n- `truncation_indicator`: type is `String` <br />\n  By default, inherits from table `truncation_indicator` initializer\n\n- `wrap_mode`: type is `WrapMode` <br />\n  By default, inherits from table `wrap_mode` initializer\n\n_Captured block_\n\n- `&extractor`: type is `(T | Int32) -> CellType` <br />\n  Captured block for extracting data from source","summary":"<p>Returns an instance of <code><a href=\"../Tablo/Column.html\">Column</a>(T)</code></p>","abstract":false,"args":[{"name":"label","external_name":"label","restriction":"LabelType"},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"header_alignment","default_value":"header_alignment","external_name":"header_alignment","restriction":""},{"name":"header_formatter","default_value":"header_formatter","external_name":"header_formatter","restriction":""},{"name":"header_styler","default_value":"header_styler","external_name":"header_styler","restriction":""},{"name":"body_alignment","default_value":"body_alignment","external_name":"body_alignment","restriction":""},{"name":"body_formatter","default_value":"body_formatter","external_name":"body_formatter","restriction":""},{"name":"body_styler","default_value":"body_styler","external_name":"body_styler","restriction":""},{"name":"left_padding","default_value":"left_padding","external_name":"left_padding","restriction":""},{"name":"right_padding","default_value":"right_padding","external_name":"right_padding","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"width","default_value":"width","external_name":"width","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"args_string":"(label : LabelType, *, header = label.to_s, header_alignment = header_alignment, header_formatter = header_formatter, header_styler = header_styler, body_alignment = body_alignment, body_formatter = body_formatter, body_styler = body_styler, left_padding = left_padding, right_padding = right_padding, padding_character = padding_character, width = width, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode, &extractor : T, Int32 -> CellType)","args_html":"(label : <a href=\"../Tablo/LabelType.html\">LabelType</a>, *, header = label.to_s, header_alignment = header_alignment, header_formatter = header_formatter, header_styler = header_styler, body_alignment = body_alignment, body_formatter = body_formatter, body_styler = body_styler, left_padding = left_padding, right_padding = right_padding, padding_character = padding_character, width = width, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode, &extractor : T, Int32 -> <a href=\"../Tablo/CellType.html\">CellType</a>)","location":{"filename":"src/table.cr","line_number":436,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L436"},"def":{"name":"add_column","args":[{"name":"label","external_name":"label","restriction":"LabelType"},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"header_alignment","default_value":"header_alignment","external_name":"header_alignment","restriction":""},{"name":"header_formatter","default_value":"header_formatter","external_name":"header_formatter","restriction":""},{"name":"header_styler","default_value":"header_styler","external_name":"header_styler","restriction":""},{"name":"body_alignment","default_value":"body_alignment","external_name":"body_alignment","restriction":""},{"name":"body_formatter","default_value":"body_formatter","external_name":"body_formatter","restriction":""},{"name":"body_styler","default_value":"body_styler","external_name":"body_styler","restriction":""},{"name":"left_padding","default_value":"left_padding","external_name":"left_padding","restriction":""},{"name":"right_padding","default_value":"right_padding","external_name":"right_padding","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"width","default_value":"width","external_name":"width","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"splat_index":1,"yields":2,"block_arity":2,"block_arg":{"name":"extractor","external_name":"extractor","restriction":"(T, Int32 -> CellType)"},"visibility":"Public","body":"if column_registry.has_key?(label)\n  raise(Error::DuplicateLabel.new(\"Column label already used in this table.\"))\nend\ncheck_width(width)\ncheck_padding(left_padding)\ncheck_padding(right_padding)\ncheck_padding_character(padding_character)\ncheck_truncation_indicator(truncation_indicator)\ncolumn_registry[label] = Column(T).new(header: header, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, width: width, truncation_indicator: truncation_indicator, wrap_mode: wrap_mode, extractor: Proc(T, Int32, CellType).new do |row, index|\n  (extractor.call(row, index)).as(CellType)\nend, index: column_registry.size)\n"}},{"html_id":"add_group(label,*,header=label.to_s,alignment=group_alignment,formatter=group_formatter,styler=group_styler,padding_character=padding_character,truncation_indicator=truncation_indicator,wrap_mode=wrap_mode)-instance-method","name":"add_group","doc":"Returns an instance of `Cell::Text`\n\nCreates a group including all previous columns not already grouped.\nAfter adding the last column, a group is automatically created (with an\nempty header) if not explicitly specified.\n\n_Mandatory positional parameter_\n\n- `label`: type is `LabelType` <br />\n  The label identifies the group.\n\n_Optional named parameters, with default values_\n\n- `header`: type is `String` <br />\n  Default value id `label.to_s` <br />\n  Can be an empty string\n\n- `alignment`: type is `Justify` <br />\n  By default, inherits from table `group_alignment` initializer\n\n- `formatter`: type is `Cell::Text::Formatter` <br />\n  By default, inherits from table `group_formatter` initializer\n\n- `styler`: type is `Cell::Text::Styler` <br />\n  By default, inherits from table `group_styler` initializer\n\n- `padding_character`: type is `String` <br />\n  By default, inherits from table `padding_character` initializer\n\n- `truncation_indicator`: type is `String` <br />\n  By default, inherits from table `truncation_indicator` initializer\n\n- `wrap_mode`: type is `WrapMode` <br />\n  By default, inherits from table `wrap_mode` initializer","summary":"<p>Returns an instance of <code><a href=\"../Tablo/Cell/Text.html\">Cell::Text</a></code></p>","abstract":false,"args":[{"name":"label","external_name":"label","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"alignment","default_value":"group_alignment","external_name":"alignment","restriction":""},{"name":"formatter","default_value":"group_formatter","external_name":"formatter","restriction":""},{"name":"styler","default_value":"group_styler","external_name":"styler","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"args_string":"(label, *, header = label.to_s, alignment = group_alignment, formatter = group_formatter, styler = group_styler, padding_character = padding_character, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode)","args_html":"(label, *, header = label.to_s, alignment = group_alignment, formatter = group_formatter, styler = group_styler, padding_character = padding_character, truncation_indicator = truncation_indicator, wrap_mode = wrap_mode)","location":{"filename":"src/table.cr","line_number":523,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L523"},"def":{"name":"add_group","args":[{"name":"label","external_name":"label","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"header","default_value":"label.to_s","external_name":"header","restriction":""},{"name":"alignment","default_value":"group_alignment","external_name":"alignment","restriction":""},{"name":"formatter","default_value":"group_formatter","external_name":"formatter","restriction":""},{"name":"styler","default_value":"group_styler","external_name":"styler","restriction":""},{"name":"padding_character","default_value":"padding_character","external_name":"padding_character","restriction":""},{"name":"truncation_indicator","default_value":"truncation_indicator","external_name":"truncation_indicator","restriction":""},{"name":"wrap_mode","default_value":"wrap_mode","external_name":"wrap_mode","restriction":""}],"splat_index":1,"visibility":"Public","body":"if group_registry.has_key?(label)\n  raise(Error::DuplicateLabel.new(\"Group label already used in this table.\"))\nend\nif column_registry.size.zero?\n  raise(Error::GroupEmpty.new(\"Group requires at least one column.\"))\nend\ncheck_padding_character(padding_character)\ncheck_truncation_indicator(truncation_indicator)\ncolumn_groups << columns_group\ncolumns = column_list.select do |e|\n  e.index.in?(column_groups.last)\nend\ngroup_width = calc_group_width(columns)\ngroup_registry[label] = Cell::Text.new(value: header, row_type: RowType::Group, alignment: alignment, formatter: formatter, styler: styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, wrap_mode: wrap_mode, width: group_width)\n"}},{"html_id":"add_summary(summary_definition,summary_options)-instance-method","name":"add_summary","doc":"The `add_summary` method creates a summary table, attached to the main table.\n\n_Mandatory positional parameters:_\n\n- `summary_definition`: type is `Array(<structs>)`<br />\nwhere `<structs>` may be one or more instances of `Summary::UserProc`,\n`Summary::HeaderColumn`, `Summary::BodyColumn` or `Summary::BodyRow` <br />\n\n- `summary_options`: type is `NamedTuple(<Table parameters>)` <br />\nwhere `<Table parameters>` is a list of any number of Table initializers (may be empty).\n\nSee `Tablo::Summary` for detailed examples and explanations on use.\n\nReturns self (an instance of Table(T)) with an embedded Summary Table","summary":"<p>The <code><a href=\"../Tablo/Table.html#add_summary%28summary_definition%2Csummary_options%29-instance-method\">#add_summary</a></code> method creates a summary table, attached to the main table.</p>","abstract":false,"args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""},{"name":"summary_options","external_name":"summary_options","restriction":""}],"args_string":"(summary_definition, summary_options)","args_html":"(summary_definition, summary_options)","location":{"filename":"src/table.cr","line_number":640,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L640"},"def":{"name":"add_summary","args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""},{"name":"summary_options","external_name":"summary_options","restriction":""}],"visibility":"Public","body":"self.child = (Summary.new(self, summary_definition, summary_options)).run\n(self.child.as(ATable)).parent = self.as(ATable)\n"}},{"html_id":"add_summary(summary_definition,**summary_options)-instance-method","name":"add_summary","doc":"Second form : `summary_options` given as a list of Table initializers","summary":"<p>Second form : <code>summary_options</code> given as a list of Table initializers</p>","abstract":false,"args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""}],"args_string":"(summary_definition, **summary_options)","args_html":"(summary_definition, **summary_options)","location":{"filename":"src/table.cr","line_number":646,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L646"},"def":{"name":"add_summary","args":[{"name":"summary_definition","external_name":"summary_definition","restriction":""}],"double_splat":{"name":"summary_options","external_name":"summary_options","restriction":""},"visibility":"Public","body":"self.child = (Summary.new(self, summary_definition, summary_options)).run\n(self.child.as(ATable)).parent = self.as(ATable)\n"}},{"html_id":"column_data(column_label:LabelType)-instance-method","name":"column_data","doc":"Returns an array of data for a specific column\n\n_Mandatory positional parameter:_\n\n- `column_label`: type is `LabelType`<br />","summary":"<p>Returns an array of data for a specific column</p>","abstract":false,"args":[{"name":"column_label","external_name":"column_label","restriction":"LabelType"}],"args_string":"(column_label : LabelType)","args_html":"(column_label : <a href=\"../Tablo/LabelType.html\">LabelType</a>)","location":{"filename":"src/table.cr","line_number":1624,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1624"},"def":{"name":"column_data","args":[{"name":"column_label","external_name":"column_label","restriction":"LabelType"}],"visibility":"Public","body":"column_data = [] of CellType\nextractor = column_registry[column_label].extractor\nsources.each_with_index do |source, index|\n  column_data << (extractor.call(source, index))\nend\ncolumn_data\n"}},{"html_id":"each(&)-instance-method","name":"each","doc":"Returns successive formatted rows, with all corresponding headers and footers,\naccording to the `header_frequency` value.\n\nIn fact,\n\n```\ntable.each do |r|\n  puts r\nend\n```\n\nis the same as\n\n```\nputs table\n```","summary":"<p>Returns successive formatted rows, with all corresponding headers and footers, according to the <code>header_frequency</code> value.</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":698,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L698"},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"sources.each_with_index do |source, index|\n  show_divider = false\n  if (  rdf = row_divider_frequency).nil?\n  else\n    show_divider = (index > 0) && ((index % rdf) == 0)\n    if (    hf = header_frequency).nil?\n    else\n      if hf > 0\n        show_divider && (show_divider = ((index % hf) != 0))\n      end\n    end\n  end\n  yield Row.new(table: self, source: source, divider: show_divider, index: index)\nend"}},{"html_id":"horizontal_rule(position=RuleType::Bottom,column_groups=[]ofArray(Int32))-instance-method","name":"horizontal_rule","doc":"Produce a horizontal dividing line suitable for printing between\nrendered rows, so as to customize table output.\n\nFor example, to insert a horizontal line at specific row positions, here\nbetween some Body rows, we can do :\n```\ntable.each_with_index do |row, i|\n  puts table.horizontal_rule(Tablo::RuleType::BodyBody) unless i == 0 || i == 2\n  puts row\nend\n```\n- Returns a String representing the formatted horizontal rule","summary":"<p>Produce a horizontal dividing line suitable for printing between rendered rows, so as to customize table output.</p>","abstract":false,"args":[{"name":"position","default_value":"RuleType::Bottom","external_name":"position","restriction":""},{"name":"column_groups","default_value":"[] of Array(Int32)","external_name":"column_groups","restriction":""}],"args_string":"(position = RuleType::Bottom, column_groups = [] of Array(Int32))","args_html":"(position = <span class=\"t\">RuleType</span><span class=\"t\">::</span><span class=\"t\">Bottom</span>, column_groups = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Array</span>(<span class=\"t\">Int32</span>))","location":{"filename":"src/table.cr","line_number":821,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L821"},"def":{"name":"horizontal_rule","args":[{"name":"position","default_value":"RuleType::Bottom","external_name":"position","restriction":""},{"name":"column_groups","default_value":"[] of Array(Int32)","external_name":"column_groups","restriction":""}],"visibility":"Public","body":"widths = column_list.map do |column|\n  column.width + column.total_padding\nend\nborder.horizontal_rule(widths, position, groups: column_groups)\n"}},{"html_id":"pack(width:Int32|Nil=nil,*,autosize=true)-instance-method","name":"pack","doc":"`pack` method (1. all displayable columns)     <br />\nReturns `self` (the current Table instance) after modifying its column widths\n\nThe `pack` method comes in 3 overloaded versions :\n- Version 1: all columns are selected for packing\n- Version 2: some columns are excluded (`except` parameter)\n- Version 3: only certain columns are selected (`only` parameter)\n\nThe `pack` method allows for adapting the total width of the table.\nIt accepts 3 parameters, all optional:\n\n- `width`: type is `Int32?` <br />\n  Default value is `nil` <br />\n  total width required for the formatted table. If no `width` is\n  given and if the value of parameter `Config.terminal_capped_width?` is true,\n  the value of `width` is read from the size of the terminal, otherwise its\n  value is `nil` and in that case, `pack` has no effect unless `autosize == true` or\n  widths are harmonized between the main and summary tables.\n\n- `autosize`: type is `Bool` <br />\n   Default value is `true` <br />\n   if true,  current width values are set to their 'best fit' values,\n   ie they are  automatically adapted to their largest content,\n   **before** packing\n\n- `except`: type is `LabelType` or `Array(LabelType)`  <br />\n  Default value: None, but mandatory in overloaded version 2  <br />\n  Column or array of columns excluded from being resized\n\n- `only`: type is `LabelType` or `Array(LabelType)`  <br />\n  Default value: None, but mandatory in overloaded version 3  <br />\n  Column or array of columns selected exclusively for resizing\n\nThe following examples will illustrate the behaviour of the different\nparameters values, starting from the 'standard' one, with all column widths to\ntheir default value : 12 characters.\n\n```\nrequire \"tablo\"\ndata = [[1, \"A long sequence of characters\", 123.456789]]\ntable = Tablo::Table.new(data) do |t|\n  t.add_column(:col1, &.[0])\n  t.add_column(:col2, &.[1])\n  t.add_column(:col3, &.[2])\nend\n```\nHere are the different results depending on the parameters passed.\n\nFirst, table is printed without any packing\n```\nputs table\n+--------------+--------------+--------------+\n|         col1 | col2         |         col3 |\n+--------------+--------------+--------------+\n|            1 | A long       |   123.456789 |\n|              | sequence of  |              |\n|              | characters   |              |\n+--------------+--------------+--------------+\nTotal table width = 46\n```\nA packing instruction with no automatic adaptation request\n(`autosize=false`), but with a total width to be reached, will modify the\nwidth of each column, starting from its current value, until the target\ntotal width is reached (see explanation\nof the packing algorithm below).\n```\nputs table.pack(40, autosize: false)\n+------------+------------+------------+\n|       col1 | col2       |       col3 |\n+------------+------------+------------+\n|          1 | A long     | 123.456789 |\n|            | sequence   |            |\n|            | of         |            |\n|            | characters |            |\n+------------+------------+------------+\nTotal table width = 40\n```\nWith autosize = true, column widths are first recalculated to fit the\ncontents of each cell, then packing is performed to conform to the total\nwidth requested. We can see the \"packing quality\" is much better.\n```\nputs table.pack(40, autosize: true)\n+------+------------------+------------+\n| col1 | col2             |       col3 |\n+------+------------------+------------+\n|    1 | A long sequence  | 123.456789 |\n|      | of characters    |            |\n+------+------------------+------------+\nTotal table width = 40\n```\nWithout specifying a total width to be achieved, each column width is\nadapted to its largest content.\n```\nputs table.pack(autosize: true)\n+------+-------------------------------+------------+\n| col1 | col2                          |       col3 |\n+------+-------------------------------+------------+\n|    1 | A long sequence of characters | 123.456789 |\n+------+-------------------------------+------------+\nTotal table width = 53\n```\nA packing instruction without automatic adaptation (`autosize=false`) or\ntotal width requested, will produce two different results depending on the\nvalue of the `Config.terminal_capped_width?` parameter:\n- if true: the total width requested will be equal to the number of\nterminal columns\n- if false: column widths will revert to their initial values (as in the\noutput below)\n```\nputs table.pack(autosize: false)\n+--------------+--------------+--------------+\n|         col1 | col2         |         col3 |\n+--------------+--------------+--------------+\n|            1 | A long       |   123.456789 |\n|              | sequence of  |              |\n|              | characters   |              |\n+--------------+--------------+--------------+\nTotal table width = 46\n```\nWe can also obtain various results using the `except:` or `only:` parameters,\nFor examples :\n```\nputs table.pack(only: :col1\n+------+--------------+--------------+\n| col1 | col2         |         col3 |\n+------+--------------+--------------+\n|    1 | A long       |   123.456789 |\n|      | sequence of  |              |\n|      | characters   |              |\n+------+--------------+--------------+\nTotal table width = 38\n```\nor:\n```\nputs table.pack(except: :col3)\n+------+-------------------------------+--------------+\n| col1 | col2                          |         col3 |\n+------+-------------------------------+--------------+\n|    1 | A long sequence of characters |   123.456789 |\n+------+-------------------------------+--------------+\nTotal table width = 55\n```\n**Description of the packing algorithm**<br />\n\nThe resizing algorithm is actually quite simple:<br />\nIf the final value of the `width` parameter is not `nil`, it first compares\nthe table's current width with the requested width, to determine whether this\nis a reduction or an increase in size. Then, depending on the case, either the\nwidest column is reduced, or the narrowest increased, in steps of 1, until the\nrequested table width is reached.<br />\nThe final result then depends on the value of the column widths **before** the\npacking operation, hence the importance of the autosize parameter\nin this calculation.","summary":"<p><code><a href=\"../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cautosize%3Dtrue%29-instance-method\">#pack</a></code> method (1.</p>","abstract":false,"args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"autosize","default_value":"true","external_name":"autosize","restriction":""}],"args_string":"(width : Int32 | Nil = nil, *, autosize = true)","args_html":"(width : Int32 | Nil = <span class=\"n\">nil</span>, *, autosize = <span class=\"n\">true</span>)","location":{"filename":"src/table.cr","line_number":998,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L998"},"def":{"name":"pack","args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"autosize","default_value":"true","external_name":"autosize","restriction":""}],"splat_index":1,"visibility":"Public","body":"packit(width, autosize, column_list)"}},{"html_id":"pack(width:Int32|Nil=nil,*,except:LabelType|Array(LabelType),autosize=true)-instance-method","name":"pack","doc":"`pack` method (2. displayable columns with exceptions)  <br />\nReturns `self` (the current Table instance) after modifying its column widths","summary":"<p><code><a href=\"../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cautosize%3Dtrue%29-instance-method\">#pack</a></code> method (2.</p>","abstract":false,"args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"except","external_name":"except","restriction":"LabelType | Array(LabelType)"},{"name":"autosize","default_value":"true","external_name":"autosize","restriction":""}],"args_string":"(width : Int32 | Nil = nil, *, except : LabelType | Array(LabelType), autosize = true)","args_html":"(width : Int32 | Nil = <span class=\"n\">nil</span>, *, except : <a href=\"../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../Tablo/LabelType.html\">LabelType</a>), autosize = <span class=\"n\">true</span>)","location":{"filename":"src/table.cr","line_number":1006,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1006"},"def":{"name":"pack","args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"except","external_name":"except","restriction":"LabelType | Array(LabelType)"},{"name":"autosize","default_value":"true","external_name":"autosize","restriction":""}],"splat_index":1,"visibility":"Public","body":"if except.is_a?(Array)\nelse\n  except = [except]\nend\nexcept.each do |key|\n  if column_registry.has_key?(key)\n  else\n    raise(Error::LabelNotFound.new(\"Pack 'except' error : unknown column label <#{key}>\"))\n  end\nend\ncolumn_labels = column_registry.keys - except\ncolumns = column_labels.map do |label|\n  column_registry[label]\nend\npackit(width, autosize, columns)\n"}},{"html_id":"pack(width:Int32|Nil=nil,*,only:LabelType|Array(LabelType),autosize=true)-instance-method","name":"pack","doc":"`pack` method (3. displayable and selected columns only)   <br />\nReturns `self` (the current Table instance) after modifying its column widths","summary":"<p><code><a href=\"../Tablo/Table.html#pack%28width%3AInt32%7CNil%3Dnil%2C%2A%2Cautosize%3Dtrue%29-instance-method\">#pack</a></code> method (3.</p>","abstract":false,"args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"only","external_name":"only","restriction":"LabelType | Array(LabelType)"},{"name":"autosize","default_value":"true","external_name":"autosize","restriction":""}],"args_string":"(width : Int32 | Nil = nil, *, only : LabelType | Array(LabelType), autosize = true)","args_html":"(width : Int32 | Nil = <span class=\"n\">nil</span>, *, only : <a href=\"../Tablo/LabelType.html\">LabelType</a> | Array(<a href=\"../Tablo/LabelType.html\">LabelType</a>), autosize = <span class=\"n\">true</span>)","location":{"filename":"src/table.cr","line_number":1023,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1023"},"def":{"name":"pack","args":[{"name":"width","default_value":"nil","external_name":"width","restriction":"Int32 | ::Nil"},{"name":"","external_name":"","restriction":""},{"name":"only","external_name":"only","restriction":"LabelType | Array(LabelType)"},{"name":"autosize","default_value":"true","external_name":"autosize","restriction":""}],"splat_index":1,"visibility":"Public","body":"if only.is_a?(Array)\nelse\n  only = [only]\nend\nonly.each do |key|\n  if column_registry.has_key?(key)\n  else\n    raise(Error::LabelNotFound.new(\"Pack 'only' error : unknown column label <#{key}>\"))\n  end\nend\ncolumns = only.map do |label|\n  column_registry[label]\nend\npackit(width, autosize, columns)\n"}},{"html_id":"sources-instance-method","name":"sources","doc":"returns the sources Enumerable(T)","summary":"<p>returns the sources Enumerable(T)</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":50,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L50"},"def":{"name":"sources","visibility":"Public","body":"@sources"}},{"html_id":"sources=(src:Enumerable(T))-instance-method","name":"sources=","doc":"Replaces existing data source with a new one. <br />\n\n_Mandatory positional parameter_\n- `src`: type is `Enumerable(T)` Where T is the same type as at table initialization","summary":"<p>Replaces existing data source with a new one.</p>","abstract":false,"args":[{"name":"src","external_name":"src","restriction":"Enumerable(T)"}],"args_string":"(src : Enumerable(T))","args_html":"(src : Enumerable(T))","location":{"filename":"src/table.cr","line_number":377,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L377"},"def":{"name":"sources=","args":[{"name":"src","external_name":"src","restriction":"Enumerable(T)"}],"visibility":"Public","body":"self.child = nil\nself.row_count = src.size\nself.sources = src\n"}},{"html_id":"summary-instance-method","name":"summary","doc":"Returns a previously defined summary table or `nil`","summary":"<p>Returns a previously defined summary table or <code>nil</code></p>","abstract":false,"location":{"filename":"src/table.cr","line_number":652,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L652"},"def":{"name":"summary","visibility":"Public","body":"self.child.as(ATable | ::Nil)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","doc":"Returns the table as a formatted string","summary":"<p>Returns the table as a formatted string</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/table.cr","line_number":657,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L657"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if column_registry.empty?\n  io << \"\"\nelse\n  if column_groups.empty?\n  else\n    if column_groups.flatten.size != column_list.size\n      add_group(:dummy_last_group, header: \"\")\n    end\n  end\n  rows = map(&.to_s)\n  io << (join_lines(rows))\nend\nif used_columns.indexes.empty?\nelse\n  used_columns.indexes.clear\n  used_columns.reordered = false\n  restore_group_context\nend\n"}},{"html_id":"total_table_width-instance-method","name":"total_table_width","doc":"returns the total actual width of the table as a whole","summary":"<p>returns the total actual width of the table as a whole</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":1316,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1316"},"def":{"name":"total_table_width","visibility":"Public","body":"(widths_sum + padding_widths_sum) + border_widths_sum"}},{"html_id":"transpose(**opts)-instance-method","name":"transpose","doc":"`transpose(opts = {})` returns a Tablo::Table instance\n\nThe `transpose` method creates a new `Tablo::Table` from the current\ntable, transposed, i.e.  rotated 90 degrees with respect to the current\ntable, so that the header names of the current table form the contents\nof the leftmost column of the new table, and each subsequent column\ncorresponds to one of the source elements of the current table, the\nheader of that column being the string value of that element.\n\nExample:\n```\nrequire \"tablo\"\ntable = Tablo::Table.new([-1, 0, 1]) do |t|\n  t.add_column(\"Even?\", &.even?)\n  t.add_column(\"Odd?\", &.odd?)\n  t.add_column(\"Abs\", &.abs)\nend.transpose\nputs table\n ```\n\n ```\n+-------+--------------+--------------+--------------+\n|       |      -1      |       0      |       1      |\n+-------+--------------+--------------+--------------+\n| Even? |     false    |     true     |     false    |\n| Odd?  |     true     |     false    |     true     |\n| Abs   |            1 |            0 |            1 |\n+-------+--------------+--------------+--------------+\n ```\nBy default, the transposed table inherits all the parameters of the\ncurrent table, with their values, except those appearing in the `opts`\nparameter of the `transpose` method with a different value.\n\nThese parameters apply to all columns, with one notable exception: the\nfirst column, the leftmost, is special, as it is created from the column\nheaders (field names) of the current table and therefore has its own\nwidth and alignment parameters, namely:\n- `field_names_header_alignment`: default value = `nil`, i.e. alignment\n  depends on the body data type, in this case, a left-aligned string.\n- `field_names_body_alignment`: default value = `nil`, i.e. dependent on\n  data type, i.e. a character string, left-aligned\n- `field_names_width`: default value = nil, triggering optimal width\n  calculation based on content\n\n Two other parameters complete the transposed table:\n- `field_names_header`: default value = `nil`, replaced by an empty\n  character string\n- `body_headers` : default value = `nil`, which returns the current\n  value of `source` in each column\n\nAll these values can be modified in the `opts` parameter, according to\ntheir data type.\n\nHowever, `body_headers` is a special case: if it contains a character\nstring, it will be rendered as such, unless it contains the integer\ndisplay format `%d`, which will then be replaced by the original row number.\n\nModified previous example:\n ```\nrequire \"tablo\"\ntable = Tablo::Table.new([-1, 0, 1],\n  header_alignment: Tablo::Justify::Center,\n  body_alignment: Tablo::Justify::Center) do |t|\n  t.add_column(\"Even?\", &.even?)\n  t.add_column(\"Odd?\", &.odd?)\n  t.add_column(\"Abs\", &.abs)\nend.transpose(\n  field_names_header_alignment: Tablo::Justify::Right,\n  field_names_body_alignment: Tablo::Justify::Right,\n  field_names_header: \"Field names\",\n  body_headers: \"Row #%d content\"\n)\nputs table\n ```\n\n ```\n+-------+--------------+--------------+--------------+\n| Field |    Row #0    |    Row #1    |    Row #2    |\n| names |    content   |    content   |    content   |\n+-------+--------------+--------------+--------------+\n| Even? |     false    |     true     |     false    |\n|  Odd? |     true     |     false    |     true     |\n|   Abs |       1      |       0      |       1      |\n+-------+--------------+--------------+--------------+\n ```","summary":"<p><code>transpose(opts = {})</code> returns a Tablo::Table instance</p>","abstract":false,"location":{"filename":"src/table.cr","line_number":1211,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1211"},"def":{"name":"transpose","double_splat":{"name":"opts","external_name":"opts","restriction":""},"visibility":"Public","body":"inherited_attributes = {title: title, subtitle: subtitle, footer: footer, border: border, header_alignment: header_alignment, header_formatter: header_formatter, header_styler: header_styler, body_alignment: body_alignment, body_formatter: body_formatter, body_styler: body_styler, left_padding: left_padding, right_padding: right_padding, padding_character: padding_character, truncation_indicator: truncation_indicator, width: width, header_frequency: header_frequency, row_divider_frequency: row_divider_frequency, wrap_mode: wrap_mode, header_wrap: header_wrap, body_wrap: body_wrap, masked_headers: masked_headers?, omit_group_header_rule: omit_group_header_rule?, omit_last_rule: omit_last_rule?}\ndefault_extra_opts = {field_names_header_alignment: nil, field_names_body_alignment: nil, field_names_width: nil, field_names_header: nil, body_headers: nil}\nif opts.nil?\n  initializer_opts = inherited_attributes\n  extra_opts = default_extra_opts\nelse\n  initializer_opts = Util.update(inherited_attributes, from: opts)\n  extra_opts = Util.update(default_extra_opts, from: opts)\nend\nfields = column_registry.values\ntable = Table.new(fields, **initializer_opts) do |t|\n  width_opt = extra_opts[:field_names_width]\n  field_names_width = width_opt.nil? ? fields.map do |f|\n    f.header.size\n  end.max : width_opt\n  header = extra_opts[:field_names_header]\n  header = header.nil? ? \"\" : header.as(String)\n  t.add_column(0, body_alignment: extra_opts[:field_names_body_alignment], header: header, header_alignment: extra_opts[:field_names_header_alignment], width: field_names_width, &.header)\n  sources.each_with_index do |source, i|\n    header = extra_opts[:body_headers]\n    header = if header.nil?\n      source.to_s\n    else\n      if header =~ (/%d/)\n        \"#{header % i}\"\n      else\n        \"#{header}\"\n      end\n    end\n    t.add_column(i + 1, header: header) do |original_column|\n      original_column.body_cell_value(source, row_index: i)\n    end\n  end\nend\ntable\n"}},{"html_id":"using_column_indexes(*indexes,reordered=false)-instance-method","name":"using_column_indexes","doc":"Once a table has been defined, the `Table#using_column_indexes` method is used to\nselect the columns to be displayed by their index in the column registry, and to\nreorder them if necessary.\n\n_Mandatory parameter:_\n- `*indexes` : type is `Int32 || Tuple{Int32, Int32}` <br />\n  At least one column (or Tuple) identifier must be given. Column tuples\n  define an interval, selecting all the columns it contains.\n\n_Optional named parameter_\n- `reordered` : type is Bool, with a default value of `false` <br />\n  If `true`, allows to reorder the selected columns according to the order in which\n  they appear in the `*indexes` parameter.\n\nUsing the `using_column_indexes` method with reordering (`reordered=true`)\ntemporarily disables the display of group headers.\n\nExamples:\n```\nrequire \"tablo\"\n\ndata = [[-1.14, \"Abc\", \"Hello\", 4, 5],\n        [42.3, \"Xyz\", \"Halo\", 33, 42]]\n\ntable = Tablo::Table.new(data) do |t|\n  t.add_column(:col1, &.[0])\n  t.add_column(:col2, &.[1])\n  t.add_group(:group1)\n  t.add_column(:col3, &.[2])\n  t.add_group(:group2)\n  t.add_column(:col4, &.[3])\n  t.add_column(:col5, &.[4])\n  t.add_group(:group3)\nend\n```\nDisplay of the defined table :\n```\nputs table\n+-----------------------------+--------------+-----------------------------+\n|            group1           |    group2    |            group3           |\n+--------------+--------------+--------------+--------------+--------------+\n|         col1 | col2         | col3         |         col4 |         col5 |\n+--------------+--------------+--------------+--------------+--------------+\n|        -1.14 | Abc          | Hello        |            4 |            5 |\n|         42.3 | Xyz          | Halo         |           33 |           42 |\n+--------------+--------------+--------------+--------------+--------------+\n```\nDisplay 3 columns out of 5, without reordering them. <br />\nGroup headers are kept\n```\nputs table.using_column_indexes({1, 2}, 0)\n+-----------------------------+--------------+\n|            group1           |    group2    |\n+--------------+--------------+--------------+\n|         col1 | col2         | col3         |\n+--------------+--------------+--------------+\n|        -1.14 | Abc          | Hello        |\n|         42.3 | Xyz          | Halo         |\n+--------------+--------------+--------------+\n```\nDisplay 3 columns out of 5, in the order specified in `columns`\nparameter. <br />\nGroup headers are omitted\n```\nputs table.using_column_indexes({1, 2}, 0, reordered: true)\n+--------------+--------------+--------------+\n| col2         | col3         |         col1 |\n+--------------+--------------+--------------+\n| Abc          | Hello        |        -1.14 |\n| Xyz          | Halo         |         42.3 |\n+--------------+--------------+--------------+\n```","summary":"<p>Once a table has been defined, the <code><a href=\"../Tablo/Table.html#using_column_indexes%28%2Aindexes%2Creordered%3Dfalse%29-instance-method\">Table#using_column_indexes</a></code> method is used to select the columns to be displayed by their index in the column registry, and to reorder them if necessary.</p>","abstract":false,"args":[{"name":"indexes","external_name":"indexes","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"args_string":"(*indexes, reordered = false)","args_html":"(*indexes, reordered = <span class=\"n\">false</span>)","location":{"filename":"src/table.cr","line_number":1490,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1490"},"def":{"name":"using_column_indexes","args":[{"name":"indexes","external_name":"indexes","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"splat_index":0,"visibility":"Public","body":"if indexes.empty?\n  raise(Error::InvalidValue.new(\"No column index given\"))\nend\nused_columns.reordered = reordered\nindex_range = 0..(column_registry.size - 1)\nindexes.each do |e|\n  case e\n  when Int32\n    if !(e.in?(index_range))\n      raise(Error::InvalidColumnIndex.new(\"No such column index <#{e}>\"))\n    end\n    used_columns.indexes << e\n  when Tuple(Int32, Int32)\n    bg = e[0]\n    if !(bg.in?(index_range))\n      raise(Error::InvalidColumnIndex.new(\"No such column index <#{bg}>\"))\n    end\n    nd = e[1]\n    if !(nd.in?(index_range))\n      raise(Error::InvalidColumnIndex.new(\"No such column index <#{nd}>\"))\n    end\n    if bg > nd\n      bg.downto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    else\n      bg.upto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    end\n  else\n    raise(Error::InvalidColumnIndex.new(\"<#{e}> is not a valid index\"))\n  end\nend\ndeal_with_groups\nself\n"}},{"html_id":"using_columns(*columns,reordered=false)-instance-method","name":"using_columns","doc":"Once a table has been defined, the `Table#using_columns` method is used to\nselect the columns to be displayed, and to reorder them if necessary.\n\n_Mandatory parameter:_\n- `*columns` : type is `LabelType || Tuple{LabelType, LabelType}` <br />\n  At least one column (or Tuple) identifier must be given. Column tuples\n  define an interval, selecting all the columns it contains.\n\n_Optional named parameter_\n- `reordered` : type is Bool, with a default value of `false` <br />\n  If `true`, allows to reorder the selected columns according to the order in which\n  they appear in the `*columns` parameter.\n\nUsing the `using_columns` method with reordering (`reordered=true`)\ntemporarily disables the display of group headers.\n\nExamples:\n```\nrequire \"tablo\"\n\ndata = [[-1.14, \"Abc\", \"Hello\", 4, 5],\n        [42.3, \"Xyz\", \"Halo\", 33, 42]]\n\ntable = Tablo::Table.new(data) do |t|\n  t.add_column(:col1, &.[0])\n  t.add_column(:col2, &.[1])\n  t.add_group(:group1)\n  t.add_column(:col3, &.[2])\n  t.add_group(:group2)\n  t.add_column(:col4, &.[3])\n  t.add_column(:col5, &.[4])\n  t.add_group(:group3)\nend\n```\nDisplay of the defined table :\n```\nputs table\n+-----------------------------+--------------+-----------------------------+\n|            group1           |    group2    |            group3           |\n+--------------+--------------+--------------+--------------+--------------+\n|         col1 | col2         | col3         |         col4 |         col5 |\n+--------------+--------------+--------------+--------------+--------------+\n|        -1.14 | Abc          | Hello        |            4 |            5 |\n|         42.3 | Xyz          | Halo         |           33 |           42 |\n+--------------+--------------+--------------+--------------+--------------+\n```\n Display all columns in reverse order, group headers are omitted.\n```\nputs table.using_columns({:col5,:col1}, reordered: true)\n+--------------+--------------+--------------+--------------+--------------+\n|         col5 |         col4 | col3         | col2         |         col1 |\n+--------------+--------------+--------------+--------------+--------------+\n|            5 |            4 | Hello        | Abc          |        -1.14 |\n|           42 |           33 | Halo         | Xyz          |         42.3 |\n+--------------+--------------+--------------+--------------+--------------+\n```","summary":"<p>Once a table has been defined, the <code><a href=\"../Tablo/Table.html#using_columns%28%2Acolumns%2Creordered%3Dfalse%29-instance-method\">Table#using_columns</a></code> method is used to select the columns to be displayed, and to reorder them if necessary.</p>","abstract":false,"args":[{"name":"columns","external_name":"columns","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"args_string":"(*columns, reordered = false)","args_html":"(*columns, reordered = <span class=\"n\">false</span>)","location":{"filename":"src/table.cr","line_number":1389,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L1389"},"def":{"name":"using_columns","args":[{"name":"columns","external_name":"columns","restriction":""},{"name":"reordered","default_value":"false","external_name":"reordered","restriction":""}],"splat_index":0,"visibility":"Public","body":"if columns.empty?\n  raise(Error::InvalidValue.new(\"No column given\"))\nend\nused_columns.reordered = reordered\ncolumns.each do |e|\n  case e\n  when LabelType\n    index = column_registry.keys.index(e)\n    if index.nil?\n      raise(Error::LabelNotFound.new(\"No such column <#{e}>\"))\n    end\n    used_columns.indexes << index\n  when Tuple(LabelType, LabelType)\n    bg = column_registry.keys.index(e[0])\n    if bg.nil?\n      raise(Error::LabelNotFound.new(\"No such column <#{e[0]}>\"))\n    end\n    nd = column_registry.keys.index(e[1])\n    if nd.nil?\n      raise(Error::LabelNotFound.new(\"No such column <#{e[1]}>\"))\n    end\n    if bg > nd\n      bg.downto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    else\n      bg.upto(nd) do |idx|\n        used_columns.indexes << idx\n      end\n    end\n  end\nend\ndeal_with_groups\nself\n"}}],"macros":[{"html_id":"initialize(block_given)-macro","name":"initialize","doc":"The `initialize` macro generates two `initialize' methods, one with block_given = true\nand one with block_given = false","summary":"<p>The <code><a href=\"../Tablo/Table.html#initialize%28block_given%29-macro\">initialize</a></code> macro generates two `initialize' methods, one with block_given = true and one with block_given = false</p>","abstract":false,"args":[{"name":"block_given","external_name":"block_given","restriction":""}],"args_string":"(block_given)","args_html":"(block_given)","location":{"filename":"src/table.cr","line_number":70,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/table.cr#L70"},"def":{"name":"initialize","args":[{"name":"block_given","external_name":"block_given","restriction":""}],"visibility":"Public","body":"      def initialize(@sources : Enumerable(T), *,\n        @title : Heading = Config::Defaults.title,\n        @subtitle : Heading = Config::Defaults.subtitle,\n        @footer : Heading = Config::Defaults.footer,\n        \n#\n\n        @border : Border = Border.new(Config::Defaults.border_definition, Config::Defaults.border_styler),\n        \n#\n\n        @group_alignment : Justify = Config::Defaults.group_alignment,\n        @group_formatter : Cell::Text::Formatter = Config::Defaults.group_formatter,\n        @group_styler : Cell::Text::Styler = Config::Defaults.group_styler,\n        \n#\n\n        @header_alignment : Justify? = Config::Defaults.header_alignment,\n        @header_formatter : Cell::Data::Formatter = Config::Defaults.header_formatter,\n        @header_styler : Cell::Data::Styler = Config::Defaults.header_styler,\n        \n#\n\n        @body_alignment : Justify? = Config::Defaults.body_alignment,\n        @body_formatter : Cell::Data::Formatter = Config::Defaults.body_formatter,\n        @body_styler : Cell::Data::Styler = Config::Defaults.body_styler,\n        \n#\n\n        @left_padding : Int32 = Config::Defaults.left_padding,\n        @right_padding : Int32 = Config::Defaults.right_padding,\n        @padding_character : String = Config::Defaults.padding_character,\n        @truncation_indicator : String = Config::Defaults.truncation_indicator,\n        @width : Int32 = Config::Defaults.column_width,\n        \n#\n\n        @header_frequency : Int32? = Config::Defaults.header_frequency,\n        @row_divider_frequency : Int32? = Config::Defaults.row_divider_frequency ,\n        @wrap_mode : WrapMode = Config::Defaults.wrap_mode,\n        @header_wrap : Int32? = Config::Defaults.header_wrap,\n        @body_wrap : Int32? = Config::Defaults.body_wrap,\n        \n#\n\n        @masked_headers  : Bool = Config::Defaults.masked_headers?,\n        @omit_group_header_rule : Bool = Config::Defaults.omit_group_header_rule?,\n        \n{% if block_given %}\n        @omit_last_rule : Bool = Config::Defaults.omit_last_rule?, &)\n        {% else %}\n        @omit_last_rule : Bool = Config::Defaults.omit_last_rule?)\n        {% end %}\n\n\n        self.row_count = sources.size\n        \n{% if block_given == true %}\n          yield self\n        {% end %}\n\n        \n# Table checks\n\n        check_header_frequency\n        check_row_divider_frequency\n        check_header_wrap\n        check_body_wrap\n        \n# Table & column checks\n\n        check_width(width)\n        check_padding(left_padding)\n        check_padding(right_padding)\n        check_padding_character(padding_character)\n        check_truncation_indicator(truncation_indicator)\n      \nend\n    \n"}}]},{"html_id":"tablo/Tablo/WrapMode","path":"Tablo/WrapMode.html","kind":"enum","full_name":"Tablo::WrapMode","name":"WrapMode","abstract":false,"ancestors":[{"html_id":"tablo/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"tablo/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"tablo/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"tablo/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/types.cr","line_number":108,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L108"}],"repository_name":"tablo","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Rune","name":"Rune","value":"0"},{"id":"Word","name":"Word","value":"1"}],"namespace":{"html_id":"tablo/Tablo","kind":"module","full_name":"Tablo","name":"Tablo"},"doc":"Line break settings :\n- Rune: allowed between characters\n- Word: allowed between words","summary":"<p>Line break settings : - Rune: allowed between characters - Word: allowed between words</p>","instance_methods":[{"html_id":"rune?-instance-method","name":"rune?","abstract":false,"location":{"filename":"src/types.cr","line_number":109,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L109"},"def":{"name":"rune?","visibility":"Public","body":"self == Rune"}},{"html_id":"word?-instance-method","name":"word?","abstract":false,"location":{"filename":"src/types.cr","line_number":110,"url":"https://github.com/hutou/tablo/blob/3463694b4740c03bf7d956080531d0160fd20a98/src/types.cr#L110"},"def":{"name":"word?","visibility":"Public","body":"self == Word"}}]}]}]}}